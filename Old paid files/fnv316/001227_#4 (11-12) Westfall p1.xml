<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = true;&#xD;&#xA;&#xD;&#xA;ProgressSettings.Initialize();&#xD;&#xA;wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep = ProgressSettings.CurrentSettings.westfallEins - 1;&#xD;&#xA;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Loading current Quester step &quot; + (ProgressSettings.CurrentSettings.westfallEins));&#xD;&#xA;&#xD;&#xA;Thread p = new Thread(() =&gt;&#xD;&#xA;{    &#xD;&#xA;ProgressSettings.inProgress = true;&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver initialized&quot;);&#xD;&#xA; &#xD;&#xA; while(robotManager.Products.Products.IsStarted)&#xD;&#xA; {&#xD;&#xA;if(!ProgressSettings.inProgress)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.Dispose();&#xD;&#xA;Logging.Write(&quot;[FNV_Quester]: Progress saver disposed&quot;);&#xD;&#xA;break;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)&#xD;&#xA;  {&#xD;&#xA; if(ProgressSettings.CurrentSettings.westfallEins &lt; wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep)&#xD;&#xA;{&#xD;&#xA;ProgressSettings.CurrentSettings.westfallEins = wManager.Wow.Helpers.Quest.QuesterCurrentContext.CurrentStep;&#xD;&#xA;ProgressSettings.CurrentSettings.Save();&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;  Thread.Sleep(1000);&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;p.Start();" />
    <QuestsSorted Action="If" NameClass="!Quest.GetQuestCompleted(199)" />
    <QuestsSorted Action="PickUp" NameClass="WestfallStew" />
    <QuestsSorted Action="TurnIn" NameClass="WestfallStew" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Stringy Vulture Meat&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Goretusk Liver&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Okra&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Goretusk Snout&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(&quot;Murloc Eye&quot;);" />
    <QuestsSorted Action="PickUp" NameClass="WestfallStew21" />
    <QuestsSorted Action="PickUp" NameClass="GoretuskLiverPie" />
    <QuestsSorted Action="Pulse" NameClass="WestfallStew22" />
    <QuestsSorted Action="Pulse" NameClass="WestfallStew21" />
    <QuestsSorted Action="Pulse" NameClass="WestfallStew23" />
    <QuestsSorted Action="Pulse" NameClass="WestfallStew24" />
    <QuestsSorted Action="Pulse" NameClass="GoretuskLiverPie" />
    <QuestsSorted Action="TurnIn" NameClass="WestfallStew21" />
    <QuestsSorted Action="TurnIn" NameClass="GoretuskLiverPie" />
    <QuestsSorted Action="RunCode" NameClass="while(wManager.wManagerSetting.CurrentSetting.DoNotSellList.Contains(&quot;Okra&quot;))&#xD;&#xA;{&#xD;&#xA;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Stringy Vulture Meat&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Okra&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Goretusk Snout&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Murloc Eye&quot;);&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Goretusk Liver&quot;);&#xD;&#xA;&#xD;&#xA;}" />
    <QuestsSorted Action="RunCode" NameClass="wManager.wManagerSetting.CurrentSetting.DoNotSellList.Remove(&quot;Goretusk Liver&quot;);" />
    <QuestsSorted Action="TurnIn" NameClass="ReporttoGryanStoutmantle" />
    <QuestsSorted Action="If" NameClass="Quest.GetQuestCompleted(109) &amp;&amp; !Quest.HasQuest(153) &amp;&amp; !Quest.GetQuestCompleted(153)" />
    <QuestsSorted Action="RunCode" NameClass="FlightMaster.discoverTaxi(&quot;Westfall&quot;);" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="ProgressSettings.Dispose();&#xD;&#xA;ProgressSettings.inProgress = false;&#xD;&#xA;&#xD;&#xA;FNVSettings.Initialize();&#xD;&#xA;FNVSettings.CurrentSettings.westfallEins = true;&#xD;&#xA;FNVSettings.Dispose();" />
    <QuestsSorted Action="LoadProfile" NameClass="FNV_V2\#0 START_FNVLauncher_V2.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="234" Name="Gryan Stoutmantle" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>109</int>
      </TurnInQuests>
      <Position X="-10508.8" Y="1045.23" Z="60.51867" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="261" Name="Guard Thomas" GameObject="false">
      <PickUpQuests>
        <int>109</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-9610.23" Y="-1032.05" Z="41.12543" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="235" Name="Salma Saldean" GameObject="false">
      <PickUpQuests>
        <int>22</int>
        <int>38</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>22</int>
        <int>36</int>
        <int>38</int>
      </TurnInQuests>
      <Position X="-10112.1" Y="1042.1" Z="37.47142" />
    </NPCQuest>
    <NPCQuest Id="238" Name="Verna Furlbrow" GameObject="false">
      <PickUpQuests>
        <int>36</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-9853.05" Y="919.542" Z="30.27864" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-8898.23" Y="-119.838" Z="81.83307" Type="Flying" />
      <Entry>1213</Entry>
      <Name>Godric Rothgar</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8901.59" Y="-112.716" Z="81.84941" Type="Flying" />
      <Entry>152</Entry>
      <Name>Brother Danil</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8926.74" Y="-195.589" Z="80.58955" Type="Flying" />
      <Entry>459</Entry>
      <Name>Drusilla La Salle</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8918.36" Y="-208.411" Z="82.12579" />
      <Entry>911</Entry>
      <Name>Llane Beshere</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8914.57" Y="-215.016" Z="82.11662" />
      <Entry>925</Entry>
      <Name>Brother Sammuel</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8853.59" Y="-193.336" Z="81.93233" />
      <Entry>375</Entry>
      <Name>Priestess Anetta</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8851.57" Y="-188.234" Z="89.31541" />
      <Entry>198</Entry>
      <Name>Khelden Bremen</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8863.47" Y="-210.905" Z="80.57185" Type="Flying" />
      <Entry>915</Entry>
      <Name>Jorik Kerridan</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9462.29" Y="87.8151" Z="58.33875" />
      <Entry>2046</Entry>
      <Name>Andrew Krighton</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9468.14" Y="108.976" Z="57.4777" Type="Flying" />
      <Entry>927</Entry>
      <Name>Brother Wilhelm</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9461.85" Y="109.353" Z="57.69536" Type="Flying" />
      <Entry>913</Entry>
      <Name>Lyria Du Lac</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9462.66" Y="16.1915" Z="56.96339" />
      <Entry>295</Entry>
      <Name>Innkeeper Farley</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9471.67" Y="34.451" Z="63.82062" />
      <Entry>328</Entry>
      <Name>Zaldimar Wefhellt</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>MageTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9460.75" Y="33.1338" Z="63.82071" />
      <Entry>377</Entry>
      <Name>Priestess Josetta</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9465.79" Y="12.6454" Z="63.82137" />
      <Entry>917</Entry>
      <Name>Keryn Sylvius</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9472.8" Y="-5.32661" Z="49.7947" />
      <Entry>906</Entry>
      <Name>Maximillian Crowe</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarlockTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9469.28" Y="-1355.24" Z="47.20492" Type="Flying" />
      <Entry>1198</Entry>
      <Name>Rallic Finn</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-9652.26" Y="654.731" Z="38.6541" />
      <Entry>1645</Entry>
      <Name>Quartermaster Hicks</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-10128.7" Y="1055.21" Z="36.25278" Type="Flying" />
      <Entry>233</Entry>
      <Name>Farmer Saldean</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-10658.5" Y="996.851" Z="32.87503" Type="Flying" />
      <Entry>1668</Entry>
      <Name>William MacGregor</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-10653.4" Y="1166.52" Z="34.4647" Type="Flying" />
      <Entry>8931</Entry>
      <Name>Innkeeper Heather</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8867.79" Y="673.673" Z="97.90368" />
      <Entry>6740</Entry>
      <Name>Innkeeper Allison</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8787.69" Y="609.631" Z="96.77518" />
      <Entry>1287</Entry>
      <Name>Marda Weller</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8752.3" Y="377.572" Z="101.0563" Type="Flying" />
      <Entry>918</Entry>
      <Name>Osborne the Night Man</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>RogueTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8689.32" Y="323.237" Z="109.4382" />
      <Entry>5479</Entry>
      <Name>Wu Shen</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>WarriorTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8415" Y="553.182" Z="95.62876" />
      <Entry>5515</Entry>
      <Name>Einris Brightspear</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8519" Y="863.419" Z="109.826" />
      <Entry>5489</Entry>
      <Name>Brother Joshua</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PriestTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8577" Y="881.698" Z="106.519" />
      <Entry>928</Entry>
      <Name>Lord Grayson Shadowbreaker</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>PaladinTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8776" Y="1100.09" Z="92.54364" Type="Flying" />
      <Entry>5504</Entry>
      <Name>Sheldras Moontree</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>DruidTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-8795.48" Y="709.113" Z="102.284" />
      <Entry>1298</Entry>
      <Name>Frederick Stover</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5590.67" Y="-428.416" Z="397.3257" />
      <Entry>1273</Entry>
      <Name>Grawn Thromwyn</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5576.21" Y="-422.031" Z="397.326" />
      <Entry>1240</Entry>
      <Name>Boran Ironclink</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5601.6" Y="-531.203" Z="399.6536" />
      <Entry>1247</Entry>
      <Name>Innkeeper Belm</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
    <Npc>
      <Position X="-5618.54" Y="-454.071" Z="407.6593" Type="Flying" />
      <Entry>1231</Entry>
      <Name>Grif Wildheart</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>HunterTrainer</Type>
      <ContinentId>Azeroth</ContinentId>
    </Npc>
  </Npc>
  <Blackspots>
    <Blackspot X="-10366.38" Y="1104.713" Z="36.9027" Radius="35" />
    <Blackspot X="-10168.1709" Y="916.471069" Z="40.5457344" Radius="35" />
    <Blackspot X="-10194.1123" Y="1098.59521" Z="36.908226" Radius="35" />
    <Blackspot X="-10148.8838" Y="1165.62024" Z="36.7066345" Radius="35" />
    <Blackspot X="-10180.0957" Y="1132.17493" Z="37.0592041" Radius="10" />
    <Blackspot X="-9942.011" Y="1223.65161" Z="42.57778" Radius="45" />
    <Blackspot X="-9847.424" Y="1027.86987" Z="33.1188164" Radius="25" />
    <Blackspot X="-9588.811" Y="1070.33411" Z="1.04085648" Radius="25" />
    <Blackspot X="-9587.277" Y="1443.043" Z="2.036167" Radius="25" />
    <Blackspot X="-9592.493" Y="1509.848" Z="0.49681133" Radius="25" />
    <Blackspot X="-9676.075" Y="1527.413" Z="12.0730867" Radius="25" />
    <Blackspot X="-10204.33" Y="1444.42615" Z="40.45753" Radius="60" />
    <Blackspot X="-10493.3408" Y="1331.34875" Z="42.569313" Radius="25" />
    <Blackspot X="-9986.621" Y="1458.07617" Z="43.4400177" Radius="35" />
    <Blackspot X="-9880.477" Y="1553.85144" Z="44.0337524" Radius="25" />
    <Blackspot X="-9726.125" Y="1446.04871" Z="44.8378334" Radius="25" />
    <Blackspot X="-10101.4414" Y="624.9636" Z="37.3918381" Radius="50" />
    <Blackspot X="-9976.757" Y="617.4911" Z="39.18516" Radius="50" />
    <Blackspot X="-9610.973" Y="515.814148" Z="41.69885" Radius="15" />
    <Blackspot X="-9447.529" Y="457.102081" Z="52.0872421" Radius="25" />
    <Blackspot X="-9466.709" Y="-167.867859" Z="59.4577065" Radius="25" />
    <Blackspot X="-9485.359" Y="-221.477829" Z="59.3963242" Radius="25" />
    <Blackspot X="-9476.492" Y="-348.705" Z="60.11857" Radius="45" />
    <Blackspot X="-9486.649" Y="-427.664734" Z="59.5891075" Radius="45" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>Goretusk Liver Pie</Name>
      <QuestId>
        <int>22</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-10099.13" Y="1501.853" Z="45.64534" />
          <Vector3 X="-10078.58" Y="1278.857" Z="40.90003" />
          <Vector3 X="-10297.24" Y="1183.762" Z="37.90449" />
          <Vector3 X="-10444.52" Y="1135.162" Z="38.01566" />
        </HotSpots>
        <EntryTarget>
          <int>454</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Report to Gryan Stoutmantle</Name>
      <QuestId>
        <int>109</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Westfall Stew</Name>
      <QuestId>
        <int>36</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Westfall Stew 2 1</Name>
      <QuestId>
        <int>38</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-10047.4" Y="1182.311" Z="39.45678" />
          <Vector3 X="-9976.965" Y="1287.108" Z="43.93761" />
          <Vector3 X="-10047.3" Y="1324.433" Z="44.33318" />
          <Vector3 X="-10079.71" Y="1404.478" Z="44.08891" />
          <Vector3 X="-10187.02" Y="1514.439" Z="43.08158" />
          <Vector3 X="-10301.99" Y="1636.546" Z="44.1793" />
          <Vector3 X="-10361.55" Y="1775.162" Z="35.5318" />
        </HotSpots>
        <EntryTarget>
          <int>199</int>
          <int>1109</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>true</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return Quest.GetQuestCompleted(38) || ItemsManager.GetItemCountById(729) &gt;= 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Westfall Stew 2 2</Name>
      <QuestId>
        <int>38</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-9661.779" Y="1071.082" Z="11.61758" />
          <Vector3 X="-9647.85" Y="1199.544" Z="9.673792" />
          <Vector3 X="-9631.683" Y="1377.672" Z="7.956545" />
          <Vector3 X="-9614.524" Y="1481.498" Z="8.403329" />
          <Vector3 X="-9722.016" Y="1640.662" Z="10.6327" />
        </HotSpots>
        <EntryTarget>
          <int>515</int>
          <int>126</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>true</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return Quest.GetQuestCompleted(38) || ItemsManager.GetItemCountById(730) &gt;= 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Westfall Stew 2 3</Name>
      <QuestId>
        <int>38</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-10331.3" Y="1173.713" Z="38.84548" />
          <Vector3 X="-10475.9" Y="1163.35" Z="48.17151" />
          <Vector3 X="-10253.84" Y="1271.208" Z="37.72698" />
          <Vector3 X="-10096.15" Y="1277.654" Z="39.91621" />
          <Vector3 X="-10075.55" Y="1479.811" Z="47.38259" />
        </HotSpots>
        <EntryTarget>
          <int>454</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>true</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return Quest.GetQuestCompleted(38) || ItemsManager.GetItemCountById(731) &gt;= 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Westfall Stew 2 4</Name>
      <QuestId>
        <int>38</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-9978.676" Y="1148.072" Z="43.32422" />
          <Vector3 X="-10171.68" Y="1276.32" Z="37.07275" />
          <Vector3 X="-10473.35" Y="1764.972" Z="35.36771" />
        </HotSpots>
        <EntryTarget>
          <int>480</int>
          <int>36</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>true</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <CanCondition />
      <IsCompleteCondition>return Quest.GetQuestCompleted(38) || ItemsManager.GetItemCountById(732) &gt;= 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>100</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>using robotManager.Helpful;
using robotManager.Products;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Threading.Tasks;

//FlightMaster
public class FlightMaster
{

    private int priority;

    public FlightMaster(int priority)
    {
        this.priority = priority;
    }

    public static void main(String[] args)
    {
        FlightMaster temp = new FlightMaster(1);
        Logging.Write("Stuff");
        

       // temp.startFlightMaster();
    }

    public static int timer = 0;
    public static Vector3 myPositionAtStart = new Vector3(0, 0, 0);
    public static bool _deleteOldPath = false;
    public static bool _isLaunched ;
    static bool longMoveState = false;
    static Vector3 checkDistanceToDestination;
    private static int travelDistance = 1250;
    private static float saveDistance;
    public static Vector3 destinationVector = new Vector3(0, 0, 0);

    //public static MovementEvents.MovementCancelableHandler MovementEventsOnOnMovementPulse { get; private set; }

    // public static List&lt;FlightMasterDB&gt; FML = fillDB();

    public void startFlightMaster()
    {
        Logging.Write("[FNV_Quester]: Flight Master initialized");
        _isLaunched = true;
        FNVSettings.Load();
        
        //flightMasterLoop();
    }

    public void start()
    {
        //Logging.Write("Subscribing to event");
       // SubscribeToEvent();
       // watchForEvents();
    }

    public void stop()
    {
        //Logging.Write("Unsubscribing to event");
        //UnSubscribeEvents();
    }

    public static void disposeFlightMaster()
    {
        _isLaunched = false;
        FNVSettings.CurrentSettings.Save();
        //clearOldPath();
        //_deleteOldPath = true;
        //UnSubscribeEvents();
        //MovementEvents.OnMovementPulse -= new MovementEvents.MovementCancelableHandler(FlightMaster.MovementEventsOnOnMovementPulse);
        //Logging.Write("[FNV_Quester]: Flight Master disposed");
    }

    public static void disposeFlightMaster(int wert)
    {
        _isLaunched = false;
        if(wert == 1)
        {
            Logging.Write("Flight Master stopped, dead");
        }
        else
        {
            Logging.Write("Flight Master stopped, combat");
        }
    }


    private void SubscribeToEvent()
    {
         MovementEvents.OnMovementPulse += MovementEventsOnOnMovementPulse;
    }

    public void UnSubscribeEvents()
    {
        MovementEvents.OnMovementPulse -= MovementEventsOnOnMovementPulse;
    }

    private void watchForEvents()
    {

        EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
        {


            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_DEAD)
            {
                Logging.Write("[FNV_Quester]: Player died, stop Flight Master");
                disposeFlightMaster(1);
            }
            if (id == wManager.Wow.Enums.LuaEventsId.PLAYER_ENTER_COMBAT)
            {
                disposeFlightMaster(2);
          		  Logging.Write("[FNV_Quester]: Player entered combat, stop Flight Master");
            }
          	

        };

    }


    private void MovementEventsOnOnMovementPulse(List&lt;Vector3&gt; path, CancelEventArgs cancelEventArgs)
    {
        if(timer &lt; 1)
        {
            //Logging.Write("Enter MovementEventsOnOnMovementPulse");
            checkDistanceToDestination = path.Last&lt;Vector3&gt;();
            longMove(path.Last&lt;Vector3&gt;());
            destinationVector = path.Last&lt;Vector3&gt;();
            if(ObjectManager.Me.Position.DistanceTo(destinationVector) &gt; 1000 &amp;&amp; !_isLaunched)
                startFlightMaster();
        }
        else
        {
            Logging.Write("[FNV_Quester]: Taxi in Pause");
        }
    }

    public bool longMove(Vector3 destination)
    {
        saveDistance = new Vector3(destination).DistanceTo(ObjectManager.Me.Position);
        //Logging.Write("[FNV_Quester]: Distance to destination " + saveDistance);
        if(new Vector3(destination).DistanceTo(ObjectManager.Me.Position) &lt; travelDistance)
        {
            longMoveState = false;
            return false;
        }
        else
        {
            longMoveState = true;
            return true;
        }
    }


    /*
    public static void flightMasterLoop()
    {

        myPositionAtStart = ObjectManager.Me.Position;
        //Logging.Write("[FNV_Quester]: Current position " + myPositionAtStart);
        while(Products.IsStarted &amp;&amp; _isLaunched)
        {
            try
            {
                if(!Products.InPause &amp;&amp; longMoveState)
                {
                    Logging.Write("[FNV_Quester]: Long move detected, checking own Taxi DB to find a better path");

                    FlightMasterDB from = getClosestFlightMasterFrom();
                    FlightMasterDB to = getClosestFlightMasterTo();

                    if(!to.name.Contains("null") &amp;&amp; !from.name.Contains("null") &amp;&amp; !from.Equals(to) &amp;&amp; from.position.DistanceTo(ObjectManager.Me.Position) + to.position.DistanceTo(destinationVector) &lt;= saveDistance)
                    {
                        Logging.Write("[FNV_Quester]: Shorter path detected, taking Taxi from " + from.name + " to " + to.name);
                        takeTaxi(from.name, to.name);

                        disposeFlightMaster();
                    }
                    else
                    {
                        Logging.Write("[FNV_Quester]: No shorter path available, skip flying");
                        disposeFlightMaster();

                    }
                }
            }
            catch(Exception e)
            {
                Logging.Write("[FNV_Quester]: Error " + e);
            }

            //Logging.Write("Pause flight master scan for 10 seconds");
            disposeFlightMaster();
            //Thread.Sleep(10000);
        }
    }
    */

    public static FlightMasterDB getClosestFlightMasterFrom()
    {
        List&lt;FlightMasterDB&gt; FMLnfmd = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);
        //Logging.Write("returnObject " + returnObject.name);

        foreach(var a in FMLnfmd)
        {
            //Logging.Write("A : " + a.name);
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(ObjectManager.Me.Position) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(ObjectManager.Me.Position);
                returnObject = a;
            }
        }
        //Logging.Write("returnObject " + returnObject.name);
        return returnObject;
    }

    public static FlightMasterDB getClosestFlightMasterTo()
    {
        List&lt;FlightMasterDB&gt; FMLgcfmt = fillDB();
        float tempDistance = 99999;
        FlightMasterDB returnObject = new FlightMasterDB("null", 0, new Vector3(0, 0, 0), false);
        //Logging.Write("returnObject " + returnObject.name);

        foreach(var a in FMLgcfmt)
        {
            //Logging.Write("A : " + a.name);
            if(a.alreadyDiscovered &amp;&amp; a.position.DistanceTo(destinationVector) &lt; tempDistance &amp;&amp; (a.continent == checkContinent()))
            {
                tempDistance = a.position.DistanceTo(destinationVector);
                returnObject = a;
            }
        }
        //Logging.Write("returnObject " + returnObject.name);
        return returnObject;
    }

    public static bool checkContinent()
    {
        if(Usefuls.ContinentId == (int)ContinentId.Kalimdor)
        {
            //Logging.Write("[FNV_Quester]: Currently located in Kalimdor");
            return true;
        }
        else
        {
            //Logging.Write("[FNV_Quester]: Currently located in Eastern Kingdoms");
            return false;
        }
        
    }

    public static void waitFlying()
    {
        //Logging.Write("Disable movement during flying");
        //MovementManager.StopMove();
        /*
        //Disable movement
        if(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[APF]: Stopping movement");

            wManager.Events.MovementEvents.OnMovementPulse += (points, cancelable) =&gt;
            {
                cancelable.Cancel = true;
            };
            wManager.Events.MovementEvents.OnMoveToPulse += (point, cancelable) =&gt;
            {
                cancelable.Cancel = true;
            };

            wManager.Wow.Helpers.Fight.StopFight();
            Lua.LuaDoString("ClearTarget()");

            Thread.Sleep(Usefuls.Latency + 2500);
        }
        */




        while(ObjectManager.Me.IsOnTaxi)
        {
            Logging.Write("[FNV_Quester]: On taxi, waiting");
            Thread.Sleep(30000);
        }



      /*
        //Reenable movement
        if(!ObjectManager.Me.IsOnTaxi)
        {
            wManager.Events.MovementEvents.OnMovementPulse += (points, cancelable) =&gt;
            {
                cancelable.Cancel = false;
            };
            wManager.Events.MovementEvents.OnMoveToPulse += (point, cancelable) =&gt;
            {
                cancelable.Cancel = false;
            };
        }
        */
        Logging.Write("[FNV_Quester]: Arrived at destination Flight Master, finished waiting");
    }

    public static List&lt;FlightMasterDB&gt; fillDB()
    {
        //True = Kalimdor ; False = Eastern Kingdoms
        List&lt;FlightMasterDB&gt; FMListe = new List&lt;FlightMasterDB&gt;();
        FlightMasterDB Stormwind = new FlightMasterDB("Stormwind", 352, new Vector3(-8835.76f, 490.084f, 109.6157f), false);
        FMListe.Add(Stormwind);
        FlightMasterDB ArathiHighlands = new FlightMasterDB("Arathi Highlands", 2835, new Vector3(-1240.03f, -2513.96f, 21.92969f), false);
        FMListe.Add(ArathiHighlands);
        FlightMasterDB Ashenvale = new FlightMasterDB("Ashenvale", 4267, new Vector3(-7224.87f, -3738.21f, 8.401313f), true);
        FMListe.Add(Ashenvale);
        FlightMasterDB Darkshore = new FlightMasterDB("Darkshore", 3841, new Vector3(6343.2f, 561.651f, 15.79876f), true);
        FMListe.Add(Darkshore);
        FlightMasterDB Stranglethorn = new FlightMasterDB("Stranglethorn", 2859, new Vector3(-14477.9f, 464.101f, 36.38163f), false);
        FMListe.Add(Stranglethorn);
        FlightMasterDB Duskwood = new FlightMasterDB("Duskwood", 2409, new Vector3(-10513.8f, -1258.79f, 41.43174f), false);
        FMListe.Add(Duskwood);
        FlightMasterDB FeralasFeathermoon = new FlightMasterDB("Feralas, Feathermoon", 8019, new Vector3(-4370.5f, 3340f, 12f), true);
        FMListe.Add(FeralasFeathermoon);
        FlightMasterDB FeralasThalanaar = new FlightMasterDB("Feralas, Thalanaar", 4319, new Vector3(-4491f, -781f, -40f), true);
        FMListe.Add(FeralasThalanaar);
        FlightMasterDB Tanaris = new FlightMasterDB("Tanaris", 7823, new Vector3(-7224.9f, -3738.2f, 8.4f), true);
        FMListe.Add(Tanaris);
        FlightMasterDB Hinterlands = new FlightMasterDB("The Hinterlands", 8018, new Vector3(282.1f, -2001.3f, 194.1f), false);
        FMListe.Add(Hinterlands);
        FlightMasterDB Ironforge = new FlightMasterDB("Ironforge", 1573, new Vector3(-4821.13f, -1152.4f, 502.2116f), false);
        FMListe.Add(Ironforge);
        FlightMasterDB Menethil = new FlightMasterDB("Wetlands", 1571, new Vector3(-3793.2f, -782.052f, 9.014864f), false);
        FMListe.Add(Menethil);
        FlightMasterDB TheBarrens = new FlightMasterDB("The Barrens", 16227, new Vector3(-898.246f, -3769.65f, 11.71021f), true);
        FMListe.Add(TheBarrens);
        FlightMasterDB Redridge = new FlightMasterDB("Redridge Mountains", 931, new Vector3(-9435.8f, -2234.79f, 69.43174f), false);
        FMListe.Add(Redridge);
        FlightMasterDB Teldrassil = new FlightMasterDB("Teldrassil", 3838, new Vector3(8640.58f, 841.118f, 23.26363f), true);
        FMListe.Add(Teldrassil);
        FlightMasterDB Southshore = new FlightMasterDB("Hillsbrad Foothiils", 2432, new Vector3(-715.146f, -512.134f, 26.54455f), false);
        FMListe.Add(Southshore);
        FlightMasterDB Stonetalon = new FlightMasterDB("Stonetalon Mountains", 4407, new Vector3(2682.83f, 1466.45f, 233.6483f), true);
        FMListe.Add(Stonetalon);
        FlightMasterDB Thelsamar = new FlightMasterDB("Loch Modan", 1572, new Vector3(-5424.85f, -2929.87f, 347.5623f), false);
        FMListe.Add(Thelsamar);
        FlightMasterDB Theramore = new FlightMasterDB("Dustwallow Marsh", 4321, new Vector3(-3828.88f, -4517.51f, 10.66067f), true);
        FMListe.Add(Theramore);
        //Probably false coords Theramore or Western Pleagues
        FlightMasterDB WesternP = new FlightMasterDB("Western Pleaguelands", 12596, new Vector3(-3828.88f, -4517.51f, 10.66067f), false);
        FMListe.Add(WesternP);
        FlightMasterDB Westfall = new FlightMasterDB("Westfall", 523, new Vector3(-10628.8f, 1037.79f, 34.43174f), false);
        FMListe.Add(Westfall);
        return FMListe;
    }

    public static bool validFlight(String from, String to)
    {
        bool von = false;
        bool zu = false;
        List&lt;FlightMasterDB&gt; FMLvf = fillDB();

        for(int i = 0; i &lt; FMLvf.Count; i++)
        {
            if(FMLvf[i].name.Contains(from))
            {
                von = FMLvf[i].continent;
            }
            if(FMLvf[i].name.Contains(to))
            {
                zu = FMLvf[i].continent;
            }
        }
        return von != zu;
    }

    public static bool discoveredTaxiNodes(String from, String to)
    {

    //Logging.Write("Enter discoveredTaxiNodes");
        List&lt;FlightMasterDB&gt; FMLDTN = fillDB();
        //Logging.Write("Test 0: " + FMLDTN.Count);

        foreach(var ele in FMLDTN)
        {
            if(ele.name.Contains(from))
            {
            //Logging.Write("Test 1");
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node from " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }

        foreach(var ele in FMLDTN)
        {
            //Logging.Write("Test 2");
            if(ele.name.Contains(to))
            {
                if(!ele.alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Taxi node to " + ele.name + " has not been discovered so far. Abort taking taxi.");
                    return false;
                }
            }
        }
        //Logging.Write("Test 3");
        return true;
    }

    public static void takeTaxi(String from, String to)
    {

        List&lt;FlightMasterDB&gt; FMLtt = fillDB();
        bool canProceed = true;
        try
        {
            //List&lt;FlightMasterDB&gt; 
            FMLtt = fillDB();
        }
        catch(Exception e)
        {
            Logging.Write("Error: " + e);
        }

        //Logging.Write("Enter take taxi");

        Vector3 myPos = ObjectManager.Me.Position;

        if(Usefuls.MapZoneName.Contains(to))
        {
            canProceed = false;
            Logging.Write("[FNV_Quester]: Already in the zone we are going to travel to. Skip flying.");
        }
        /*
        if(!discoveredTaxiNodes(from, to))
            canProceed = false;
        
        if(canProceed)
        {
            foreach(var temp in FMLtt)
            {
                if(temp.name.Contains(from) &amp;&amp; temp.position.DistanceTo(myPos) &gt; 1000)
                {
                    Logging.Write("[FNV_Quester]: Distance to Flight Master " + temp.position.DistanceTo(myPos) + ", &gt; 1000. Skip flying.");
                    canProceed = false;
                }
            }
        }
        */

        if(canProceed)
        {

            if(validFlight(from, to))
            {
                Logging.Write("[FNV_Quester]: Unable to fly between Kalimdor and Eastern Kingdoms");
            }

            var position = new Vector3();
            int npcEntryId = 0;

            for(int i = 0; i &lt; FMLtt.Count; i++)
            {
                if(FMLtt[i].name.Contains(from))
                {
                    position = FMLtt[i].position;
                    npcEntryId = FMLtt[i].NPCId;
                    FMLtt[i].name.Contains(from);
                }
            }


            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId) &amp;&amp; !Fight.InFight)
                {
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                    while(!ObjectManager.Me.IsOnTaxi)
                    {
                        Usefuls.SelectGossipOption(GossipOptionsType.taxi);

                        int node = Lua.LuaDoString&lt;int&gt;("for i=0,30 do if string.find(TaxiNodeName(i),'" + to + "') then return i end end");
                        Lua.LuaDoString("TakeTaxiNode(" + node + ")");
                        Logging.Write("[FNV_Quester]: Taking Taxi from " + from + " to " + to + ".");
                        Thread.Sleep(Usefuls.Latency + 2500);
                    }
                }
            }
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            waitFlying();
            return;
        }
        //return;
    }

    public static void discoverTaxi(String discoverName)
    {
        FNVSettings.Load();
        List&lt;FlightMasterDB&gt; FMLdt = fillDB();

        var position = new Vector3();
        int npcEntryId = 0;
        int j = 0;
        bool alreadyDiscoveredFlightMaster = false;

        for(int i = 0; i &lt; FMLdt.Count; i++)
        {
            if(FMLdt[i].name.Contains(discoverName))
            {
                if(FMLdt[i].alreadyDiscovered)
                {
                    Logging.Write("[FNV_Quester]: Flight Master of " + FMLdt[i].name + " already discovered. Skip it.");
                    alreadyDiscoveredFlightMaster = true;
                    break;
                }

                position = FMLdt[i].position;
                npcEntryId = FMLdt[i].NPCId;
                j = i;
            }
        }

        if(!alreadyDiscoveredFlightMaster)
        {

            if(!ObjectManager.Me.IsOnTaxi)
            {
                wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();

                while(!wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                   // wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                    wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
                    wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId);
                }
                if(wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(position, npcEntryId))
                {
                    Usefuls.SelectGossipOption(GossipOptionsType.taxi);
                    Thread.Sleep(Usefuls.Latency + 250);
                    //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;
                }
            }
            Logging.Write("[FNV_Quester]: Flight Master " + FMLdt[j].name + " discovered");
            FMLdt[j].alreadyDiscovered = true;
            FNVSettings.flightMasterSaveChanges(FMLdt[j]);
            //wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;
            
        }
        timer = 0;
        return;
    }

    }

    public class FlightMasterDB
    {
        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent, bool alreadyDiscovered)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            this.alreadyDiscovered = alreadyDiscovered;
        }

        public FlightMasterDB(String name, int NPCId, Vector3 position, bool continent)
        {
            this.name = name;
            this.NPCId = NPCId;
            this.position = position;
            this.continent = continent;
            
        }

        public int NPCId { get; set; }
        public Vector3 position { get; set; }
        public String name { get; set; }
        public bool continent { get; set; }
        public bool alreadyDiscovered { get; set; }

    }

//Tram
public class Tram
{

    //Stormwind to Ironforge
    static Vector3 positionTramInIronforge = new Vector3(4.58065, 28.2097, 6.90526);
    static Vector3 positionTramInStormwind = new Vector3(4.581913, 2511.531, 7.091796);

    static Vector3 positionWaitTramIronforge = new Vector3(19.1, 28, -4.3);
    static Vector3 positionOnTramIronforge = new Vector3(4.8, 28.1, -4.3);

    static Vector3 positionWaitTramStormwind = new Vector3(15.3, 2510.4, -4.3);
    static Vector3 positionOnTramStormwind = new Vector3(4.3, 2510.6, -4.3);

    static Vector3 enterStormwindInside = new Vector3(67, 2490.7, -4.3);
    static Vector3 enterIronforgeInside = new Vector3(64.5, 10.2, -4.3);

    static Vector3 enterStormwindOutside = new Vector3(-8365, 536.9, 91.8);
    static Vector3 enterIronforgeOutside = new Vector3(-4836.7, -1304.6, 501.9);

    static Vector3 leavePosIronforge = new Vector3(-10.6, 30.2, -4.3);
    static Vector3 leavePosStormwind = new Vector3(-10.6, 2510.9, -4.3);

    static Vector3 playerFellDownIronforge = new Vector3(4.5, 28, -13.9);

    static int[] tramEntryArray = new int[6] { 176080, 176082, 176083, 176084, 176085, 176081 };

    //Ironforge to Stormwind
    static Vector3 waitPosPlayerInStormwindToIronforge = new Vector3(-32.8, 2512.1, -4.3);

    //Pos where upper Tram arrives and waits in Stormwind
    static Vector3 waitPosTramSwTramStormwind = new Vector3(-45.4007, 2512.15, 6.90526);
    //Pos where player waits on upper tram in Stormwind
    static Vector3 waitPosPlayerSwTramStormwind = new Vector3(-45.20206, 2512.266, -3.562748);

    static Vector3 waitPosSwTramIronforge = new Vector3(-45.399, 30.38013, 5.877773);

    static Vector3 leavePosSwTramIronforge = new Vector3(-61.8, 30.3, -4.3);
    static Vector3 waitPlayerOnTramPosSwTramIronforge = new Vector3(-34.49804, 2511.917, -4.3);
    static Vector3 posPlayerOnTramSwToIfInIronforge = new Vector3(-20.9837, 2459.93, -4.297);

    static Vector3 playerFellDownStormwind = new Vector3(-45, 2512.6, -13.9);

    static bool isRestarted = false;
    static Process[] pname = Process.GetProcessesByName(AppDomain.CurrentDomain.FriendlyName.Remove(AppDomain.CurrentDomain.FriendlyName.Length - 4));
    static Vector3 nullVector = new Vector3(0, 0, 0);


    public static void restartTram(String from)
    {
        switch(from)
        {
            case ("Stormwind"):
                takeTramStormwind();
                break;
            case ("Ironforge"):
                takeTramIronforge();
                break;
            default:
                Logging.Write("Something failed");
                break;
        }
    }

    public static void end()
    {
        Logging.Write("[FNV_Quester]: Ending Tream");
    }



    public static void takeTramStormwind()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Stormwind to Ironforge");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterStormwindOutside))
            {
                GoToTask.ToPosition(enterStormwindOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-8353.4, 521.4, 91.8));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }

        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterStormwindInside))
            {
                GoToTask.ToPosition(enterStormwindInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge))
            {
                GoToTask.ToPosition(waitPosPlayerInStormwindToIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramStormwind();
            }
            catch
            {

            }


            if(tram != null &amp;&amp; ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                takeTramStormwind();
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {
                    while(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &gt;= 5 || ObjectManager.Me.Position.DistanceTo(waitPosPlayerInStormwindToIronforge) &gt;= 5)
                    {
                        Thread.Sleep(500);
                    }

                    if(tram.Position.DistanceTo(waitPosTramSwTramStormwind) &lt; 5)
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);

                        while(ObjectManager.Me.Position.DistanceTo(waitPosPlayerSwTramStormwind) &gt; 1)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(waitPosPlayerSwTramStormwind);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownStormwind) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart...");
                                restartTram("Stormwind");
                            }
                        }

                        GoToTask.ToPosition(waitPosPlayerSwTramStormwind);
                    }

                    while(tram.Position.DistanceTo(waitPosSwTramIronforge) &gt; 5)
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.HaveBuff("Stealth"))
                    {
                        Lua.LuaDoString("CastSpellByName('Stealth')");
                    }

                    wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 1500);

                    if(ObjectManager.Me.Position.DistanceTo(posPlayerOnTramSwToIfInIronforge) &lt; 5)
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 500);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosSwTramIronforge) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));
                        }
                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterIronforgeInside))
                        {
                            GoToTask.ToPosition(enterIronforgeInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("[FNV_Quester]: Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterIronforgeOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterIronforgeOutside);
                        GoToTask.ToPosition(enterIronforgeOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Stormwind"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Stormwind");
                }

            }
        }

        isRestarted = false;
    }

    public static WoWGameObject chooseTramIronforge()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 0;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &gt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Ironforge");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }
        return null;
    }

    public static WoWGameObject chooseTramStormwind()
    {
        List&lt;WoWGameObject&gt; tramList = new List&lt;WoWGameObject&gt;();
        var tramTemp = (WoWGameObject)null;

        foreach(int ele in tramEntryArray)
        {
            tramTemp = null;
            try
            {
                tramTemp = ObjectManager.GetWoWGameObjectByEntry(ele).OrderBy(o =&gt; o.GetDistance).FirstOrDefault();
            }
            catch
            {
            }

            if(tramTemp != null &amp;&amp; tramTemp.IsValid &amp;&amp; !tramTemp.Equals((WoWGameObject)null) &amp;&amp; tramTemp.ToString().Contains("Subway"))
            {
                tramList.Add(tramTemp);
            }
            else
            {

            }
        }

        float distance = 99999;
        float entryDistance = 0;
        foreach(var ele in tramList)
        {
            if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt;= distance)
            {
                distance = ObjectManager.Me.Position.DistanceTo(ele.Position);
                entryDistance = ele.Entry;
            }
        }

        foreach(var ele in tramList)
        {
            if(ele.Entry == entryDistance &amp;&amp; ele != null &amp;&amp; !ele.Position.Equals(nullVector))
            {
                if(ObjectManager.Me.Position.DistanceTo(ele.Position) &lt; 200)
                {
                    Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                    restartTram("Stormwind");
                }

                Logging.Write("[FNV_Quester]: Choosing tram id: " + ele.Entry + " with a current position of " + ele.Position);
                return ele;
            }
        }

        return null;
    }


    public static void takeTramIronforge()
    {
        Logging.Write("[FNV_Quester]: Taking Tram from Ironforge to Stormwind");

        if(!Usefuls.MapZoneName.Contains("Deep"))
        {
            while(!GoToTask.ToPosition(enterIronforgeOutside))
            {
                GoToTask.ToPosition(enterIronforgeOutside);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;
            Logging.Write("[FNV_Quester]: Disable teleport during Tram");
            wManager.Wow.Helpers.MovementManager.Face(new Vector3(-4839.4, -1320.9, 501.9));

            while(!Usefuls.MapZoneName.Contains("Deep"))
            {
                wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
            }
        }

        if(Usefuls.MapZoneName.Contains("Deep"))
        {
            if(!GoToTask.ToPosition(enterIronforgeInside))
            {
                GoToTask.ToPosition(enterIronforgeInside);
                Thread.Sleep(250);
            }
            while(!GoToTask.ToPosition(positionWaitTramIronforge))
            {
                GoToTask.ToPosition(positionWaitTramIronforge);
                Thread.Sleep(250);
            }

            wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;

            var tram = (WoWGameObject)null;

            try
            {
                tram = chooseTramIronforge();
            }
            catch
            {

            }

            if(ObjectManager.Me.Position.DistanceTo(tram.Position) &lt; 200 &amp;&amp; tram != null &amp;&amp; !tram.Position.Equals(nullVector))
            {
                Logging.Write("[FNV_Quester]: Bad circle, restart... .");
                isRestarted = true;
                restartTram("Ironforge");
                end();
            }

            if(!isRestarted)
            {

                if(tram != null &amp;&amp; tram.Position.DistanceTo(nullVector) &gt; 1)
                {


                    while(tram.Position.DistanceTo(positionTramInIronforge) &gt;= 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep") &amp;&amp; !tram.Position.Equals(nullVector))
                    {
                        Thread.Sleep(1000);
                    }


                    if(tram.Position.DistanceTo(positionTramInIronforge) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Lua.LuaDoString("ClearTarget()");
                        wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);

                        while(ObjectManager.Me.Position.DistanceTo(positionOnTramIronforge) &gt; 2)
                        {
                            wManager.Wow.Helpers.MovementManager.Face(positionOnTramIronforge);
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                            if(ObjectManager.Me.Position.DistanceTo(playerFellDownIronforge) &lt; 4)
                            {
                                Logging.Write("[FNV_Quester]: Fell down, while trying to take tram. Restart");
                                restartTram("Ironforge");
                            }
                        }

                        GoToTask.ToPosition(positionOnTramIronforge);
                    }


                    while(tram.Position.DistanceTo(positionTramInStormwind) &gt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {
                        Thread.Sleep(3000);
                    }

                    if(ObjectManager.Me.Position.DistanceTo(positionOnTramStormwind) &lt; 5 &amp;&amp; Usefuls.MapZoneName.Contains("Deep"))
                    {

                        wManager.Wow.Helpers.Move.StrafeLeft(Move.MoveAction.PressKey, 350);

                        while(ObjectManager.Me.Position.DistanceTo(leavePosStormwind) &gt; 4)
                        {
                            wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 125);
                            Thread.Sleep(robotManager.Helpful.Others.Random(10, 25));

                        }

                    }

                    if(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        if(!GoToTask.ToPosition(enterStormwindInside))
                        {
                            GoToTask.ToPosition(enterStormwindInside);
                            Thread.Sleep(250);
                        }
                    }

                    while(Usefuls.MapZoneName.Contains("Deep"))
                    {
                        wManager.Wow.Helpers.Move.Forward(Move.MoveAction.PressKey, 250);
                        Thread.Sleep(robotManager.Helpful.Others.Random(25, 50));
                    }

                    Logging.Write("Re enable teleport ");
                    wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = true;


                    while(!GoToTask.ToPosition(enterStormwindOutside))
                    {
                        wManager.Wow.Helpers.MovementManager.Face(enterStormwindOutside);
                        GoToTask.ToPosition(enterStormwindOutside);
                        Thread.Sleep(250);
                    }

                }
                else if(Usefuls.MapZoneName.Contains("Tram") || Usefuls.MapZoneName.Contains("Ironforge"))
                {
                    Logging.Write("[FNV_Quester]: Unable to find tram, restart... .");
                    isRestarted = true;
                    restartTram("Ironforge");
                }

            }
        }
        isRestarted = false;
    }
}

    //Additional functions for quests
    public class Quests
    {
        public static void abandon(string questName)
        {
            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + questName + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");

        }

        public static bool hasFailed(string questName)
        {
            int temp = 0;
            temp = wManager.Wow.Helpers.Lua.LuaDoString&lt;int&gt;("local name = '" + questName + "'  for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) local questTimer = GetQuestLogTimeLeft() return questTimer end end");

            if(temp &gt; 8)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }


public class ProgressSettings : Settings
{
    public static bool inProgress = false;
        public static void Initialize()
        {
            ProgressSettings.Load();
        }

        public static void Dispose()
        {
            ProgressSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            ProgressSettings.Load();
            ProgressSettings.CurrentSettings.ToForm();
            ProgressSettings.CurrentSettings.Save();
        }

    public ProgressSettings()
    {
        this.launcher = 2;
        this.dwarfStart = 1;
        this.humanStart = 1;
        this.nightelfStart = 1;
        this.dwarfHunter = 1;
        this.nightelfHunter = 1;
        this.nightelfDruid = 1;
        this.warlock = 1;
        this.kharanos = 1;
        this.elwynn = 1;
        this.westfallEins = 1;
        this.lochModanEins = 1;
        this.darkshoreEins = 10;
        this.westfallZwei = 1;
        this.lochModanZwei = 1;
        this.darkshoreZwei = 6;
        this.westfallDrei = 1;
        this.redridge = 1;
        this.duskwoodEins = 1;
        this.stonetalon = 1;
        this.duskwoodZwei = 1;
        this.wetlandsEins = 1;
        this.wetlandsZwei = 1;
    }
    

      public static ProgressSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;ProgressSettings&gt;(AdviserFilePathAndName("FNV_Progress", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                ProgressSettings.CurrentSettings = new ProgressSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Progress =&gt; Load(): " + e);
            }
            return false;
        }

        public int launcher { get; set; }
        public int dwarfStart { get; set; }
        public int dwarfHunter { get; set; }
        public int nightelfHunter { get; set; }
        public int nightelfDruid { get; set; }
        public int warlock { get; set; }
        public int nightelfStart { get; set; }
        public int humanStart { get; set; }
        public int kharanos { get; set; }
        public int elwynn { get; set; }
        public int westfallEins { get; set; }
        public int lochModanEins { get; set; }
        public int darkshoreEins { get; set; }
        public int westfallZwei { get; set; }
        public int lochModanZwei { get; set; }
        public int darkshoreZwei { get; set; }
        public int westfallDrei { get; set; }
        public int redridge { get; set; }
        public int duskwoodEins { get; set; }
        public int stonetalon { get; set; }
        public int duskwoodZwei { get; set; }
        public int wetlandsEins { get; set; }
        public int wetlandsZwei { get; set; }
        public int duskwoodDrei { get; set; }
        public int hinterlandsZwei { get; set; }
}


/*
    //Settings   
    public class QuesterSettings
    {
        private static bool isLaunched;

        public static void Initialize()
        {
            isLaunched = true;
            FNVSettings.Load();

            while(isLaunched &amp; Products.IsStarted)
            {
                Thread.Sleep(500);
                Dispose();
            }
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }
    }

    */

    [Serializable]
    public class FNVSettings : Settings
    {

        public static bool inProgress = false;
        public static void Initialize()
        {
            FNVSettings.Load();
        }

        public static void Dispose()
        {
            FNVSettings.CurrentSettings.Save();
            //isLaunched = false;
        }

        public void Settings()
        {
            FNVSettings.Load();
            FNVSettings.CurrentSettings.ToForm();
            FNVSettings.CurrentSettings.Save();
        }

        public FNVSettings()
        {
        //Completed profiles -&gt; True == completed
        this.launcher = false;
        this.dwarfStart = false;
        this.humanStart = false;
        this.nightelfStart = false;
        this.dwarfHunter = false;
        this.nightelfHunter = false;
        this.nightelfDruid = false;
        this.warlock = false;
        this.kharanos = false;
        this.elwynn = false;
        this.westfallEins = false;
        this.lochModanEins = false;
        this.darkshoreEins = false;
        this.westfallZwei = false;
        this.lochModanZwei = false;
        this.darkshoreZwei = false;
        this.westfallDrei = false;
        this.redridge = false;
        this.duskwoodEins = false;
        this.stonetalon = false;
        this.duskwoodZwei = false;
        this.wetlandsEins = false;
        this.wetlandsZwei = false;

            //FlightMaster discovered
            //Eastern Kingdoms
            this.ArathiHighlands = false;
            this.Wetlands = false;
            this.WesternPlaguelands = false;
            this.EasternPlaguelands = false;
            this.HillsbradFoothills = false;
            this.TheHinterlands = false;
            this.LochModan = false;
            this.Ironforge = false;
            this.SearingGorge = false;
            this.BurningSteppes = false;
            this.RedridgeMountains = false;
            this.Stormwind = false;
            this.Westfall = false;
            this.Duskwood = false;
            this.StranglethornValley = false;
            this.BlastedLands = false;

            //Kalimdor

        }

    public static void flightMasterSaveChanges(FlightMasterDB needToChange)
    {

            if(needToChange.name.Contains("Arathi"))
                CurrentSettings.ArathiHighlands = true;

            if(needToChange.name.Contains("Wetlands"))
                CurrentSettings.Wetlands = true;

            if(needToChange.name.Contains("Western"))
                CurrentSettings.WesternPlaguelands = true;

            if(needToChange.name.Contains("Eastern"))
                CurrentSettings.EasternPlaguelands = true;

            if(needToChange.name.Contains("Hillsbrad"))
                CurrentSettings.HillsbradFoothills = true;

            if(needToChange.name.Contains("Hinterlands"))
                CurrentSettings.TheHinterlands = true;

            if(needToChange.name.Contains("Modan"))
                CurrentSettings.LochModan = true;

            if(needToChange.name.Contains("Ironforge"))
                CurrentSettings.Ironforge = true;
            
            if(needToChange.name.Contains("Searing"))
                CurrentSettings.SearingGorge = true;

            if(needToChange.name.Contains("Burning"))
                CurrentSettings.BurningSteppes = true;

            if(needToChange.name.Contains("Redridge"))
                CurrentSettings.RedridgeMountains = true;

            if(needToChange.name.Contains("Stormwind"))
                CurrentSettings.Stormwind = true;

            if(needToChange.name.Contains("Westfall"))
                CurrentSettings.Westfall = true;

            if(needToChange.name.Contains("Duskwood"))
                CurrentSettings.Duskwood = true;

            if(needToChange.name.Contains("Stranglethorn"))
                CurrentSettings.StranglethornValley = true;

            if(needToChange.name.Contains("Blasted"))
                CurrentSettings.BlastedLands = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange.name);
            return;
    }

        public static void flightMasterSaveChanges(String needToChange)
    {

            if(needToChange.Contains("Arathi"))
                CurrentSettings.ArathiHighlands = true;

            if(needToChange.Contains("Wetlands"))
                CurrentSettings.Wetlands = true;

            if(needToChange.Contains("Western"))
                CurrentSettings.WesternPlaguelands = true;

            if(needToChange.Contains("Eastern"))
                CurrentSettings.EasternPlaguelands = true;

            if(needToChange.Contains("Hillsbrad"))
                CurrentSettings.HillsbradFoothills = true;

            if(needToChange.Contains("Hinterlands"))
                CurrentSettings.TheHinterlands = true;

            if(needToChange.Contains("Modan"))
                CurrentSettings.LochModan = true;

            if(needToChange.Contains("Ironforge"))
                CurrentSettings.Ironforge = true;
            
            if(needToChange.Contains("Searing"))
                CurrentSettings.SearingGorge = true;

            if(needToChange.Contains("Burning"))
                CurrentSettings.BurningSteppes = true;

            if(needToChange.Contains("Redridge"))
                CurrentSettings.RedridgeMountains = true;

            if(needToChange.Contains("Stormwind"))
                CurrentSettings.Stormwind = true;

            if(needToChange.Contains("Westfall"))
                CurrentSettings.Westfall = true;

            if(needToChange.Contains("Duskwood"))
                CurrentSettings.Duskwood = true;

            if(needToChange.Contains("Stranglethorn"))
                CurrentSettings.StranglethornValley = true;

            if(needToChange.Contains("Blasted"))
                CurrentSettings.BlastedLands = true;
            
            FNVSettings.CurrentSettings.Save();
            Logging.Write("[FNV_Quester]: Settings saved of Flight Master " + needToChange);
            return;
    }

        public static FNVSettings CurrentSettings { get; set; }

        public bool Save()
        {
            try
            {
                return Save(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Save(): " + e);
                return false;
            }
        }

        public static bool Load()
        {
            try
            {
                if(File.Exists(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName)))
                {
                    CurrentSettings = Load&lt;FNVSettings&gt;(AdviserFilePathAndName("FNV_Quester", ObjectManager.Me.Name + "." + Usefuls.RealmName));
                    return true;
                }

                FNVSettings.CurrentSettings = new FNVSettings();
            }
            catch(Exception e)
            {
                Logging.WriteDebug("FNV_Quester =&gt; Load(): " + e);
            }
            return false;
        }

        //Finished profiles -&gt; True == completed
        public bool launcher { get; set; }
        public bool dwarfStart { get; set; }
        public bool dwarfHunter { get; set; }
        public bool nightelfHunter { get; set; }
        public bool nightelfDruid { get; set; }
        public bool warlock { get; set; }
        public bool nightelfStart { get; set; }
        public bool humanStart { get; set; }
        public bool kharanos { get; set; }
        public bool elwynn { get; set; }
        public bool westfallEins { get; set; }
        public bool lochModanEins { get; set; }
        public bool darkshoreEins { get; set; }
        public bool westfallZwei { get; set; }
        public bool lochModanZwei { get; set; }
        public bool darkshoreZwei { get; set; }
        public bool westfallDrei { get; set; }
        public bool redridge { get; set; }
        public bool duskwoodEins { get; set; }
        public bool stonetalon { get; set; }
        public bool duskwoodZwei { get; set; }
        public bool wetlandsEins { get; set; }
        public bool wetlandsZwei { get; set; }
        public bool duskwoodDrei { get; set; }
        public bool hinterlandsZwei { get; set; }

        public bool defaultSettings { get; set; }
       // public bool dwarfStart { get; set; }
       // public bool nightelfStart { get; set; }
        //public bool humanStart { get; set; }
      //  public bool westfallEins { get; set; }
        public bool lochModan { get; set; }
        public bool auberdine { get; set; }
       // public bool westfallZwei { get; set; }
        public bool lakeshire { get; set; }
        public bool wetlands { get; set; }
        public bool ashenvale { get; set; }
        public bool thousandNeedles { get; set; }
        public bool dustwallow { get; set; }
        public bool badlands { get; set; }
        public bool alterac { get; set; }
        public bool swampOfSorrows { get; set; }
        public bool tanaris { get; set; }
        public bool stranglethorn { get; set; }
        public bool hinterlandsEins { get; set; }
        public bool feralas { get; set; }
       // public bool hinterlandsZwei { get; set; }

        //FlightMaster
        //Eastern Kingdoms
        public bool Stormwind { get; set; }
        public bool Westfall { get; set; }
        public bool RedridgeMountains { get; set; }
        public bool Duskwood { get; set; }
        public bool StranglethornValley { get; set; }
        public bool Ironforge { get; set; }
        public bool BurningSteppes { get; set; }
        public bool BlastedLands { get; set; }
        public bool SearingGorge { get; set; }
        public bool LochModan { get; set; }
        public bool Wetlands { get; set; }
        public bool ArathiHighlands { get; set; }
        public bool HillsbradFoothills { get; set; }
        public bool WesternPlaguelands { get; set; }
        public bool EasternPlaguelands { get; set; }
        public bool TheHinterlands { get; set; }

        //Kalimdor

        public bool Ashenvale { get; set; }
        public bool Azshara { get; set; }
        public bool Darkshore { get; set; }
        public bool Teldrassil { get; set; }
        public bool Desolace { get; set; }
        public bool DustwallowMarsh { get; set; }
        public bool Felwood { get; set; }
        public bool FeralasFeathermoon { get; set; }
        public bool FeralasThalanaar { get; set; }
        public bool Moonglade { get; set; }
        public bool Silithus { get; set; }
        public bool StonetalonMountains { get; set; }
        public bool Tanaris { get; set; }
        public bool TheBarrens { get; set; }
        public bool UngoroCrater { get; set; }
        public bool Winterspring { get; set; }

    }

    //Buy and check bags
    public class bags
    {
        public static bool bagsStarted = false;

        public static int bagsEquipped()
        {
            int returnValue = 0;
            string empty = "";

            for(int i = 20; i &lt;= 23; i++)
            {
                empty = wManager.Wow.Helpers.Lua.LuaDoString&lt;string&gt;("return GetInventoryItemLink('player', " + i + ")");

                if(empty.Contains("o"))
                    returnValue++;
            }

            return returnValue;
        }

        public static string checkMoney()
        {
            string returnVariableNameZ = "";

            returnVariableNameZ = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableNameZ = GetMoney() return returnVariableNameZ", returnVariableNameZ);

            return returnVariableNameZ;
        }

        public static bool canEquip()
        {
            string returnVariableName = "";

            returnVariableName = wManager.Wow.Helpers.Lua.LuaDoString("returnVariableName = GetInventoryItemLink('player', 23 ) return returnVariableName", returnVariableName);


            if(returnVariableName.Equals(""))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

    }


    //Abandon Quests
    public class abandonQuest
    {

        public static void abandon(string questName)
        {

            string name = questName;

            wManager.Wow.Helpers.Lua.LuaDoString("local name = '" + name + "' for i=1,GetNumQuestLogEntries() do local questTitle, level, questTag, suggestedGroup, isHeader, isCollapsed, isComplete = GetQuestLogTitle(i) if string.find(questTitle, name) then SelectQuestLogEntry(i) SetAbandonQuest() AbandonQuest() end end");


        }

    }



    //Throw away items - by Reapler
    public class throwAway
    {
        public static int GetItemQuantity(string itemName)
        {
            var execute =
                "local itemCount = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "if string.find(itemLink, \"" + itemName + "\") then " +
                                    "itemCount = itemCount + stackCount; " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; " +
                "return itemCount; ";
            return Lua.LuaDoString&lt;int&gt;(execute);
        }

        /// &lt;summary&gt;
        /// Used to delete all items by name.
        /// &lt;/summary&gt;
        /// &lt;param name="itemName"&gt;The item to delete.&lt;/param&gt;
        /// &lt;param name="leaveAmount"&gt;The amount of items which remain in the bag.&lt;/param&gt;
        /// &lt;remarks&gt;Bug at links with "-"&lt;/remarks&gt;
        public static void DeleteItems(string itemName, int leaveAmount)
        {
            var itemQuantity = GetItemQuantity(itemName) - leaveAmount;
            if(string.IsNullOrWhiteSpace(itemName) || itemQuantity &lt;= 0)
                return;
            var execute =
                "local itemCount = " + itemQuantity + "; " +
                "local deleted = 0; " +
                "for b=0,4 do " +
                    "if GetBagName(b) then " +
                        "for s=1, GetContainerNumSlots(b) do " +
                            "local itemLink = GetContainerItemLink(b, s) " +
                            "if itemLink then " +
                                "local _, stackCount = GetContainerItemInfo(b, s)\t " +
                                "local leftItems = itemCount - deleted; " +
                                "if string.find(itemLink, \"" + itemName + "\") and leftItems &gt; 0 then " +
                                    "if stackCount &lt;= 1 then " +
                                        "PickupContainerItem(b, s); " +
                                        "DeleteCursorItem(); " +
                                        "deleted = deleted + 1; " +
                                    "else " +
                                        "if (leftItems &gt; stackCount) then " +
                                            "SplitContainerItem(b, s, stackCount); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + stackCount; " +
                                        "else " +
                                            "SplitContainerItem(b, s, leftItems); " +
                                            "DeleteCursorItem(); " +
                                            "deleted = deleted + leftItems; " +
                                        "end " +
                                    "end " +
                                "end " +
                            "end " +
                        "end " +
                    "end " +
                "end; ";
            Lua.LuaDoString(execute);
        }
    }



   


</Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8957.683" Y="1004.692" Z="122.0265" />
        <Vector3 X="-8967.293" Y="1016.335" Z="122.0265" />
        <Vector3 X="-8973.37" Y="1020.759" Z="119.1012" />
        <Vector3 X="-8978.363" Y="1018.07" Z="116.4328" />
        <Vector3 X="-8979.109" Y="1012.432" Z="113.8567" />
        <Vector3 X="-8975.169" Y="1007.896" Z="111.1072" />
        <Vector3 X="-8970.062" Y="1008.445" Z="108.7689" />
        <Vector3 X="-8966.444" Y="1013.253" Z="105.9654" />
        <Vector3 X="-8968.491" Y="1018.209" Z="103.9067" />
        <Vector3 X="-8973.277" Y="1024.041" Z="101.4039" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>The Slaughtered Lamb - In</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8969.315" Y="1018.897" Z="121.2861" />
        <Vector3 X="-8974.44" Y="1020.426" Z="118.5417" />
        <Vector3 X="-8978.599" Y="1017.055" Z="116.0324" />
        <Vector3 X="-8978.109" Y="1011.508" Z="113.207" />
        <Vector3 X="-8973.71" Y="1008.262" Z="110.5447" />
        <Vector3 X="-8968.604" Y="1009.877" Z="107.7893" />
        <Vector3 X="-8966.573" Y="1014.367" Z="105.403" />
        <Vector3 X="-8973.303" Y="1024.08" Z="101.4039" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>The Slaughtered Lamb In 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8973.59" Y="1025.433" Z="101.4037" />
        <Vector3 X="-8968.863" Y="1019.013" Z="103.7789" />
        <Vector3 X="-8966.607" Y="1012.376" Z="106.3093" />
        <Vector3 X="-8970.407" Y="1007.876" Z="109.0604" />
        <Vector3 X="-8976.998" Y="1008.842" Z="112.0512" />
        <Vector3 X="-8979.708" Y="1013.703" Z="114.4844" />
        <Vector3 X="-8977.19" Y="1019.63" Z="117.3163" />
        <Vector3 X="-8971.495" Y="1020.704" Z="119.9418" />
        <Vector3 X="-8968.558" Y="1017.345" Z="122.0258" />
        <Vector3 X="-8958.168" Y="1005.363" Z="122.0258" />
        <Vector3 X="-8940.229" Y="985.326" Z="121.6879" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>The Slaughtered Lamb Out</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8986.297" Y="1040.328" Z="101.4038" />
        <Vector3 X="-8990.868" Y="1045.476" Z="103.8652" />
        <Vector3 X="-8996.477" Y="1049.046" Z="100.7113" />
        <Vector3 X="-9001.388" Y="1045.396" Z="97.92582" />
        <Vector3 X="-9001.752" Y="1040.708" Z="95.78621" />
        <Vector3 X="-8996.533" Y="1035.901" Z="92.54859" />
        <Vector3 X="-8989.736" Y="1038.878" Z="89.06883" />
        <Vector3 X="-8989.014" Y="1044.409" Z="86.54202" />
        <Vector3 X="-8992.181" Y="1048.024" Z="86.09998" />
        <Vector3 X="-9002.504" Y="1060.92" Z="76.48676" />
        <Vector3 X="-8992.631" Y="1068.344" Z="70.79364" />
        <Vector3 X="-8985.023" Y="1061.703" Z="70.78962" />
        <Vector3 X="-8981.149" Y="1056.001" Z="70.78962" />
        <Vector3 X="-8986.069" Y="1052.178" Z="70.79058" />
        <Vector3 X="-9000.269" Y="1040.52" Z="62.13055" />
        <Vector3 X="-8990.389" Y="1027.835" Z="62.17414" />
        <Vector3 X="-8976.863" Y="1039.277" Z="53.5485" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>The Slaughtered Lamb - Down Quest</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8978.176" Y="1038.295" Z="53.5485" />
        <Vector3 X="-8985.152" Y="1032.775" Z="58.51603" />
        <Vector3 X="-8991.953" Y="1027.277" Z="62.17453" />
        <Vector3 X="-9001.702" Y="1039.766" Z="61.40361" />
        <Vector3 X="-8992.013" Y="1047.359" Z="66.91096" />
        <Vector3 X="-8979.603" Y="1056.873" Z="70.7892" />
        <Vector3 X="-8990.378" Y="1070.723" Z="70.79048" />
        <Vector3 X="-8998.105" Y="1064.286" Z="74.96921" />
        <Vector3 X="-9003.315" Y="1059.943" Z="76.48633" />
        <Vector3 X="-8996.66" Y="1052.598" Z="81.27494" />
        <Vector3 X="-8992.41" Y="1047.46" Z="86.10023" />
        <Vector3 X="-8989.158" Y="1040.819" Z="88.16418" />
        <Vector3 X="-8992.116" Y="1036.482" Z="90.56369" />
        <Vector3 X="-8999.108" Y="1036.565" Z="93.65583" />
        <Vector3 X="-9002.022" Y="1042.783" Z="96.68973" />
        <Vector3 X="-8999.526" Y="1047.89" Z="99.32311" />
        <Vector3 X="-8994.543" Y="1048.977" Z="101.6502" />
        <Vector3 X="-8990.801" Y="1047.458" Z="103.4529" />
        <Vector3 X="-8985.012" Y="1039.502" Z="101.4045" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>The Slaughtered Lamb - Up Quest</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8893.148" Y="-163.0426" Z="113.1583" />
        <Vector3 X="-8892.265" Y="-171.9892" Z="113.1591" />
        <Vector3 X="-8889.462" Y="-174.0852" Z="113.1592" />
        <Vector3 X="-8884.914" Y="-175.9768" Z="113.1594" />
        <Vector3 X="-8888.439" Y="-181.6248" Z="111.1366" />
        <Vector3 X="-8893.135" Y="-185.3882" Z="105.5513" />
        <Vector3 X="-8899.13" Y="-186.1712" Z="100.1997" />
        <Vector3 X="-8903.479" Y="-184.7037" Z="97.68324" />
        <Vector3 X="-8908.808" Y="-179.6983" Z="97.68494" />
        <Vector3 X="-8909.976" Y="-170.163" Z="97.68513" />
        <Vector3 X="-8906.29" Y="-162.5972" Z="97.68522" />
        <Vector3 X="-8898.437" Y="-160.2428" Z="97.68525" />
        <Vector3 X="-8891.347" Y="-161.9642" Z="97.68525" />
        <Vector3 X="-8885.561" Y="-168.1862" Z="97.68527" />
        <Vector3 X="-8885.454" Y="-175.5123" Z="97.6853" />
        <Vector3 X="-8889.51" Y="-182.6455" Z="93.73409" />
        <Vector3 X="-8896.135" Y="-185.8281" Z="87.18626" />
        <Vector3 X="-8902.601" Y="-184.9048" Z="81.93923" />
        <Vector3 X="-8906.755" Y="-182.2787" Z="81.93923" />
        <Vector3 X="-8910.085" Y="-172.354" Z="81.93923" />
        <Vector3 X="-8904.236" Y="-157.6395" Z="81.93923" />
        <Vector3 X="-8910.845" Y="-142.9866" Z="82.20507" />
        <Vector3 X="-8915.723" Y="-131.9868" Z="80.7546" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>Northshire Abbey - Down</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8908.716" Y="-168.5591" Z="113.154" />
        <Vector3 X="-8901.346" Y="-172.3789" Z="113.1554" />
        <Vector3 X="-8899.036" Y="-167.0664" Z="113.1554" />
        <Vector3 X="-8896.771" Y="-166.2991" Z="113.1558" />
        <Vector3 X="-8892.457" Y="-170.308" Z="113.1565" />
        <Vector3 X="-8885.373" Y="-176.7192" Z="113.1596" />
        <Vector3 X="-8884.914" Y="-175.9768" Z="113.1594" />
        <Vector3 X="-8888.439" Y="-181.6248" Z="111.1366" />
        <Vector3 X="-8893.135" Y="-185.3882" Z="105.5513" />
        <Vector3 X="-8899.13" Y="-186.1712" Z="100.1997" />
        <Vector3 X="-8903.479" Y="-184.7037" Z="97.68324" />
        <Vector3 X="-8908.808" Y="-179.6983" Z="97.68494" />
        <Vector3 X="-8909.976" Y="-170.163" Z="97.68513" />
        <Vector3 X="-8906.29" Y="-162.5972" Z="97.68522" />
        <Vector3 X="-8898.437" Y="-160.2428" Z="97.68525" />
        <Vector3 X="-8891.347" Y="-161.9642" Z="97.68525" />
        <Vector3 X="-8885.561" Y="-168.1862" Z="97.68527" />
        <Vector3 X="-8885.454" Y="-175.5123" Z="97.6853" />
        <Vector3 X="-8889.51" Y="-182.6455" Z="93.73409" />
        <Vector3 X="-8896.135" Y="-185.8281" Z="87.18626" />
        <Vector3 X="-8902.601" Y="-184.9048" Z="81.93923" />
        <Vector3 X="-8906.755" Y="-182.2787" Z="81.93923" />
        <Vector3 X="-8910.085" Y="-172.354" Z="81.93923" />
        <Vector3 X="-8904.236" Y="-157.6395" Z="81.93923" />
        <Vector3 X="-8910.845" Y="-142.9866" Z="82.20507" />
        <Vector3 X="-8915.723" Y="-131.9868" Z="80.7546" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>Northshire Abbey - Down 2</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-8899.185" Y="-182.0629" Z="113.1561" />
        <Vector3 X="-8900.471" Y="-179.5734" Z="113.1581" />
        <Vector3 X="-8895.796" Y="-179.3951" Z="113.1581" />
        <Vector3 X="-8889.05" Y="-173.1562" Z="113.1582" />
        <Vector3 X="-8884.51" Y="-175.0545" Z="113.1592" />
        <Vector3 X="-8885.592" Y="-176.9586" Z="113.1592" />
        <Vector3 X="-8884.914" Y="-175.9768" Z="113.1594" />
        <Vector3 X="-8888.439" Y="-181.6248" Z="111.1366" />
        <Vector3 X="-8893.135" Y="-185.3882" Z="105.5513" />
        <Vector3 X="-8899.13" Y="-186.1712" Z="100.1997" />
        <Vector3 X="-8903.479" Y="-184.7037" Z="97.68324" />
        <Vector3 X="-8908.808" Y="-179.6983" Z="97.68494" />
        <Vector3 X="-8909.976" Y="-170.163" Z="97.68513" />
        <Vector3 X="-8906.29" Y="-162.5972" Z="97.68522" />
        <Vector3 X="-8898.437" Y="-160.2428" Z="97.68525" />
        <Vector3 X="-8891.347" Y="-161.9642" Z="97.68525" />
        <Vector3 X="-8885.561" Y="-168.1862" Z="97.68527" />
        <Vector3 X="-8885.454" Y="-175.5123" Z="97.6853" />
        <Vector3 X="-8889.51" Y="-182.6455" Z="93.73409" />
        <Vector3 X="-8896.135" Y="-185.8281" Z="87.18626" />
        <Vector3 X="-8902.601" Y="-184.9048" Z="81.93923" />
        <Vector3 X="-8906.755" Y="-182.2787" Z="81.93923" />
        <Vector3 X="-8910.085" Y="-172.354" Z="81.93923" />
        <Vector3 X="-8904.236" Y="-157.6395" Z="81.93923" />
        <Vector3 X="-8910.845" Y="-142.9866" Z="82.20507" />
        <Vector3 X="-8915.723" Y="-131.9868" Z="80.7546" />
      </Path>
      <ContinentId>0</ContinentId>
      <Name>Northshire Abbey - Down 3</Name>
    </OffMeshConnection>
  </OffMeshConnections>
</EasyQuestProfile>