<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <QuestsSorted>
    <QuestsSorted Action="WriteLog" NameClass="--- Start Demon Hunter - Havoc - Twinblades of the Deceiver ---" />
    <QuestsSorted Action="RunCode" NameClass="/* HOOK NPC LIST */  LegionQuests.ClearKaynIfAltriusChoosed();" />
    <QuestsSorted Action="None" NameClass="--- SECOND ARTIFACT ---" />
    <QuestsSorted Action="PulseAllInOne" NameClass="InPursuitofPower" />
    <QuestsSorted Action="Pulse" NameClass="MakingArrangementsOrderHallPickUp" />
    <QuestsSorted Action="None" NameClass="--- MAIN QUEST ---&#xD;&#xA;" />
    <QuestsSorted Action="PulseAllInOne" NameClass="MakingArrangements" />
    <QuestsSorted Action="PickUp" NameClass="ByAnyMeans" />
    <QuestsSorted Action="Pulse" NameClass="ByAnyMeans" />
    <QuestsSorted Action="Pulse" NameClass="ByAnyMeans2" />
    <QuestsSorted Action="TurnIn" NameClass="ByAnyMeans" />
    <QuestsSorted Action="PickUp" NameClass="TheHunt" />
    <QuestsSorted Action="Pulse" NameClass="TheHunt" />
    <QuestsSorted Action="Pulse" NameClass="TheHunt3" />
    <QuestsSorted Action="Pulse" NameClass="TheHunt3a" />
    <QuestsSorted Action="Pulse" NameClass="TheHunt4" />
    <QuestsSorted Action="Pulse" NameClass="TheHunt5" />
    <QuestsSorted Action="Pulse" NameClass="TheHuntOut" />
    <QuestsSorted Action="If" NameClass="DemonHunterClassHall.NeedFirstArtifact" />
    <QuestsSorted Action="TurnIn" NameClass="TheHunt" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="!DemonHunterClassHall.NeedFirstArtifact" />
    <QuestsSorted Action="Pulse" NameClass="TheHuntOrderHallTurnIn" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="WriteLog" NameClass="--- Complete Demon Hunter - Havoc - Twinblades of the Deceiver ---" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\Class Hall\[N] Demon Hunter.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="99247" Name="Kayn Sunfury" GameObject="false">
      <PickUpQuests>
        <int>40819</int>
        <int>40247</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-852.2726" Y="4256.074" Z="746.2852" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="99254" Name="Altruis the Sufferer" GameObject="false">
      <PickUpQuests>
        <int>41120</int>
        <int>41803</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-852.2726" Y="4256.074" Z="746.2852" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="94902" Name="Kayn Sunfury" GameObject="false">
      <PickUpQuests>
        <int>39051</int>
        <int>39247</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>40819</int>
      </TurnInQuests>
      <Position X="-952.618" Y="4332.883" Z="740.1838" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="103156" Name="Altruis the Sufferer" GameObject="false">
      <PickUpQuests>
        <int>41121</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>41120</int>
      </TurnInQuests>
      <Position X="-952.618" Y="4332.883" Z="740.1838" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="94902" Name="Kayn Sunfury" GameObject="false">
      <PickUpQuests>
        <int>39247</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>39051</int>
      </TurnInQuests>
      <Position X="1300.66" Y="-260.674" Z="44.27071" />
    </NPCQuest>
    <NPCQuest Id="103156" Name="Altruis the Sufferer" GameObject="false">
      <PickUpQuests>
        <int>41119</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>41121</int>
      </TurnInQuests>
      <Position X="1300.66" Y="-260.674" Z="44.27071" />
    </NPCQuest>
    <NPCQuest Id="102799" Name="Kor'vas Bloodthorn" GameObject="false">
      <PickUpQuests>
        <int>42869</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>39247</int>
        <int>41119</int>
      </TurnInQuests>
      <Position X="-835.9692" Y="4265.4" Z="746.2537" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="108572" Name="Kayn Sunfury" GameObject="false">
      <PickUpQuests>
        <int>44383</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>44383</int>
      </TurnInQuests>
      <Position X="1550.898" Y="1413.856" Z="237.1085" />
    </NPCQuest>
    <NPCQuest Id="108571" Name="Altruis the Sufferer" GameObject="false">
      <PickUpQuests>
        <int>44379</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>44379</int>
      </TurnInQuests>
      <Position X="1550.898" Y="1413.856" Z="237.1085" />
    </NPCQuest>
    <NPCQuest Id="90417" Name="Archmage Khadgar" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>40247</int>
      </TurnInQuests>
      <Position X="-848.4618" Y="4638.848" Z="749.5471" />
    </NPCQuest>
  </NpcQuest>
  <Npc />
  <Blackspots />
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>+In Pursuit of Power</Name>
      <QuestId>
        <int>44383</int>
        <int>44379</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class InPursuitofPower : QuestClass
{
	public InPursuitofPower()
	{
		Name = "In Pursuit of Power";
		QuestId.Add(DemonHunterClassHall.QUEST_CHOOSE_SECOND_ARTIFACT_KAYN);
		QuestId.Add(DemonHunterClassHall.QUEST_CHOOSE_SECOND_ARTIFACT_ALTRIUS);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	public override bool CanConditions()
	{
		return !DemonHunterClassHall.NeedFirstArtifact &amp;&amp; DemonHunterClassHall.NeedSecondArtifact;
	}

	public override bool IsComplete()
	{
		return Questing.ObjectiveComplete(this, 1);
	}

	public override bool HasQuest()
	{
		return CanConditions();
	}

	public override bool Pulse()
	{
		if (!DemonHunterClassHall.InClassHall)
		{
			DemonHunterClassHall.ToClassHall();
			return true;
		}
		var kaynOrAltrius = new List&lt;int&gt;() {
			108572, //kayn
			108571 //altrius
		};
		var p = new Vector3(1551.054, 1413.816, 237.1085);
		if (GoToTask.ToPosition(p))
		{
			var npc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(kaynOrAltrius));
			if (npc != null &amp;&amp; npc.IsValid)
			{
				if (GoToTask.ToPositionAndIntecractWithNpc(npc.Position, npc.Entry, 1))
				{
					Thread.Sleep(Others.Random(1000, 2000));
					Quest.AcceptQuest();

					Thread.Sleep(Others.Random(1000, 2000));
					Questing.Gossip(1);

					Thread.Sleep(Others.Random(1000, 2000));
					Questing.ChooseQuest(1); //only one artifact left
					return true;
				}
			}
		}
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Making Arrangements (Order Hall Pick Up)</Name>
      <QuestId>
        <int>41120</int>
        <int>40819</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class MakingArrangementsOrderHallPickUp : QuestClass
{
	public MakingArrangementsOrderHallPickUp()
	{
		Name = "Making Arrangements (Order Hall Pick Up)";
		QuestId.Add(41120);
		QuestId.Add(40819);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool CanConditions()
	{
		return DemonHunterClassHall.InClassHall;
	}

	public override bool HasQuest()
	{
		return CanConditions();
	}

	public override bool IsComplete()
	{
		return Questing.Complete(this) || LegionQuests.InDalaran;
	}

	public override bool Pulse()
	{
		if (Questing.Has(this))
		{
			DemonHunterClassHall.ToDalaran();
			return true;
		}
		if (!DemonHunterClassHall.InClassHall)
		{
			DemonHunterClassHall.ToClassHall();
			return true;
		}
		var kaynOrAltrius = new List&lt;int&gt;() {
			108572, //kayn
			108571 //altrius
		};
		var p = new Vector3(1551.054, 1413.816, 237.1085);
		if (GoToTask.ToPosition(p))
		{
			var npc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(kaynOrAltrius));
			if (npc != null &amp;&amp; npc.IsValid)
			{
				if (GoToTask.ToPositionAndIntecractWithNpc(npc.Position, npc.Entry, 1))
				{
					Thread.Sleep(Others.Random(1000, 2000));
					Quest.AcceptQuest();

					return true;
				}
			}
		}
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Making Arrangements</Name>
      <QuestId>
        <int>41120</int>
        <int>40819</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>By Any Means</Name>
      <QuestId>
        <int>39051</int>
        <int>41121</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var pos = new Vector3(-957.408, 4329.056, 740.1686, "None");
		var guardId = 96313;
		if (ObjectManager.Me.Position.DistanceTo(pos) &gt; 10)
		{
			Logging.WriteDebug("[By Any Means] goto position");
			GoToTask.ToPosition(pos);
			return true;
		}
		var guard = Questing.FindUnit(guardId);
		if (guard != null &amp;&amp; guard.IsValid &amp;&amp; !guard.IsMovingForward)
		{
			Logging.WriteDebug("[By Any Means] talk to guard");
			if (GoToTask.ToPositionAndIntecractWithNpc(pos, guardId, 2))
			{
				Thread.Sleep(2 * 1000);
				Lua.LuaDoString("GossipTitleButton2:Click();");
				Thread.Sleep(5 * 1000);
			}
			return true;
		}
		Logging.WriteDebug("[By Any Means] goto gate");
		var insidePos = new Vector3(-965.9781, 4318.647, 740.0172);
		var mearGate = new Vector3(-959.1805, 4326.563, 740.213, "None");
		var gateId = 242174;
		if (Questing.Gather(gateId))
		{
			Logging.WriteDebug("[By Any Means] goto inside");
			GoToTask.ToPosition(insidePos);
		}
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Usefuls.ContinentId == (int)ContinentId.AcquisitionVioletHold;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>By Any Means 2</Name>
      <QuestId>
        <int>39051</int>
        <int>41121</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		Questing.Attack(94900, 94731);
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.ObjectiveComplete(this, 3);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class TheHunt : QuestClass
{
	public TheHunt()
	{
		Name = "The Hunt";
		QuestId.Add(DemonHunterClassHall.QUEST_ARTIFACT_HAVOC_KAYN);
		QuestId.Add(DemonHunterClassHall.QUEST_ARTIFACT_HAVOC_ALTRIUS);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	protected void Log(string text)
	{
		Logging.Write("[" + Name + "] " + text);
	}

	public override bool IsComplete()
	{
		return Questing.Scenario.Stage &gt;= 3 || ItemsManager.HasItemById(127829); // http://www.wowhead.com/item=127829/twinblades-of-the-deceiver
	}

	public override bool Pulse()
	{
		if (ObjectManager.Me.IsOnTaxi || ObjectManager.Me.PlayerUsingVehicle)
		{
			//wait
			Thread.Sleep(2 * 1000);
		}
		else if (Usefuls.ContinentId == (int)ContinentId.AcquisitionVioletHold)
		{
			var posMoveOut = new Vector3(1261.129, -263.3456, 44.36398);// new Vector3(1290.327, -262.9491, 44.36398);
			GoToTask.ToPosition(posMoveOut);
		}
		else if (!LegionQuests.InDalaran)
		{
			DemonHunterClassHall.ToDalaran();
			return true;
		}
		else
		{
			var batPosition = new Vector3(-844.6198, 4253.933, 746.2827);
			var batId = 94321;
			GoToTask.ToPositionAndIntecractWithNpc(batPosition, batId);
		}
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage == 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt 3</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class TheHunt3 : TheHunt
{
	public override bool IsComplete()
	{
		return Questing.Scenario.Stage != 3 || Questing.Scenario.CriteriaComplete(1);
	}

	public override bool Pulse()
	{
		var hotspots = new List&lt;Vector3&gt;()
		{
			new Vector3(1059.595, 5093.808, 55.64249, "None"),
			new Vector3(1211.149, 5027.758, 60.36699),
			new Vector3(970.566, 4906.897, 36.06742),
		};
		var wards = new List&lt;int&gt;()
		{
			243428,
			243472,
			243473,
		};
		float range = 8;
		var wardIndex = Questing.Scenario.CriteriaQuantity(1);

		Questing.Gather(hotspots[wardIndex], wards[wardIndex], range);
		wardIndex += 1;
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt 3a</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="1084.649" Y="4950.413" Z="48.24169" />
          <Vector3 X="1199.035" Y="5002.556" Z="57.87671" />
          <Vector3 X="1051.711" Y="5137.717" Z="57.60616" />
          <Vector3 X="1075.997" Y="5113.786" Z="57.51547" />
          <Vector3 X="1191.429" Y="5253.882" Z="79.58531" />
          <Vector3 X="1108.909" Y="5165.536" Z="63.00466" />
          <Vector3 X="997.3108" Y="4981.412" Z="37.08821" />
          <Vector3 X="986.7631" Y="4917.215" Z="36.38743" />
        </HotSpots>
        <EntryTarget>
          <int>95848</int>
          <int>95285</int>
          <int>95423</int>
          <int>95329</int>
          <int>95313</int>
          <int>95429</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 3 || Questing.Scenario.CriteriaComplete(2);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt 4</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class TheHunt4 : TheHunt
{

	public override bool IsComplete()
	{
		return Questing.Scenario.Stage != 4;
	}

	public override bool Pulse()
	{
		var targetPosition = new Vector3(958.002, 4804.31, 34.60534, "None");
		var dist = 50;
		if (ObjectManager.Me.Position.DistanceTo(targetPosition) &gt; dist)
		{
			var path = new List&lt;Vector3&gt;() {
				new Vector3(1007.911f, 4916.404f, 36.27668f, "None"),
				new Vector3(1005.395f, 4910.961f, 36.60881f, "None"),
				new Vector3(1002.563f, 4904.621f, 36.2134f, "None"),
				new Vector3(999.8337f, 4898.212f, 36.16484f, "None"),
				new Vector3(997.0991f, 4891.718f, 36.76386f, "None"),
				new Vector3(994.1116f, 4885.377f, 35.61211f, "None"),
				new Vector3(990.5892f, 4879.322f, 35.91118f, "None"),
				new Vector3(986.6706f, 4873.558f, 35.98149f, "None"),
				new Vector3(983.4828f, 4867.297f, 36.21889f, "None"),
				new Vector3(980.6605f, 4860.906f, 36.56859f, "None"),
				new Vector3(977.5344f, 4854.66f, 36.26171f, "None"),
				new Vector3(973.5869f, 4848.834f, 35.25025f, "None"),
				new Vector3(969.7424f, 4843.062f, 35.02955f, "None"),
			};
			if (ObjectManager.Me.Position.DistanceTo(path[0]) &gt; 5)
				GoToTask.ToPosition(path[0]);

			MovementManager.Go(path);
			while (MovementManager.InMovement &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
			{
				Thread.Sleep(1000);
			}
			MovementManager.StopMove();
		}
		var mobId = 94836;
		var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(mobId));
		if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive &amp;&amp; mob.IsAttackable)
		{
			Interact.InteractGameObject(mob.GetBaseAddress);
			Fight.StartFight(mob.Guid);
		}
		return true;
	}
}

</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 4;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt 5</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(963.2269, 4824.864, 34.63615, "None");
		Questing.Gather(p, 251878);
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return ItemsManager.HasItemById(127829);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt (Out)</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class TheHuntOut : QuestClass
{
	public TheHuntOut()
	{
		Name = "The Hunt (Out)";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool CanConditions()
	{
		return true;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return IsCompleted();
	}
	public override bool IsCompleted()
	{
		return Usefuls.ContinentId != (int)ContinentId.AcquisitionHavoc;
	}
	public override bool Pulse()
	{
		var batId = 101902;
		var batPos = new Vector3(971.3768, 4841.856, 35.01244);
		GoToTask.ToPositionAndIntecractWithNpc(batPos, batId);
		return true;
	}
}

</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Hunt (Order Hall Turn In)</Name>
      <QuestId>
        <int>39247</int>
        <int>41119</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class TheHuntOrderHallTurnIn : QuestClass
{
	public TheHuntOrderHallTurnIn()
	{
		Name = "The Hunt (Order Hall Turn In)";
		QuestId.Add(DemonHunterClassHall.QUEST_ARTIFACT_HAVOC_ALTRIUS);
		QuestId.Add(DemonHunterClassHall.QUEST_ARTIFACT_HAVOC_KAYN);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool IsComplete()
	{
		return Questing.Complete(this);
	}

	public override bool Pulse()
	{
		if (!DemonHunterClassHall.InClassHall)
		{
			DemonHunterClassHall.ToClassHall();
			return true;
		}
		var korvas = new List&lt;int&gt;() {
			103761, //Kor'vas Bloodthorn
		};
		var p = new Vector3(1551.054, 1413.816, 237.1085);
		if (GoToTask.ToPosition(p))
		{
			var npc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(korvas));
			if (npc != null &amp;&amp; npc.IsValid)
			{
				if (GoToTask.ToPositionAndIntecractWithNpc(npc.Position, npc.Entry, 1))
				{
					if (Questing.QuestButton(2))
					{
					}
					else if (Questing.QuestButton(1))
					{
					}
					Quest.CompleteQuest();
				}
			}
		}
		return true;
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>camelot10\Libs\Questing.cs
camelot10\Libs\LegionQuests.cs
camelot10\Libs\DemonHunterClassHall.cs
</Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="1005.073" Y="4902.509" Z="36.17421" />
        <Vector3 X="990.8926" Y="4877.679" Z="35.96812" />
        <Vector3 X="980.9431" Y="4859.409" Z="36.65935" />
        <Vector3 X="974.5111" Y="4848.314" Z="35.24346" />
        <Vector3 X="970.3854" Y="4841.83" Z="35.00223" />
        <Vector3 X="966.1776" Y="4835.701" Z="34.82682" />
      </Path>
      <ContinentId>1498</ContinentId>
      <Name>Felsoul Hold Bridge (to east)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-826.249" Y="4238.988" Z="742.1023" />
        <Vector3 X="-836.0154" Y="4225.305" Z="727.2667" />
        <Vector3 X="-843.5878" Y="4219.25" Z="720.8373" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Krasus' Landing (to Demon Hunter Order Hall)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-847.5519" Y="4217.599" Z="720.8209" />
        <Vector3 X="-839.4773" Y="4223.432" Z="724.423" />
        <Vector3 X="-834.7632" Y="4223.376" Z="725.6844" />
        <Vector3 X="-833.7852" Y="4227.578" Z="729.4767" />
        <Vector3 X="-833.6339" Y="4231.307" Z="734.2444" />
        <Vector3 X="-832.6879" Y="4236.375" Z="737.9385" />
        <Vector3 X="-831.9283" Y="4240.723" Z="741.1431" />
        <Vector3 X="-828.7947" Y="4243.589" Z="742.704" />
        <Vector3 X="-825.743" Y="4247.731" Z="745.0795" />
        <Vector3 X="-829.3754" Y="4262.938" Z="746.2513" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Krasus' Landing (from Demon Hunter Order Hall)</Name>
    </OffMeshConnection>
  </OffMeshConnections>
</EasyQuestProfile>