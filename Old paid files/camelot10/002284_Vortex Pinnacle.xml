<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="// Change WRobot settings:&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CloseIfPlayerTeleported = false;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 99;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackElite = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.AttackBeforeBeingAttacked = false;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.LootMobs = true;&#xD;&#xA;wManager.wManagerSetting.CurrentSetting.UseMount = false;&#xD;&#xA;" />
    <QuestsSorted Action="Pulse" NameClass="MoveInside" />
    <QuestsSorted Action="Pulse" NameClass="GrandVizierErtan" />
    <QuestsSorted Action="Pulse" NameClass="Altairus" />
    <QuestsSorted Action="Pulse" NameClass="MoveOutside" />
    <QuestsSorted Action="Wait" NameClass="5000" />
    <QuestsSorted Action="RunLuaCode" NameClass="ResetInstances();" />
    <QuestsSorted Action="GoToStep" NameClass="1" />
  </QuestsSorted>
  <NpcQuest />
  <Npc />
  <Blackspots />
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>Move Inside</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-11522.77" Y="-2315.899" Z="608.3936" />
        </HotSpots>
        <EntryTarget />
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Usefuls.ContinentId == (int)ContinentId.SkywallDungeon;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Grand Vizier Ertan</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="-724.1456" Y="15.25185" Z="635.6728" />
          <Vector3 X="-719.6809" Y="5.156599" Z="635.6728" />
          <Vector3 X="-725.919" Y="0.3547869" Z="635.6728" />
          <Vector3 X="-711.2528" Y="8.02531" Z="635.6728" />
          <Vector3 X="-713.3065" Y="-3.065119" Z="635.6728" />
        </HotSpots>
        <EntryTarget>
          <int>43878</int>
          <int>45915</int>
          <int>45477</int>
          <int>45917</int>
          <int>45704</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return (wManager.Wow.Helpers.Lua.LuaDoString("local _, _, numCriteria = C_Scenario.GetStepInfo(); if not numCriteria or numCriteria == 0  then completedObj = 'true'; return; end; local critID; _, _, completedObj,_,_,_,_,_,critID = C_Scenario.GetCriteriaInfo(1); ", "completedObj").ToLower() == "true");</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Altairus</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		//var p0 = new Vector3(-769.343, -54.10848, 639.9261, "None");
		//var p1 = new Vector3(-897.9611, -172.1146, 664.5053, "None");
		if (ObjectManager.Me.PlayerUsingVehicle)
		{
			//on slipstream
			return true;
		}
		if (ObjectManager.Me.Position.X &gt; -800)
		{
			var slipstream = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(45455));
			if (slipstream != null &amp;&amp; slipstream.IsValid)
			{
				Logging.Write("found slipstream");
				GoToTask.ToPositionAndIntecractWithNpc(slipstream.Position, slipstream.Entry, 1);
			}
			else
			{
				Logging.Write("need slipstream");
				var p = new Vector3(-769.9689, -56.61314, 639.9265);
				GoToTask.ToPositionAndIntecractWithNpc(p, 45455, 1);
			}
			return true;
		}
		else
		{
			var howlingGale = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(45572));
			if (howlingGale != null &amp;&amp; howlingGale.IsValid &amp;&amp; howlingGale.IsAlive &amp;&amp; howlingGale.IsAttackable)
			{
				Logging.Write("attack howling gale");
				Interact.InteractGameObject(howlingGale.GetBaseAddress, false, false, true);
				Fight.StartFight(howlingGale.Guid);
				return true;
			}
			var altairus = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(43873));
			if (altairus != null &amp;&amp; altairus.IsValid &amp;&amp; altairus.IsAlive &amp;&amp; altairus.IsAttackable)
			{
				Logging.Write("attack altairus");
				Interact.InteractGameObject(altairus.GetBaseAddress, false, false, true);
				Fight.StartFight(altairus.Guid);
			}
			else
			{
				Logging.Write("goto altairus");
				var p = new Vector3(-1192.2, 54.16493, 744.2991, "None"); //Altairus
				GoToTask.ToPosition(p);
			}
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return (wManager.Wow.Helpers.Lua.LuaDoString("local _, _, numCriteria = C_Scenario.GetStepInfo(); if not numCriteria or numCriteria == 0  then completedObj = 'true'; return; end; local critID; _, _, completedObj,_,_,_,_,_,critID = C_Scenario.GetCriteriaInfo(2);", "completedObj").ToLower() == "true");</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Move Outside</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var path = new List&lt;Vector3&gt;();
		//jump to entrance
		if (ObjectManager.Me.Position.X &gt; -800)
		{
			//exit
			path = new List&lt;Vector3&gt;()
			{
				new Vector3(-361.0677f, -5.696181f, 632.7807f, "None"),
				new Vector3(-358.1515f, -2.615069f, 632.7807f, "None"),
				new Vector3(-355.3183f, 0.378346f, 632.7807f, "None"),
				new Vector3(-352.6124f, 3.237291f, 632.7807f, "None"),
				new Vector3(-349.7128f, 6.300864f, 631.5976f, "None"),
				new Vector3(-346.8685f, 9.305972f, 629.7911f, "None"),
				new Vector3(-344.1349f, 12.19415f, 628.0548f, "None"),
				new Vector3(-341.3183f, 15.17002f, 626.9792f, "None"),
				new Vector3(-338.139f, 17.6921f, 626.9792f, "None"),
				new Vector3(-334.9064f, 19.9526f, 626.9792f, "None"),
				new Vector3(-331.7993f, 22.12545f, 626.9792f, "None"),
				new Vector3(-328.4941f, 24.43669f, 626.9792f, "None"),
				new Vector3(-325.4941f, 24.43669f, 626.9792f, "None"),
				new Vector3(-322.4941f, 24.43669f, 626.9792f, "None"),
			};
		}
		else
		{
			path = new List&lt;Vector3&gt;()
			{
				new Vector3(-1196.429f, 54.99859f, 734.1743f, "None"),
				new Vector3(-1192.123f, 53.0512f, 734.1743f, "None"),
				new Vector3(-1193.216f, 57.92618f, 734.1743f, "None"),
				new Vector3(-1195.052f, 61.72392f, 734.1743f, "None"),
				new Vector3(-1196.228f, 65.53443f, 734.1743f, "None"),
				new Vector3(-1196.661f, 69.70471f, 734.1743f, "None"),
				new Vector3(-1197.01f, 73.60139f, 734.1743f, "None"),
				new Vector3(-1197.379f, 77.71455f, 735.002f, "None"),
				new Vector3(-1197.725f, 81.57916f, 735.967f, "None"),
				new Vector3(-1196.817f, 85.79084f, 737.4559f, "None"),
				new Vector3(-1194.971f, 89.90756f, 739.1898f, "None"),
				new Vector3(-1193.827f, 93.78311f, 740.6868f, "None"),
				new Vector3(-1192.687f, 97.7187f, 740.7761f, "None"),
				new Vector3(-1191.599f, 101.6022f, 740.7315f, "None"),
				new Vector3(-1190.669f, 105.2114f, 740.7076f, "None"),
				new Vector3(-1188.472f, 112.0601f, 737.8494f, "None"),
				new Vector3(-1187.207f, 115.7451f, 731.3602f, "None"),
				new Vector3(-1185.86f, 119.666f, 719.493f, "None"),
				new Vector3(-1184.563f, 123.4424f, 703.2267f, "None"),
				new Vector3(-1183.212f, 127.3786f, 681.2202f, "None"),
				new Vector3(-1188.52f, 129.809f, 745.7903f, "None"),
			};
		}
		MovementManager.Go(path);
		do
		{
			Thread.Sleep(300);
		}
		while (MovementManager.InMovement &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore);		
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Usefuls.ContinentId != (int)ContinentId.SkywallDungeon;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>
public class MyCustomScript
{
    static MyCustomScript()
    {
        // You can put here code to run when bot start, you can also add methods and classes.
    }
}
</Script>
  <OffMeshConnections />
</EasyQuestProfile>