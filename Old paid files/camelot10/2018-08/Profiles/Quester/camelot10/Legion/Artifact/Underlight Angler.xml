<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="/* DISABLE ARCANE LURE (Conjurer Margoss) */ UnderlightAnglerHelper.UseArcaneLue = true;" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &lt; 110" />
    <QuestsSorted Action="WriteLog" NameClass="This profile required level 110" />
    <QuestsSorted Action="StopBot" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="WriteLog" NameClass="--- Start Underlight Angler ---" />
    <QuestsSorted Action="Pulse" NameClass="ToBrokenIsles" />
    <QuestsSorted Action="Pulse" NameClass="GetArcaneLures" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingAszuna" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingValsharah" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingHighmountain" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingStormheim" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingSuramar" />
    <QuestsSorted Action="Pulse" NameClass="RareFishingOcean" />
    <QuestsSorted Action="Pulse" NameClass="LuminousPearl" />
    <QuestsSorted Action="TurnIn" NameClass="LuminousPearl" />
    <QuestsSorted Action="PulseAllInOne" NameClass="TheDalaranFountain" />
    <QuestsSorted Action="PickUp" NameClass="FishFrenzy" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy1" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy2" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy3" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy4" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzy5" />
    <QuestsSorted Action="Pulse" NameClass="FishFrenzyOut" />
    <QuestsSorted Action="TurnIn" NameClass="FishFrenzy" />
    <QuestsSorted Action="Pulse" NameClass="LevelingOcean" />
    <QuestsSorted Action="WriteLog" NameClass="--- Complete Underlight Angler ---" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="90417" Name="Archmage Khadgar" GameObject="false">
      <PickUpQuests>
        <int>40961</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>40960</int>
      </TurnInQuests>
      <Position X="-848.4618" Y="4638.848" Z="749.5474" />
    </NPCQuest>
    <NPCQuest Id="95844" Name="Marcia Chase" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>40961</int>
        <int>41010</int>
      </TurnInQuests>
      <Position X="-943.2778" Y="4438.424" Z="734.1778" />
    </NPCQuest>
    <NPCQuest Id="102639" Name="Nat Pagle" GameObject="false">
      <PickUpQuests>
        <int>41010</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="-862.3002" Y="4550.562" Z="728.1852" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-943.2778" Y="4438.424" Z="734.1778" />
      <Entry>95844</Entry>
      <Name>Marcia Chase</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>FishingTrainer</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
  </Npc>
  <Blackspots>
    <Blackspot X="-846.86" Y="4469.6" Z="735.8798" Radius="15" />
    <Blackspot X="1507.684" Y="2617.55566" Z="5.429209" Radius="30" />
    <Blackspot X="1499.20117" Y="2304.652" Z="-1.5407511" Radius="6" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>+Underlight Angler Helper</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class UnderlightAnglerHelper
{
	static UnderlightAnglerHelper()
	{
		ResetSettings();
		FightFix();
	}
	public static uint buffArcaneLure = 218861;
	public static uint buffFindFish = 43308;
	public static uint buffMoosehornHook = 201816;
	public static void Log(string text)
	{
		Logging.Write("[Underlight Angler] " + text);
	}

	static List&lt;string&gt; flyingHotspotsQuests = new List&lt;string&gt;();
	static float flyingDelta = 20f;
	public static void ChangeFlyingHotspots(string id, List&lt;Vector3&gt; hotspots)
	{
		if (flyingHotspotsQuests.Contains(id))
			return;
		if (!ObjectManager.Me.HaveBuff(233368))
			return;

		flyingHotspotsQuests.Add(id);
		foreach (var p in hotspots)
		{
			p.Z += flyingDelta;
			p.Type = "Flying";
		}
		Log("changed hotspots to flying for quest=" + id);
	}
	public static bool DoneCriteria(int criteria = 1)
	{
		return Questing.Achievement.DoneCriteria(10596, criteria);
	}
	public static bool DefaultCheck(int criteria, uint buff, uint item)
	{
		if (DoneCriteria(criteria))
		{
			return false;
		}

		if (ObjectManager.Me.HaveBuff(buff))
		{
			Log("check criteria #" + criteria + " have buff " + buff);
			return true;
		}

		if (ItemsManager.HasItemById(item))
		{
			Log("check criteria #" + criteria + " use item " + item);
			Fisher.Stop();
			ItemsManager.UseItem(item);
			return true;
		}
		return false;
	}
	public static class Items
	{
		public static uint Artifact = 133755; // http://www.wowhead.com/item=133755/underlight-angler
		public static uint DrownedMana = 138777;
		public static uint EmblemOfMargoss = 138448;
		public static uint WeatherBeatenJournal = 34109;
		public static uint FishingGuidetoDraenor = 111356;
		//lure
		public static uint ArcaneLure = 139175;
		public static uint MoosehornHook = 133713;
	}
	public static bool CompleteLearnFishing()
	{
		return true;
	}
	public static bool NeedLearnFishing
	{
		get
		{
			var fishing = Skill.GetValue(SkillLine.Fishing);
			var fishingMax = Skill.GetMaxValue(SkillLine.Fishing);
			if (fishing == 0)
				return true;

			if (fishing &gt;= 800 || fishingMax &gt;= 800)
				return false;

			if (fishing &lt; fishingMax)
				return false;

			return true;
		}
	}
	public static bool TryLearnFishing()
	{
		if (!NeedLearnFishing)
			return false;

		Npc fishingTrainer = null;
		if (InConjurerMargossIsland)
		{
			fishingTrainer = NPC.ConjurerMargoss;
		}
		else if (!LegionQuests.InDalaran)
		{
			LegionQuests.UseDalaranHeathstone();
			return true;
		}
		else
		{
			fishingTrainer = NpcDB.GetNpcNearby(Npc.NpcType.FishingTrainer);
		}
		if (fishingTrainer == null)
			return false;

		if (GoToTask.ToPositionAndIntecractWithNpc(fishingTrainer.Position, fishingTrainer.Entry))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
			return true;
		}
		return false;
	}
	public static bool TryHelpfull()
	{
		var fishing = Skill.GetValue(SkillLine.Fishing);
		var fishingMax = Skill.GetMaxValue(SkillLine.Fishing);
		if (fishingMax &lt; 700 &amp;&amp; ItemsManager.HasItemById(Items.FishingGuidetoDraenor))
		{
			UseItem(Items.FishingGuidetoDraenor);
		}
		if (!ObjectManager.Me.HaveBuff(buffFindFish) &amp;&amp; ItemsManager.HasItemById(Items.WeatherBeatenJournal))
			UseItem(Items.WeatherBeatenJournal);

		if (!ObjectManager.Me.HaveBuff(buffArcaneLure) &amp;&amp; ItemsManager.HasItemById(Items.ArcaneLure))
			return UseItem(Items.ArcaneLure);

		if (!ObjectManager.Me.HaveBuff(buffMoosehornHook) &amp;&amp; ItemsManager.HasItemById(Items.MoosehornHook) &amp;&amp; Questing.ZoneId == LegionQuests.ZONE_STORMHEIM)
			UseItem(Items.MoosehornHook);

		return false;
	}
	static bool UseItem(uint itemID)
	{
		if (!ItemsManager.HasItemById(itemID))
			return false;

		MountTask.DismountMount();
		ItemsManager.UseItem(itemID);
		Usefuls.WaitIsCasting();
		return true;
	}
	public static class Positions
	{
		public static Vector3 MargossIslandCenter = new Vector3(-495.7083, 4710.126, 658.1469, "None");
	}
	public static class NPC
	{
		public static Npc ConjurerMargoss = new Npc()
		{
			Position = new Vector3(-520.7014, 4683.151, 654.8011, "None"),
			Entry = 108825,
			Type = Npc.NpcType.FishingTrainer,
		};
	}
	public static bool InConjurerMargossIsland
	{
		get
		{
			if (Usefuls.ContinentId != (int)ContinentId.Troll_Raid)
				return false;

			var myPos = ObjectManager.Me.Position;
			if (myPos.DistanceZ(Positions.MargossIslandCenter) &gt; 20)
				return false;

			return myPos.DistanceTo2D(Positions.MargossIslandCenter) &lt; 75;
		}
	}
	public static bool ToConjurerMargossIsland()
	{
		return UseItem(Items.EmblemOfMargoss);
	}
	public static bool UseArcaneLue
	{
		get
		{
			return Var.Exist("Cameleto10_UnderlightAngler_UseArcaneLure") &amp;&amp; Var.GetVar&lt;bool&gt;("Cameleto10_UnderlightAngler_UseArcaneLure");
		}
		set
		{
			Var.SetVar("Cameleto10_UnderlightAngler_UseArcaneLure", value);
		}
	}
	public static void ResetSettings()
	{
		wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
		wManager.wManagerSetting.CurrentSetting.TrainNewSkills = false; // currently no possible ways to fly to dalaran - wrobot get stuck
		Log("reset settings");
	}
	public static void FightFix()
	{
		Log("fight fix enabled");
		wManager.Events.FightEvents.OnFightLoop += OnFightLoop;
	}
	static void OnFightLoop(WoWUnit unit, System.ComponentModel.CancelEventArgs cancelable)
	{
		if (unit != null &amp;&amp; unit.IsValid &amp;&amp; unit.IsAlive &amp;&amp; unit.IsSwimming &amp;&amp; !ObjectManager.Me.IsSwimming)
		{
			Log("fight bug. mob is swimming but im not. move to mob");
			//cancelable.Cancel = true;
			GoToTask.ToPosition(unit.Position);
		}
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>To Broken Isles</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>ItemsManager.UseItem(140192);
Usefuls.WaitIsCasting();
return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Usefuls.ContinentId == (int)ContinentId.Troll_Raid || Usefuls.ContinentId == (int) ContinentId.Artifact_Acquisition_Underlight;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Get Arcane Lures</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class GetArcaneLures : QuestClass
{
	int lureAmount = 10;
	int lureAmountMax = 50;
	public GetArcaneLures()
	{
		Name = "Get Arcane Lures";
		QuestId.Add(0);
		Step.AddRange(new[] { 0 });
	}
	public override bool Pulse()
	{
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		if (ItemsManager.GetItemCountById(UnderlightAnglerHelper.Items.ArcaneLure) &gt;= lureAmountMax)
		{
			LegionQuests.UseDalaranHeathstone();
			return true;
		}
		// http://www.wowhead.com/item=141975/mark-of-aquaos
		if (ItemsManager.HasItemById(141975))
		{
			ItemsManager.UseItem(141975);
			Thread.Sleep(Usefuls.Latency * 2);
		}
		var drownedMana = ItemsManager.GetItemCountById(UnderlightAnglerHelper.Items.DrownedMana);
		if (drownedMana &gt;= lureAmount)
		{
			Fisher.Stop();
			Questing.Buy(UnderlightAnglerHelper.NPC.ConjurerMargoss.Position, UnderlightAnglerHelper.NPC.ConjurerMargoss.Entry, (int)UnderlightAnglerHelper.Items.ArcaneLure, drownedMana);
			return true;
		}
		var p = new Vector3(-517.2132, 4688.953, 653.942, "None");
		Fisher.TryFish(p, 1.2f);
		return true;
	}
	/*
	void FishDalaranSewers()
	{
		var p = new Vector3(-733.04, 4389.06, 697.3557, "None");
		var rot = 2.584491f;
		Fisher.TryFish(p, rot);
	}
	//*/
	public override bool IsComplete()
	{
		if (!UnderlightAnglerHelper.UseArcaneLue)
			return true;

		return !UnderlightAnglerHelper.InConjurerMargossIsland;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Aszuna</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingAszuna : QuestClass
{
	int criteriaLeyshimmerBlenny = 8;
	int criteriaNarthalasHermit = 11;
	int criteriaGhostlyQueenfish = 6;

	uint buffAromaticMurlocSlime = 201805;
	uint itemAromaticMurlocSlime = 133702;
	uint itemSkrogToenail = 133701;
	uint buffSkrogToenail = 201804;
	int npcSalteyeSkrogHunter = 102338;

	uint buffPearlescentConch = 201806;
	uint itemPearlescentConch = 133703;

	uint buffRustyQueenfishBrooch = 201807;
	uint itemRustyQueenfishBrooch = 133704;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(569.1818, 6256.53, 38.99628, "None"),
		new Vector3(490.5344, 6353.422, 44.70646, "None"),
		new Vector3(335.5826, 6365.457, 3.78555, "None"),

		new Vector3(267.6584, 6667.305, 55.5051, "None"),
		new Vector3(415.361, 6702.564, 86.09481, "None"),
		new Vector3(472.883, 6907.971, 100.1667, "None"),

		new Vector3(636.251, 5712.979, 83.41952, "None"),
		new Vector3(783.6826, 5626.307, 78.44918, "None"),
	};
	int ghostlyQueenfishSchool = 246553;
	int cursedQueenfishSchool = 246488;
	public RareFishingAszuna()
	{
		Name = "Rare Fishing Aszuna";
		QuestId.Add(0);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_AZSUNA, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (TryLeyshimmerBlenny())
			return true;

		if (UnderlightAnglerHelper.DefaultCheck(criteriaGhostlyQueenfish, buffRustyQueenfishBrooch, itemRustyQueenfishBrooch))
		{
			Fisher.Hotspots(hotspots, ghostlyQueenfishSchool);
			return true;
		}

		if (UnderlightAnglerHelper.DefaultCheck(criteriaNarthalasHermit, buffPearlescentConch, itemPearlescentConch))
			return FishPools();

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	bool TryLeyshimmerBlenny()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaLeyshimmerBlenny))
			return false;

		if (ObjectManager.Me.HaveBuff(buffAromaticMurlocSlime))
		{
			return FishPools();
		}
		if (ItemsManager.HasItemById(itemAromaticMurlocSlime))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemAromaticMurlocSlime);
			return true;
		}
		var murloc = Questing.FindUnit(npcSalteyeSkrogHunter);
		if (murloc != null &amp;&amp; murloc.IsValid &amp;&amp; murloc.IsAlive &amp;&amp; murloc.IsAttackable)
		{
			Questing.Attack(murloc);
			return true;
		}
		if (ObjectManager.Me.HaveBuff(buffSkrogToenail))
		{
			//wait murlock
			return true;
		}
		if (!ObjectManager.Me.HaveBuff(buffSkrogToenail) &amp;&amp; ItemsManager.HasItemById(itemSkrogToenail))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemSkrogToenail);
			return true;
		}
		return false;
	}
	bool FishPools()
	{
		Fisher.Hotspots(hotspots, cursedQueenfishSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return UnderlightAnglerHelper.DoneCriteria(criteriaLeyshimmerBlenny)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaNarthalasHermit)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaGhostlyQueenfish);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Val'sharah</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingValsharah : QuestClass
{
	int criteriaAncientMossgill = 3;
	int criteriaThornedFlounder = 18;
	int criteriaTerrorfin = 17;

	uint buffRottenFishbone = 201809; //201808;
	uint itemRottenFishbone = 133705;

	uint itemDrownedThistleleaf = 133708;
	uint buffDrownedThistleleaf = 202067; //201811;

	uint itmeNightmareNightcrawler = 133707;
	uint buffNightmareNightcrawler = 201810;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(3453.81, 5629.429, 309.7266, "None"),
		new Vector3(3673.728, 5616.442, 310.0869, "None"),
		new Vector3(3539.319, 5420.085, 311.2125, "None"),
		new Vector3(3294.388, 5734.236, 312.4354, "None"),

		//new Vector3(3277.771, 5925.411, 251.9869, "None"),
		//new Vector3(3052, 6235.664, 225.9291, "None"),
	};
	int mossgillPerchSchool = 246489;
	public RareFishingValsharah()
	{
		Name = "Rare Fishing Val'sharah";
		QuestId.Add(1);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_VALSHARAH, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (CheckAncientMossgill())
			return true;

		if (UnderlightAnglerHelper.DefaultCheck(criteriaThornedFlounder, buffDrownedThistleleaf, itemDrownedThistleleaf))
			return FishPools();

		if (UnderlightAnglerHelper.DefaultCheck(criteriaTerrorfin, buffNightmareNightcrawler, itmeNightmareNightcrawler))
			return FishPools();

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	bool CheckAncientMossgill()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaAncientMossgill))
			return false;

		if (ObjectManager.Me.HaveBuff(buffRottenFishbone))
			return FishPools();

		// wait buff
		if (!waitTimer.IsReady)
		{
			Thread.Sleep(Others.Random(500, 1500));
			return true;
		}
		if (ItemsManager.HasItemById(itemRottenFishbone))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemRottenFishbone);
			waitTimer.Reset();
			//reset timer
			return true;
		}
		return false;
	}
	bool FishPools()
	{
		Fisher.Hotspots(hotspots, mossgillPerchSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return UnderlightAnglerHelper.DoneCriteria(criteriaAncientMossgill)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaThornedFlounder)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaTerrorfin);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Highmountain</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingHighmountain : QuestClass
{
	int criteriaAncientHighmountainSalmon = 2;
	int criteriaColdriverCarp = 5;
	int criteriaMountainPuffer = 10;

	uint buffBlessingOfTheMurlocs = 202056;
	uint itemSwollenMurlocEgg = 133711;
	int npcSwamprockTadpole = 102339;

	uint itemFunkySeaSnail = 133709;
	uint buffFunkySeaSnail = 201812;
	int npcBitestoneFishbrul = 102347;
	uint itemSalmonLure = 133710;
	uint buffSalmonLure = 201813;

	uint itmeFrostWorm = 133712;
	uint buffFrostWorm = 201815;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(3255.156, 5225.455, 626.9169, "None"),
		new Vector3(3426.89, 5292.508, 624.754, "None"),
		new Vector3(3550.529, 5274.528, 622.9567, "None"),
		new Vector3(3671.521, 5221.634, 622.9233, "None"),
		new Vector3(3822.964, 5231.939, 622.6293, "None"),
		new Vector3(3976.642, 5275.276, 624.3698, "None"),
		new Vector3(4096.193, 5432.047, 622.8559, "None"),
	};
	int highmountainSalmonSchool = 246490;

	public RareFishingHighmountain()
	{
		Name = "Rare Fishing Highmountain";
		QuestId.Add(0);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[hotspots.Count - 1];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_HIGHTMOUNTAIN, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (TryMountainPuffer())
			return true;

		if (TryAncientHighmountainSalmon())
			return true;

		if (UnderlightAnglerHelper.DefaultCheck(criteriaColdriverCarp, buffFrostWorm, itmeFrostWorm))
			return FishPools();

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	bool TryAncientHighmountainSalmon()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaAncientHighmountainSalmon))
			return false;

		if (ObjectManager.Me.HaveBuff(buffSalmonLure))
			return FishPools();

		if (ItemsManager.HasItemById(itemSalmonLure))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemSalmonLure);
			return true;
		}
		var drogbar = Questing.FindUnit(npcBitestoneFishbrul);
		if (drogbar != null &amp;&amp; drogbar.IsValid &amp;&amp; drogbar.IsAlive &amp;&amp; drogbar.IsAttackable)
		{
			Questing.Attack(drogbar);
			return true;
		}
		if (ItemsManager.HasItemById(itemFunkySeaSnail))
		{
			//wait
			Fisher.Stop();
			if (!ObjectManager.Me.HaveBuff(buffFunkySeaSnail))
			{
				ItemsManager.UseItem(itemSwollenMurlocEgg);
			}
			return true;
		}
		return false;
	}
	bool TryMountainPuffer()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaMountainPuffer))
			return false;

		if (ObjectManager.Me.HaveBuff(buffBlessingOfTheMurlocs))
			return FishPools();

		// wait buff
		if (!waitTimer.IsReady)
		{
			Thread.Sleep(Others.Random(500, 1500));
			return true;
		}
		if (ItemsManager.HasItemById(itemSwollenMurlocEgg))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemSwollenMurlocEgg);
			waitTimer.Reset();
			//reset timer
			return true;
		}
		return false;
	}
	bool FishPools()
	{
		Fisher.Hotspots(hotspots, highmountainSalmonSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return UnderlightAnglerHelper.DoneCriteria(criteriaAncientHighmountainSalmon)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaMountainPuffer)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaColdriverCarp);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Stormheim</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingStormheim : QuestClass
{
	int criteriaOodelfjisk = 12;
	int criteriaThunderingStormray = 15;
	int criteriaGraybellyLobster = 7;

	uint itemAncientVrykulRing = 133715;
	uint buffAncientVrykulRing = 201818;

	uint itemSilverscaleMinnow = 133714;
	uint buffSilverscaleMinnow = 201817;

	uint itemSoggyDrakescale = 133716;
	uint buffSoggyDrakescale = 201819;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		//*
		new Vector3(2655.871, 1670.188, 0.5149919, "None"),
		new Vector3(2535.16, 1663.078, 0.4688499, "None"),
		new Vector3(2378.862, 1534.245, 1.777233, "None"),
		new Vector3(2293.776, 1451.542, 0.7060171, "None"),
		//*/
		/*
		new Vector3(2215.239, 1446.478, 2.014434, "None"),
		new Vector3(2218.775, 1504.222, 0.7395275, "None"),
		new Vector3(2330.857, 1627.44, 2.042881, "None"),
		new Vector3(2502.13, 1821.052, 0.9364476, "None"),
		new Vector3(2541.688, 1930.759, 1.248016, "None"),
		//*/
	};
	int feverOfStormrays = 246491;
	int oodelfjiskenPool = 246554;
	public RareFishingStormheim()
	{
		Name = "Rare Fishing Stormheim";
		QuestId.Add(0);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_STORMHEIM, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (TryOodelfjisk())
			return true;

		if (UnderlightAnglerHelper.DefaultCheck(criteriaThunderingStormray, buffSilverscaleMinnow, itemSilverscaleMinnow))
			return FishPools();

		if (UnderlightAnglerHelper.DefaultCheck(criteriaGraybellyLobster, buffSoggyDrakescale, itemSoggyDrakescale))
			return FishPools();

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	bool TryOodelfjisk()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaOodelfjisk))
			return false;

		if (ObjectManager.Me.HaveBuff(buffAncientVrykulRing))
		{
			Fisher.Hotspots(hotspots, oodelfjiskenPool);
			return true;
		}
		if (ItemsManager.HasItemById(itemAncientVrykulRing))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemAncientVrykulRing);
			return true;
		}
		return false;
	}
	bool FishPools()
	{
		Fisher.Hotspots(hotspots, feverOfStormrays);
		return true;
	}
	public override bool IsComplete()
	{
		return UnderlightAnglerHelper.DoneCriteria(criteriaOodelfjisk)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaThunderingStormray)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaGraybellyLobster);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Suramar</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingSuramar : QuestClass
{
	int criteriaSeerspinePuffer = 16;
	int criteriaTaintedRunescaleKoi = 14;
	int criteriaMagicEaterFrog = 9;

	uint itemEnchantedLure = 133717;
	uint buffEnchantedLure = 201820;

	uint itemDemonicDetritus = 133720;
	uint buffDemonicDetritus = 201822;

	uint itemSleepingMurloc = 133719;
	int npcConfusedSeerspineMurloc = 102350;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		//*
		new Vector3(2521.778, 5219.885, 99.53692, "None"),
		new Vector3(2320.435, 5277.086, 97.81026, "None"),
		new Vector3(2100.2, 5254.853, 97.72932, "None"),
		new Vector3(2166.3, 5372.517, 101.008, "None"),
		new Vector3(2162.24, 5519.758, 97.30498, "None"),
		new Vector3(2273.288, 5605.87, 101.3713, "None"),
		//*/
		/*
		//*/
	};
	int runescaleKoiSchool = 246492;
	public RareFishingSuramar()
	{
		Name = "Rare Fishing Suramar";
		QuestId.Add(0);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_SURAMAR, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (TrySeerspinePuffer())
			return true;

		if (UnderlightAnglerHelper.DefaultCheck(criteriaMagicEaterFrog, buffEnchantedLure, itemEnchantedLure))
			return FishPools();

		if (UnderlightAnglerHelper.DefaultCheck(criteriaTaintedRunescaleKoi, buffDemonicDetritus, itemDemonicDetritus))
			return FishPools();

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	bool TrySeerspinePuffer()
	{
		if (UnderlightAnglerHelper.DoneCriteria(criteriaSeerspinePuffer))
			return false;

		var murlock = Questing.FindUnit(npcConfusedSeerspineMurloc);
		if (murlock != null &amp;&amp; murlock.IsValid)
		{
			Fisher.Stop();
			GoToTask.ToPosition(murlock.Position);
			return true;
		}
		if (ItemsManager.HasItemById(itemSleepingMurloc))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemSleepingMurloc);
			return true;
		}
		return false;
	}
	bool FishPools()
	{
		Fisher.Hotspots(hotspots, runescaleKoiSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return UnderlightAnglerHelper.DoneCriteria(criteriaMagicEaterFrog)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaSeerspinePuffer)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaTaintedRunescaleKoi);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Rare Fishing Ocean</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class RareFishingOcean : QuestClass
{
	int criteriaAncientBlackBarracuda = 1;
	int criteriaAxefish = 4;
	int criteriaSeabottomSquid = 13;

	protected int npcLandlockedShark = 102359;
	protected uint itemStunnedAngryShark = 133723;

	protected uint itemMessageInABeerBottle = 133721;
	protected uint itemAxefishLure = 133722;
	protected uint buffAxefishLure = 201823;

	protected uint itemDecayedWhaleBlubber = 133724;
	protected int npcDecayedWhaleBlubber = 102371;
	protected int npcRavenousFly = 102374;
	protected uint itemRavenousFly = 133795;
	protected uint buffRavenousFlyfishing = 202131;

	protected robotManager.Helpful.Timer waitTimer = new robotManager.Helpful.Timer(500 + 2 * 60 * 1000);

	protected List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(1610.225, 2575.21, 0.3949464, "None"),
		new Vector3(1553.303, 2475.629, 1.47454, "None"),
		new Vector3(1533.35, 2361.575, 1.129726, "None"),
		new Vector3(1506.467, 2277.602, 0.7397848, "None"),
		new Vector3(1500.068, 2198.533, 1.704882, "None"),
		new Vector3(1436.539, 2120.737, 4.470426, "None"),
	};
	protected int blackBarracudaSchool = 246493;
	public RareFishingOcean()
	{
		Name = "Rare Fishing Ocean";
		QuestId.Add(0);
		Step.AddRange(new[] { 0 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (UnderlightAnglerHelper.TryLearnFishing())
			return true;

		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_SURAMAR, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		if (CheckAndTrySeabottomSquid())
			return true;

		if (CheckAndTryAncientBlackBarracuda())
			return true;

		if (CheckAndTryAxefish())
			return true;

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}

	bool CheckAndTryAncientBlackBarracuda()
	{
		if (IsFishingMax() &amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaAncientBlackBarracuda))
			return false;

		if (TryAncientBlackBarracuda())
			return true;

		return false;
	}

	protected bool TryAncientBlackBarracuda()
	{
		if (ObjectManager.Me.HaveBuff(buffRavenousFlyfishing))
			return FishPools();

		if (ItemsManager.HasItemById(itemRavenousFly))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemRavenousFly);
			return true;
		}
		var fly = Questing.FindUnit(npcRavenousFly);
		if (fly != null &amp;&amp; fly.IsValid)
		{
			GoToTask.ToPositionAndIntecractWithNpc(fly.Position, fly.Entry);
			return true;
		}
		var blubber = Questing.FindUnit(npcDecayedWhaleBlubber);
		if (blubber != null &amp;&amp; blubber.IsValid)
		{
			GoToTask.ToPosition(blubber.Position);
			return true;
		}
		if (ItemsManager.HasItemById(itemDecayedWhaleBlubber))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemDecayedWhaleBlubber);
			Thread.Sleep(Usefuls.Latency * 2);
			ClickOnTerrain.Pulse(ObjectManager.Me.Position);
			Usefuls.WaitIsCasting();
			Thread.Sleep(Usefuls.Latency * 2);
			return true;
		}
		return false;
	}

	bool CheckAndTryAxefish()
	{
		if (IsFishingMax() &amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaAxefish))
			return false;

		if (TryAxefish())
			return true;

		return false;
	}

	protected bool TryAxefish()
	{
		if (ObjectManager.Me.HaveBuff(buffAxefishLure))
			return FishPools();

		if (ItemsManager.HasItemById(itemAxefishLure))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemAxefishLure);
			return true;
		}
		if (ItemsManager.HasItemById(itemMessageInABeerBottle))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemMessageInABeerBottle);
			return true;
		}
		return false;
	}

	bool CheckAndTrySeabottomSquid()
	{
		if (IsFishingMax() &amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaSeabottomSquid))
			return false;

		if (TrySeabottomSquid())
			return true;

		return false;
	}

	protected bool TrySeabottomSquid()
	{
		var shark = Questing.FindUnit(npcLandlockedShark);
		if (shark != null &amp;&amp; shark.IsValid &amp;&amp; shark.IsAlive &amp;&amp; shark.IsAttackable)
		{
			Questing.Attack(shark);
			return true;
		}
		if (ItemsManager.HasItemById(itemStunnedAngryShark))
		{
			Fisher.Stop();
			ItemsManager.UseItem(itemStunnedAngryShark);
			Thread.Sleep(Others.Random(3000, 4000));
			return true;
		}
		return false;
	}
	bool IsFishingMax()
	{
		return Skill.GetValue(SkillLine.Fishing) &gt;= 800;
	}
	protected bool FishPools()
	{
		Fisher.Hotspots(hotspots, blackBarracudaSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return IsFishingMax()
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaAncientBlackBarracuda)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaAxefish)
			&amp;&amp; UnderlightAnglerHelper.DoneCriteria(criteriaSeabottomSquid);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Luminous Pearl</Name>
      <QuestId>
        <int>40960</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class LuminousPearl : QuestClass
{
	List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(1610.225, 2575.21, 0.3949464, "None"),
		new Vector3(1553.303, 2475.629, 1.47454, "None"),
		new Vector3(1533.35, 2361.575, 1.129726, "None"),
		new Vector3(1506.467, 2277.602, 0.7397848, "None"),
		new Vector3(1500.068, 2198.533, 1.704882, "None"),
		new Vector3(1436.539, 2120.737, 4.470426, "None"),
	};
	int blackBarracudaSchool = 246493;
	public LuminousPearl()
	{
		Name = "Luminous Pearl";
		QuestId.Add(40960);
		Step.AddRange(new[] { 1 });
	}
	public override bool Pulse()
	{
		UnderlightAnglerHelper.ChangeFlyingHotspots(Name, hotspots);
		if (ItemsManager.HasItemById(133887))
		{
			LegionQuests.UseDalaranHeathstone();
			return true;
		}
		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_SURAMAR, p))
		{
			GoToTask.ToPosition(p);
			return true;
		}

		Fisher.Hotspots(hotspots, blackBarracudaSchool);
		return true;
	}
	public override bool IsComplete()
	{
		return ItemsManager.HasItemById(133887) &amp;&amp; LegionQuests.InDalaran;
	}
	public override bool HasQuest()
	{
		return Questing.NotComplete(this);
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Dalaran Fountain</Name>
      <QuestId>
        <int>40961</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="-862.3002" Y="4550.562" Z="728.1852" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>102639</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.ObjectiveComplete(this, 2) || Questing.Scenario.Stage &gt; 0;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy 1</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="2519.589" Y="8265.014" Z="3.112753" />
          <Vector3 X="2518.039" Y="8279.731" Z="1.428979" />
          <Vector3 X="2512.09" Y="8302.997" Z="1.145525" />
          <Vector3 X="2538.795" Y="8328.503" Z="0.9301274" />
          <Vector3 X="2556.325" Y="8349.861" Z="0.9547738" />
          <Vector3 X="2547.805" Y="8398.294" Z="1.085574" />
          <Vector3 X="2502.609" Y="8406.978" Z="1.212741" />
          <Vector3 X="2444.127" Y="8387.981" Z="1.448811" />
          <Vector3 X="2412.486" Y="8395.067" Z="1.852579" />
          <Vector3 X="2462.24" Y="8322.67" Z="0.9714181" />
        </HotSpots>
        <EntryTarget>
          <int>102508</int>
          <int>102509</int>
          <int>102506</int>
          <int>102510</int>
          <int>102507</int>
          <int>102511</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 1;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy 2</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var schoolFrenziedFish = new List&lt;int&gt;()
		{
			 246676,
			 250680,
			 246678,
			 250679,
			 250681,
			 246677,
		};
		var hotspots = new List&lt;Vector3&gt;()
		{
			new Vector3(2458.451, 8350.419, 0.5283766, "None"),
			new Vector3(2533.141, 8374.838, 0.1175066, "None"),
			new Vector3(2538.049, 8303.133, -1.124704, "None"),
			new Vector3(2485.62, 8309.254, 2.73107, "None"),
		};
		Fisher.Hotspots(hotspots, schoolFrenziedFish);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 2;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy 3</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="2436.955" Y="8409.863" Z="0.9363127" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>107804</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 3;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy 4</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var murlok = Questing.FindUnit(102517);
		if (murlok != null &amp;&amp; murlok.IsValid)
		{
			Fisher.Stop();
			Questing.Attack(murlok);
			return true;
		}
		var p = new Vector3(2426.651, 8407.483, 0.1212897, "None");
		Fisher.TryFish(p, 1.96f);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 4;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy 5</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		Fisher.Stop();
		var murlok = Questing.FindUnit(102517);
		if (murlok != null &amp;&amp; murlok.IsValid)
		{
			Fisher.Stop();
			Questing.Attack(murlok);
			return true;
		}
		var p = new Vector3(2426.651, 8407.483, 0.1212897, "None");
		GoToTask.ToPosition(p);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Questing.Scenario.Stage != 5;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Fish Frenzy (Out)</Name>
      <QuestId>
        <int>41010</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="2413.057" Y="8405.411" Z="0.1696858" />
        </HotSpots>
        <EntryIdObjects>
          <int>251116</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return Usefuls.ContinentId != (int)ContinentId.Artifact_Acquisition_Underlight;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Leveling Ocean</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class LevelingOcean : RareFishingOcean
{
	public LevelingOcean()
	{
		Name = "Leveling Ocean";
		QuestId.Add(0);
		Step.AddRange(new[] { 1 });
		waitTimer.ForceReady();
	}
	public override bool Pulse()
	{
		var p = hotspots[0];
		if (!Traveler.TryTaxi((int)ContinentId.Troll_Raid, LegionQuests.ZONE_SURAMAR, p))
			return GoToTask.ToPosition(p);

		if (TrySeabottomSquid())
			return true;

		if (TryAncientBlackBarracuda())
			return true;

		if (TryAxefish())
			return true;

		if (UnderlightAnglerHelper.TryHelpfull())
			return true;

		return FishPools();
	}
	public override bool IsComplete()
	{
		return !ItemsManager.HasItemById(UnderlightAnglerHelper.Items.Artifact);
	}
	public override bool IsCompleted()
	{
		return false;
	}
	public override bool HasQuest()
	{
		return true;
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>camelot10\Libs\Questing.cs
camelot10\Libs\LegionQuests.cs
camelot10\Libs\Fisher.cs
camelot10\Libs\Traveler.cs</Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-776.6266" Y="4435.726" Z="703.2159" />
        <Vector3 X="-783.1953" Y="4441.101" Z="703.7827" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Black Market (from)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-783.6694" Y="4440.39" Z="703.6461" />
        <Vector3 X="-778.1346" Y="4436.097" Z="703.3149" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Black Market (to)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-780.0356" Y="4437.056" Z="703.7189" />
        <Vector3 X="-783.3174" Y="4439.034" Z="703.5004" />
        <Vector3 X="-796.0366" Y="4437.192" Z="706.5587" />
        <Vector3 X="-811.9459" Y="4432.482" Z="709.6345" />
        <Vector3 X="-823.1492" Y="4416.948" Z="713.4684" />
        <Vector3 X="-827.122" Y="4412.614" Z="716.4298" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Black Market (from large)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-830.3829" Y="4414.781" Z="716.4793" />
        <Vector3 X="-815.8631" Y="4428.386" Z="710.6428" />
        <Vector3 X="-808.1042" Y="4435.446" Z="708.7922" />
        <Vector3 X="-794.4507" Y="4437.946" Z="706.1987" />
        <Vector3 X="-786.1071" Y="4438.818" Z="704.621" />
        <Vector3 X="-780.0356" Y="4437.056" Z="703.7189" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Black Market (to large)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-822.595" Y="4419.595" Z="712.5093" />
        <Vector3 X="-826.7533" Y="4412.913" Z="716.4094" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Underbelly stairs (from)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-829.656" Y="4413.698" Z="716.4766" />
        <Vector3 X="-822.1805" Y="4419.967" Z="712.4748" />
      </Path>
      <ContinentId>1502</ContinentId>
      <Name>Dalaran Underbelly stairs (to)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-843.9841" Y="4383.676" Z="737.8307" />
        <Vector3 X="-855.447" Y="4369.695" Z="734.2473" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Dalaran Underbelly (to)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-855.447" Y="4369.695" Z="734.2473" />
        <Vector3 X="-843.2517" Y="4383.728" Z="737.8559" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Dalaran Underbelly (from)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-843.2517" Y="4383.728" Z="737.8559" />
        <Vector3 X="-856.9059" Y="4368.206" Z="733.0692" />
        <Vector3 X="-866.2501" Y="4362.708" Z="729.0615" />
        <Vector3 X="-854.3436" Y="4381.835" Z="722.0797" />
        <Vector3 X="-846.6041" Y="4394.875" Z="717.1717" />
        <Vector3 X="-836.7679" Y="4404.797" Z="716.9105" />
        <Vector3 X="-829.2663" Y="4415.613" Z="716.4191" />
        <Vector3 X="-814.3404" Y="4429.954" Z="710.2437" />
        <Vector3 X="-800.4749" Y="4436.809" Z="707.1942" />
        <Vector3 X="-784.4887" Y="4440.819" Z="704.0045" />
        <Vector3 X="-776.9367" Y="4435.145" Z="703.201" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Dalaran Underbelly to Black Market</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="-776.9367" Y="4435.145" Z="703.201" />
        <Vector3 X="-783.8781" Y="4440.877" Z="703.7769" />
        <Vector3 X="-810.0737" Y="4434.795" Z="708.8624" />
        <Vector3 X="-823.3442" Y="4417.44" Z="713.4695" />
        <Vector3 X="-827.5013" Y="4411.107" Z="716.4847" />
        <Vector3 X="-836.6422" Y="4405.994" Z="716.9789" />
        <Vector3 X="-848.6058" Y="4391.193" Z="716.951" />
        <Vector3 X="-858.9682" Y="4376.713" Z="722.0309" />
        <Vector3 X="-869.2743" Y="4364.068" Z="729.0615" />
        <Vector3 X="-864.6399" Y="4360.099" Z="729.0615" />
        <Vector3 X="-842.5397" Y="4384.847" Z="737.8754" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>Dalaran Underbelly from Black Market</Name>
    </OffMeshConnection>
  </OffMeshConnections>
</EasyQuestProfile>