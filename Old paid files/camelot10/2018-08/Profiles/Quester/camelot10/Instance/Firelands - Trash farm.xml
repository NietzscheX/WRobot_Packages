<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="/* DISABLE STEP IF YOU SET MANUAL DIFFICULTY */  Firelands.Prepare();" />
    <QuestsSorted Action="RunCode" NameClass="/* DISABLE THIS STEP FOR COUNTER-CLOCKWISE PULLS */&#xA;		robotManager.Helpful.Var.SetVar(&quot;Camelot10FirelandsEasyPull&quot;, true);" />
    <QuestsSorted Action="WriteLog" NameClass="--- Start Firelands ---" />
    <QuestsSorted Action="Pulse" NameClass="ToFirelands" />
    <QuestsSorted Action="Pulse" NameClass="Firelands" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsDieIfShannox" />
    <QuestsSorted Action="StepName" NameClass="Loop" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsVendor" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsPull1" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsPull2" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsPull3" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsPull4" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsPull5" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsOutAndReset" />
    <QuestsSorted Action="Pulse" NameClass="FirelandsMoveBack" />
    <QuestsSorted Action="While" NameClass="!Firelands.CanRun" />
    <QuestsSorted Action="WriteLog" NameClass="Reach run limit (max 10 per hour). Wait 1 min" />
    <QuestsSorted Action="Wait" NameClass="60000" />
    <QuestsSorted Action="EndWhile" NameClass="" />
    <QuestsSorted Action="GoToStep" NameClass="Loop" />
    <QuestsSorted Action="WriteLog" NameClass="--- Complete Firelands ---" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="54401" Name="Naresir Stormfury" GameObject="false">
      <PickUpQuests />
      <TurnInQuests />
      <Position X="-530.6389" Y="329.559" Z="115.4723" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="-530.6389" Y="329.559" Z="115.4722" />
      <Entry>54401</Entry>
      <Name>Naresir Stormfury</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Firelands1</ContinentId>
    </Npc>
    <Npc>
      <Position X="-530.6389" Y="329.559" Z="115.4722" />
      <Entry>54401</Entry>
      <Name>Naresir Stormfury</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Firelands1</ContinentId>
    </Npc>
  </Npc>
  <Blackspots>
    <Blackspot X="-119.7428" Y="120.1436" Z="44.34217" Radius="1" />
    <Blackspot X="-264.9505" Y="-123.0977" Z="46.14084" Radius="1.6" />
    <Blackspot X="-312.8366" Y="203.7294" Z="52.25954" Radius="15.22182" />
    <Blackspot X="-507.3624" Y="288.447968" Z="101.208786" Radius="10" />
    <Blackspot X="-501.451233" Y="290.921875" Z="102.649071" Radius="8" />
    <Blackspot X="-488.624023" Y="289.0082" Z="99.77105" Radius="8" />
    <Blackspot X="-483.519684" Y="314.009033" Z="99.8194962" Radius="8" />
    <Blackspot X="-491.564545" Y="325.0438" Z="104.034271" Radius="8" />
    <Blackspot X="-510.651672" Y="298.725861" Z="109.36779" Radius="6" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>+Avoiding</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class Avoiding : QuestClass
{
	public delegate bool BoolDelegate();
	static Thread _avoidThread;
	static List&lt;int&gt; _avoidMobs;
	static BoolDelegate _avoidCondition;
	static int _avoidDelay = 200;

	static void Log(string text)
	{
		Logging.Write("[Avoiding] " + text);
	}

	public static void StartAvoid(List&lt;int&gt; mobs, BoolDelegate condition)
	{
		StopAvoid();
		_avoidMobs = mobs;
		_avoidCondition = condition;
		_avoidThread = new Thread(AvoidThreadLoop);
		_avoidThread.Start();
		wManager.Events.FightEvents.OnFightLoop += AvoidFightLoop;
	}

	public static void StopAvoid()
	{
		if (_avoidThread != null)
			_avoidThread.Abort();

		wManager.Events.FightEvents.OnFightLoop -= AvoidFightLoop;
		_avoidCondition = () =&gt; true;
		_avoidMobs = new List&lt;int&gt;();
	}

	static bool AvoidLogic()
	{
		if (!_avoidCondition())
		{
			StopAvoid();
			return false;
		}
		var range = 50f;
		var mobs = ObjectManager.GetObjectWoWUnit().Where(u =&gt; u != null &amp;&amp; u.IsValid &amp;&amp; u.IsAlive &amp;&amp; u.IsAttackable &amp;&amp; _avoidMobs.Contains(u.Entry) &amp;&amp; u.GetDistance &lt; range).ToList();
		if (mobs.Count &lt; 0)
			return false;

		var deltaSummary = new Vector3();
		foreach (var mob in mobs)
		{
			var delta = mob.Position - ObjectManager.Me.Position;
			var deltaMag = delta.Magnitude();
			var deltaMove = delta / deltaMag * (deltaMag - range);
			deltaSummary += deltaMove;
		}
		if (deltaSummary.MagnitudeSqr() &lt; 5f * 5f)
			return false;

		MovementManager.StopMove();
		var result = false;
		var p = ObjectManager.Me.Position + deltaSummary;
		var path = PathFinder.FindPath(p, out result);
		if (!result)
			return false;

		Log("avoid mobs");
		var oldFood = wManager.wManagerSetting.CurrentSetting.FoodPercent;
		var oldDrink = wManager.wManagerSetting.CurrentSetting.DrinkPercent;
		wManager.wManagerSetting.CurrentSetting.FoodPercent = 1;
		wManager.wManagerSetting.CurrentSetting.DrinkPercent = 1;
		MovementManager.Go(path);
		while (MovementManager.InMovement &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)
		{
			Thread.Sleep(_avoidDelay);
		}
		wManager.wManagerSetting.CurrentSetting.FoodPercent = oldFood;
		wManager.wManagerSetting.CurrentSetting.DrinkPercent = oldDrink;
		MovementManager.StopMove();
		return true;
	}

	static void AvoidThreadLoop()
	{
		while (robotManager.Products.Products.IsStarted)
		{
			if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)
			{
				AvoidLogic();
			}
			Thread.Sleep(_avoidDelay);
		}
	}

	static void AvoidFightLoop(WoWUnit unit, System.ComponentModel.CancelEventArgs cancelable)
	{
		//cancelable.Cancel = true;
		if (AvoidLogic())
		{
			//Logging.Write("figth avoid");
		}
	}



}

</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>+Traveler</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Linq;
using System.Collections.Generic;
using wManager.Wow.Class;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.Threading;
using wManager.Wow.Bot.Tasks;
#endif

public class Traveler : QuestClass
{
	static Traveler()
	{
		ResetSettings();
		Var.SetVar("Cameleto10Traveler", true);
	}
	static void Log(string message)
	{
		Logging.Write("[Traveler] " + message);
	}
	public delegate bool BooleanDelegate();
	public static void ResetSettings()
	{
		var config = wManager.wManagerSetting.CurrentSetting;
		config.CloseIfPlayerTeleported = false;
		config.UseFlyingMount = true;
		config.UseGroundMount = true;
		config.UseMount = true;
		config.IgnoreFightGoundMount = true;
		CVar.SetCVar("autoDismount", "1");
		CVar.SetCVar("autoDismountFlying", "1");
		Conditions.ForceIgnoreIsAttacked = false;
		Log("reset settings");
	}

	public static void UseHeathstone()
	{
		var name = SpellListManager.SpellNameInGameById(94719);
		Lua.RunMacroText("/cast " + name);
		Thread.Sleep(Usefuls.Latency * 2);
		if (ObjectManager.Me.IsCast)
		{
			Log("Heathstoning(" + name + ")");
			Usefuls.WaitIsCasting();
		}
		else if (ItemsManager.HasItemById(6948))
		{
			Log("Heathstoning");
			ItemsManager.UseItem(6948);
			Usefuls.WaitIsCasting();
		}
		else
		{
			Log("WARNING! Dont have Heathstone or The Innkeeper's Daughter");
		}
	}

	public static void UseHeathstoneDalaran()
	{
		if (ItemsManager.HasItemById(140192))
		{
			ItemsManager.UseItem(140192);
			Usefuls.WaitIsCasting();
		}
		else
		{
			Log("WARNING! Dont have " + ItemsManager.GetNameById(140192));
		}
	}


	//VANILLA
	public static bool InCapital
	{
		get
		{
			if (ObjectManager.Me.IsHorde)
			{
				if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
					return false;

				if (Usefuls.AreaId != (int)AreaId.Orgrimmar)
					return false;

				return true;
			}
			else if (ObjectManager.Me.IsAlliance)
			{
				if (Usefuls.ContinentId != (int)ContinentId.Azeroth)
					return false;

				if (Usefuls.AreaId != (int)AreaId.Stormwind)
					return false;

				return true;
			}
			return false;
		}
	}

	public static bool InOrgrimmarCleftOfShadow
	{
		get
		{
			if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
				return false;

			if (Usefuls.AreaId != (int)AreaId.Orgrimmar)
				return false;

			if (ObjectManager.Me.Position.DistanceTo2D(Coords.ORGRIMMAR_CLEFT_OF_SHADOW) &gt; 100)
				return false;

			return ObjectManager.Me.Position.Z &lt; Coords.ORGRIMMAR_CLEFT_OF_SHADOW.Z;
		}
	}

	public static void FromOrgrimmarCleftOfShadow()
	{
		if (InOrgrimmarCleftOfShadow)
			Move(Paths.FROM_ORGRIMMAR_CLEFT_OF_SHADOW, true);
	}

	public static bool InStormwindWizardsSanctum
	{
		get
		{
			if (Usefuls.ContinentId != (int)ContinentId.Azeroth)
				return false;

			if (Usefuls.AreaId != (int)AreaId.Stormwind)
				return false;

			if (ObjectManager.Me.Position.DistanceTo2D(Coords.STORMWIND_WIZARDS_SANCTUM) &gt; 50)
				return false;
			
			return ObjectManager.Me.Position.DistanceZ(Coords.STORMWIND_WIZARDS_SANCTUM) &lt; 10;
		}
	}

	public static void FromStormwindWizardsSanctum()
	{
		MoveClick(Coords.STORMWIND_WIZARDS_SANCTUM_MOVEOUT, () =&gt; InStormwindWizardsSanctum);
		//if (!InStormwindWizardsSanctum)
		Move(Paths.FROM_STORMWIND_WIZARDS_SANCTUM, true);
	}

	public static void ToCapital()
	{
		if (InCapital)
		{
			if (InStormwindWizardsSanctum)
			{
				FromStormwindWizardsSanctum();
			}
			Log("im in faction capital");
		}
		else if (InPandariaShrine)
		{
			Log("im in pandaria. going to capital portal");
			if (ObjectManager.Me.IsHorde)
				Portals.PANDARIA_ORGRIMMAR.Use();
			else
				Portals.PANDARIA_STORMWIND.Use();
		}
		else if (InBrokenIslesDalaran)
		{
			Log("im in dalaran. going to capital portal");
			if (ObjectManager.Me.IsHorde)
				Portals.BROKENISLES_ORGRIMMAR.Use();
			else
				Portals.BROKENISLES_STORMWIND.Use();
		}
		else
		{
			Log("im somewhere else. heath to dalaran");
			ToBrokenIslesDalaran();
		}
	}

	//OUTLANDS
	public static bool InOutlands
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.Expansion01;
		}
	}

	public static bool InShattrath
	{
		get
		{
			if (!InOutlands)
				return false;
			return Usefuls.AreaId == (int)AreaId.Shattrath;
		}
	}

	public static void ToShattrath()
	{
		if (InShattrath)
		{
			Log("im in shattrath");
		}
		else if (InPandariaShrine)
		{
			Log("im in pandaria. going to shattrath portal");
			if (ObjectManager.Me.IsHorde)
				Portals.PANDARIA_SHATTRATH_HORDE.Use();
			else
				Portals.PANDARIA_SHATTRATH_ALLIANCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToPandariaShrine();
		}
	}

	public static bool InQuelDanas
	{
		get
		{
			if (!InOutlands)
				return false;

			return Usefuls.AreaId == (int)AreaId.QuelDanas;
		}
	}

	public static void ToQuelDanas()
	{
		if (InQuelDanas)
		{
			Log("im in Quel Danas");
		}
		else if (InShattrath)
		{
			Log("im in Shattrath. going to Quel Danas portal");
			Portals.SHATTRATH_QUELDANAS.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToShattrath();
		}
	}


	// NORTHREND
	public static bool InNorthrend
	{
		get
		{
			return (Usefuls.ContinentId == (int)ContinentId.Northrend);
		}
	}

	public static bool InNorthrendDalaran
	{
		get
		{
			if (!InNorthrend)
				return false;

			return (Usefuls.AreaId == (int)AreaId.DalaranNorthrend);
		}
	}

	public static void ToNorthrendDalaran()
	{
		if (InNorthrendDalaran)
		{
			Log("im in northrend dalaran");
		}
		else if (InPandariaShrine)
		{
			Log("im in pandaria. going to northrend dalaran portal");
			if (ObjectManager.Me.IsHorde)
				Portals.PANDARIA_DALARAN_NORTHREND_HORDE.Use();
			else
				Portals.PANDARIA_DALARAN_NORTHREND_ALLIANCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToPandariaShrine();
		}
	}

	// PANDARIA
	public static bool InPandaria
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.HawaiiMainLand;
		}
	}

	public static bool InPandariaShrine
	{
		get
		{
			if (!InPandaria)
				return false;

			if (ObjectManager.Me.IsHorde)
				return Usefuls.AreaId == (int)AreaId.PandariaShrineHorde || Usefuls.AreaId == (int)AreaId.PandariaShrineHordeNear;
			else
				return Usefuls.AreaId == (int)AreaId.PandariaShrineAlliance || Usefuls.AreaId == (int)AreaId.PandariaShrineAllianceNear;
		}
	}

	public static void ToPandariaShrine()
	{
		if (InPandariaShrine)
		{
			Log("im in pandaria shrine");
		}
		else if (InBrokenIslesDalaran)
		{
			Log("im in dalaran. going to pandaria portal");
			if (ObjectManager.Me.IsHorde)
				Portals.BROKENISLES_PANDARIA_HORDE.Use();
			else
				Portals.BROKENISLES_PANDARIA_ALLAINCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in dalaran");
			ToBrokenIslesDalaran();
		}
	}

	public static void ToPandaria()
	{
		if (!InPandaria)
			ToPandariaShrine();
	}


	// LEGION
	public static bool IsInBrokenIsles
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.Troll_Raid;
		}
	}

	public static bool InBrokenIslesDalaran
	{
		get
		{
			if (!IsInBrokenIsles)
				return false;
			return (Usefuls.AreaId == (int)AreaId.DalaranBrokenIsles);
		}
	}

	public static void ToBrokenIsles()
	{
		if (!IsInBrokenIsles)
			ToBrokenIslesDalaran();
	}

	public static void ToBrokenIslesDalaran()
	{
		if (!InBrokenIslesDalaran)
		{
			Log("im not in broken isles dalaran. using dalaran heathstone");
			UseHeathstoneDalaran();
		}
	}

	public static class Portals
	{
		//neutral
		public static PortalInfo NORTHREND_CAVERNSOFTIME = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 193604);
		public static PortalInfo SHATTRATH_QUELDANAS = new PortalInfo(Coords.SHATTRATH, 187056);

		//horde
		public static PortalInfo ORGRIMMAR_OUTLANDS = new PortalInfo(new Vector3(1795.887, -4282.674, 7.395189, "None"), 195142);
		public static PortalInfo ORGRIMMAR_BLASTEDLANDS = new PortalInfo(new Vector3(1777.066, -4328.517, -7.984149, "None"), 235877);
		public static PortalInfo ORGRIMMAR_HYJAL = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207688);
		public static PortalInfo ORGRIMMAR_VASHJIR = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207690);
		public static PortalInfo ORGRIMMAR_DEEPHOLM = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207689);
		public static PortalInfo ORGRIMMAR_ULDUM = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207687);
		public static PortalInfo ORGRIMMAR_TWILIGHTHIGHLANDS = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207686);
		public static PortalInfo ORGRIMMAR_TOLBARAD = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 206595);

		public static PortalInfo PANDARIA_ORGRIMMAR = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215127);
		public static PortalInfo PANDARIA_UNDERCITY = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215124);
		public static PortalInfo PANDARIA_THUNDERBLUFF = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215125);
		public static PortalInfo PANDARIA_SILVERMOON = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215126);
		public static PortalInfo PANDARIA_SHATTRATH_HORDE = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215113);
		public static PortalInfo PANDARIA_DALARAN_NORTHREND_HORDE = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215112);

		public static PortalInfo BROKENISLES_ORGRIMMAR = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246001);
		public static PortalInfo BROKENISLES_UNDERCITY = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246000);
		public static PortalInfo BROKENISLES_THUNDERBLUFF = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 245999);
		public static PortalInfo BROKENISLES_SILVERMOON = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246004);
		public static PortalInfo BROKENISLES_PANDARIA_HORDE = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246007);

		//alliance
		public static PortalInfo STORMWIND_OUTLANDS = new PortalInfo(new Vector3(-8996.93, 860.6223, 29.6206, "None"), 195141);
		public static PortalInfo STORMWIND_BLASTEDLANDS = new PortalInfo(new Vector3(-9002.964, 868.8864, 129.6928, "None"), 235882);
		public static PortalInfo STORMWIND_HYJAL = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207692);
		public static PortalInfo STORMWIND_VASHJIR = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207691);
		public static PortalInfo STORMWIND_DEEPHOLM = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207693);
		public static PortalInfo STORMWIND_ULDUM = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207695);
		public static PortalInfo STORMWIND_TWILIGHTHIGHLANDS = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207694);
		public static PortalInfo STORMWIND_TOLBARAD = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 206594);

		public static PortalInfo PANDARIA_STORMWIND = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215119);
		public static PortalInfo PANDARIA_IRONFORGE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215118);
		public static PortalInfo PANDARIA_DARNASSUS = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215116);
		public static PortalInfo PANDARIA_EXODAR = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215117);
		public static PortalInfo PANDARIA_SHATTRATH_ALLIANCE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215120);
		public static PortalInfo PANDARIA_DALARAN_NORTHREND_ALLIANCE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215121);

		public static PortalInfo BROKENISLES_STORMWIND = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246002);
		public static PortalInfo BROKENISLES_IRONFORGE = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 245998);
		public static PortalInfo BROKENISLES_DARNASSUS = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 245997);
		public static PortalInfo BROKENISLES_EXODAR = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246003);
		public static PortalInfo BROKENISLES_PANDARIA_ALLAINCE = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246006);
	}

	public static class Coords
	{
		public static Vector3 SHATTRATH = new Vector3(-1863.39, 5430.373, -5.049042, "Flying");

		public static Vector3 CATACLYSM_PORTALS_HORDE = new Vector3(2048.193, -4377.466, 102.8623, "Flying");
		public static Vector3 CATACLYSM_PORTALS_ALLIANCE = new Vector3(-8206.709, 427.2209, 125.7481, "Flying");

		public static Vector3 PANDARIA_PORTALS_HORDE = new Vector3(1729.32, 888.9265, 487.119, "None");
		public static Vector3 PANDARIA_PORTALS_ALLIANCE = new Vector3(815.691, 182.3423, 519.6915, "None");

		public static Vector3 BROKENISLES_PORTALS_HORDE = new Vector3(-714.7886, 4406.515, 727.0811, "None");
		public static Vector3 BROKENISLES_PORTALS_ALLIANCE = new Vector3(-927.9012, 4565.281, 729.2716, "None");

		public static Vector3 STORMWIND_WIZARDS_SANCTUM = new Vector3(-9002.968, 869.1647, 29.6207, "None");
		public static Vector3 STORMWIND_WIZARDS_SANCTUM_MOVEOUT = new Vector3(-9026.567, 897.5941, 29.62126, "None");

		public static Vector3 ORGRIMMAR_CLEFT_OF_SHADOW = new Vector3(1803.223, -4338.04, 52.32072, "Flying");

		// instances
		public static Vector3 BLACKTEMPLE_NEAR = new Vector3(-3632.671, 317.9774, 45.54625, "Flying");
		public static Vector3 BLACKTEMPLE_MOVEIN = new Vector3(-3665.674, 319.7783, 34.85582, "None");

		public static Vector3 FIRELANDS_NEAR = new Vector3(4009.115, -2989.421, 1054.373, "Flying");
		public static Vector3 FIRELANDS_MOVEIN = new Vector3(3977.269, -2917.31, 1002.547, "None");
		public static Vector3 FIRELANDS_MOVEOUT = new Vector3(-574.0074, 333.0068, 115.484, "None");
		public static Vector3 FIRELANDS_NEAR_EXIT = new Vector3(-551.6964, 321.0503, 115.4774, "None");

		public static Vector3 SUNWELLPLATEAU_NEAR = new Vector3(12561.39, -6774.708, 15.09085, "None");
		public static Vector3 SUNWELLPLATEAU_MOVEIN = new Vector3(12542.34, -6777.375, 14.99986, "None");
	}

	public static class Instances
	{
		public static bool InBlackTemple
		{
			get
			{
				return Usefuls.ContinentId == (int)ContinentId.BlackTemple;
			}
		}

		public static void ToBlackTemple()
		{
			if (InBlackTemple)
			{
				Log("Im in Black Temple");
			}
			else if (NearBlackTemple)
			{
				Log("Im near Black Temple, going inside");
				GoToTask.ToPosition(Coords.BLACKTEMPLE_MOVEIN);
			}
			else
			{
				ToBlackTempleNear();
			}
		}

		public static bool NearBlackTemple
		{
			get
			{
				if (InBlackTemple)
					return true;
				if (!InOutlands)
					return false;

				return ObjectManager.Me.Position.DistanceTo2D(Coords.BLACKTEMPLE_NEAR) &lt; 500;
			}
		}

		public static void ToBlackTempleNear()
		{
			uint teleportMedalion = 32757;  //http://www.wowhead.com/item=32757/blessed-medallion-of-karabor
			if (InBlackTemple || NearBlackTemple)
			{
				Log("Im in Black Temple or near");
			}
			else if (ItemsManager.HasItemById(teleportMedalion))
			{
				Log("Equipping teleport item");
				ItemsManager.EquipItemByName(ItemsManager.GetNameById(teleportMedalion));
				Thread.Sleep(35 * 1000);
				Log("Teleporting to Black Temple");
				ItemsManager.UseItem(teleportMedalion);
				Usefuls.WaitIsCasting();
			}
			else if (InOutlands)
			{
				Log("Im in Outlands. Moving near Black Temple");
				GoToTask.ToPosition(Coords.BLACKTEMPLE_NEAR);
			}
			else
			{
				Log("Im in somewhere else. Go to Shattrath");
				ToShattrath();
				Thread.Sleep(10 * 1000);
				ToBlackTempleNear();
			}
		}

		// sunwell
		public static bool InSunwell
		{
			get
			{
				return Usefuls.ContinentId == (int)ContinentId.SunwellPlateau;
			}
		}

		public static void ToSunwell()
		{
			if (InSunwell)
			{
				Log("Im in Sunwell");
			}
			else if (InQuelDanas)
			{
				Log("Im in Quel Danas, goin to sunwell");
				GoToTask.ToPosition(Coords.SUNWELLPLATEAU_MOVEIN);
			}
			else
			{
				ToQuelDanas();
			}
		}

		public static bool InFirelands
		{
			get
			{
				return Usefuls.ContinentId == (int)ContinentId.Firelands1;
			}
		}
		public static bool InFirelandsNear
		{
			get
			{
				if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
					return false;

				return ObjectManager.Me.Position.DistanceTo2D(Coords.FIRELANDS_NEAR) &lt; 100;
			}
		}

		public static bool InFirelandsFlyingDistance
		{
			get
			{
				if (Usefuls.ContinentId != (int)ContinentId.Kalimdor)
					return false;

				return ObjectManager.Me.Position.DistanceTo2D(Coords.FIRELANDS_NEAR) &lt; 1800;
			}
		}

		public static void ToFirelandsNear()
		{
			if (InFirelandsNear)
			{
				Log("im near firelands");
			}
			else if (InFirelands)
			{
				Log("im in firelands. move out");
				if (GoToTask.ToPosition(Coords.FIRELANDS_NEAR_EXIT))
				{
					MoveClick(Coords.FIRELANDS_MOVEOUT, () =&gt; InFirelands);
				}
			}
			else if (InFirelandsFlyingDistance)
			{
				Log("im in flying distance to firelands. fly");
				MountTask.Mount(true, MountTask.MountCapacity.Fly);
				Usefuls.WaitIsCasting();
				LongMove.LongMoveGo(Coords.FIRELANDS_NEAR);
			}
			else if (InStormwindWizardsSanctum)
			{
				Log("in stormwind wizards sanctum. moveout");
				FromStormwindWizardsSanctum();
			}
			else if (InOrgrimmarCleftOfShadow)
			{
				Log("in orgrimmar cleft of shadows. moveout");
				FromOrgrimmarCleftOfShadow();
			}
			else if (InCapital)
			{
				Log("im in capital. use port to hyjal");
				if (ObjectManager.Me.IsHorde)
				{
					Portals.ORGRIMMAR_HYJAL.Use();
				}
				else if (ObjectManager.Me.IsAlliance)
				{
					Portals.STORMWIND_HYJAL.Use();
				}
			}

			else
			{
				Log("im somewhere esle. travel to capital");
				ToCapital();
			}
		}
		public static void ToFirelands()
		{
			if (InFirelands)
			{
				Log("im in firelands");
			}
			else if (InFirelandsNear)
			{
				Log("in near firelands. move in");
				if (GoToTask.ToPosition(Coords.FIRELANDS_NEAR))
				{
					MoveClick(Coords.FIRELANDS_MOVEIN, () =&gt; !InFirelands);
				}
			}
			else
			{
				Log("im too far from firelands entrace. start travel");
				ToFirelandsNear();
			}
		}

	}

	public enum AreaId
	{
		Stormwind = 1519,
		Orgrimmar = 1637,
		QuelDanas = 4080,
		Shattrath = 3703,
		DalaranNorthrend = 4395,
		DalaranBrokenIsles = 7502,
		PandariaShrineAlliance = 6553, //alliance PandariaShrineOfSevenStars
		PandariaShrineAllianceNear = 6142,
		PandariaShrineHorde = 6141, //horde PandariaShrineOfTwoMoons
		PandariaShrineHordeNear = 6554,
	}

	public class PortalInfo
	{
		public Vector3 position;
		public int objectId;
		public PortalInfo(Vector3 pos, int id)
		{
			position = pos;
			objectId = id;
		}

		public void Use()
		{
			GoToTask.ToPosition(position);
			MountTask.DismountMount();
			GoToTask.ToPositionAndIntecractWithGameObject(position, objectId);
		}
	}

	public static void FindEntrancePoint(Vector3 p1, Vector3 p2, float distance = 10f)
	{
		var delta = new Vector3(p2.X - p1.X, p2.Y - p1.Y, p2.Z - p1.Z);
		delta *= distance;
		var p3 = p2 + delta;
		Logging.Write("ENTRANCE POINT CALCULATED: " + p3.ToStringNewVector());
	}

	public static void Move(List&lt;Vector3&gt; path, bool ignoreFight = false)
	{
		var oldIgnore = Conditions.ForceIgnoreIsAttacked;
		if (ignoreFight)
			Conditions.ForceIgnoreIsAttacked = true;

		MovementManager.Go(path);
		while (MovementManager.InMovement &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
		{
			Thread.Sleep(1000);
		}
		MovementManager.StopMove();
		if (ignoreFight)
			Conditions.ForceIgnoreIsAttacked = oldIgnore;
	}

	public static void MoveClick(Vector3 p, BooleanDelegate condition)
	{
		while (condition() &amp;&amp; Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; !Conditions.IsAttackedAndCannotIgnore)
		{
			ClickToMove.CGPlayer_C__ClickToMove(p.X, p.Y, p.Z, MemoryRobot.Int128.Zero(), (int)ClickToMoveType.Move, 0.5f);
			Thread.Sleep(Others.Random(500, 1000));
		}
	}

	public static class Paths
	{
		public static List&lt;Vector3&gt; FROM_STORMWIND_WIZARDS_SANCTUM = new List&lt;Vector3&gt;()
		{
			/*
			new Vector3(-9001.922f, 865.5825f, 29.6207f, "None"),
			new Vector3(-9005.982f, 871.1793f, 29.6207f, "None"),
			new Vector3(-9008.735f, 874.5976f, 29.6207f, "None"),
			new Vector3(-9011.387f, 877.7703f, 29.6207f, "None"),
			new Vector3(-9014.041f, 881.1155f, 29.6207f, "None"),
			new Vector3(-9016.631f, 884.5637f, 29.6207f, "None"),
			new Vector3(-9019.104f, 887.9193f, 29.6207f, "None"),
			new Vector3(-9026.567, 897.5941, 29.62126, "None"),
			//*/
			new Vector3(-9014.817f, 873.1132f, 148.616f, "None"),
			new Vector3(-9010.438f, 867.6962f, 146.6526f, "None"),
			new Vector3(-9006.62f, 866.3571f, 144.4889f, "None"),
			new Vector3(-9002.92f, 868.4304f, 142.4687f, "None"),
			new Vector3(-9001.925f, 872.3652f, 140.3814f, "None"),
			new Vector3(-9003.929f, 876.0081f, 138.1437f, "None"),
			new Vector3(-9007.757f, 877.5584f, 135.8545f, "None"),
			new Vector3(-9011.72f, 876.3581f, 133.723f, "None"),
			new Vector3(-9013.243f, 872.8591f, 131.9229f, "None"),
			new Vector3(-9011.952f, 868.4532f, 129.693f, "None"),
			new Vector3(-9008.784f, 866.3384f, 129.693f, "None"),
			new Vector3(-9004.449f, 866.1371f, 129.693f, "None"),
			new Vector3(-9000.804f, 863.9247f, 129.7348f, "None"),
			new Vector3(-8997.371f, 861.7692f, 128.6832f, "None"),
			new Vector3(-8993.456f, 859.9705f, 127.2438f, "None"),
		};

		public static List&lt;Vector3&gt; FROM_ORGRIMMAR_CLEFT_OF_SHADOW = new List&lt;Vector3&gt;() {
			new Vector3(1798.946f, -4328.533f, 6.080236f, "Flying"),
			new Vector3(1795.875f, -4326.814f, 4.42988f, "Flying"),
			new Vector3(1788.084f, -4323.274f, 4.315794f, "Flying"),
			new Vector3(1780.843f, -4319.252f, 7.231764f, "Flying"),
			new Vector3(1773.653f, -4314.912f, 10.35413f, "Flying"),
			new Vector3(1766.67f, -4310.563f, 13.17553f, "Flying"),
			new Vector3(1759.578f, -4306.144f, 15.76818f, "Flying"),
			new Vector3(1752.618f, -4301.647f, 18.10365f, "Flying"),
			new Vector3(1745.847f, -4296.484f, 20.44409f, "Flying"),
			new Vector3(1740.664f, -4290.052f, 22.76319f, "Flying"),
			new Vector3(1737.333f, -4282.413f, 25.06974f, "Flying"),
			new Vector3(1737.57f, -4273.992f, 27.55037f, "Flying"),
			new Vector3(1741.313f, -4266.48f, 30.38848f, "Flying"),
			new Vector3(1746.693f, -4260.58f, 33.45964f, "Flying"),
			new Vector3(1752.511f, -4254.991f, 36.44896f, "Flying"),
			new Vector3(1759.369f, -4249.647f, 38.80262f, "Flying"),
			new Vector3(1766.323f, -4245.21f, 41.20506f, "Flying"),
			new Vector3(1773.845f, -4241.246f, 43.55302f, "Flying"),
			new Vector3(1781.69f, -4238.302f, 45.98756f, "Flying"),
			new Vector3(1789.658f, -4236.031f, 48.74838f, "Flying"),
			new Vector3(1797.713f, -4234.384f, 51.27284f, "Flying"),
			new Vector3(1806.21f, -4234.676f, 53.8224f, "Flying"),
			new Vector3(1814.394f, -4236.033f, 57.01455f, "Flying"),
			new Vector3(1822.626f, -4237.836f, 59.20106f, "Flying"),
			new Vector3(1830.885f, -4239.79f, 61.1441f, "Flying"),
			new Vector3(1838.647f, -4242.108f, 64.10677f, "Flying"),
			new Vector3(1846.689f, -4244.944f, 66.61571f, "Flying"),
			new Vector3(1854.57f, -4247.742f, 69.00578f, "Flying"),
			new Vector3(1860.569f, -4249.872f, 74.85528f, "Flying"),
			new Vector3(1865.012f, -4251.451f, 81.6699f, "Flying"),
		};

	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>To Firelands</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class ToFirelands : QuestClass
{
	public ToFirelands()
	{
		Name = "To Firelands";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return Traveler.Instances.InFirelands;
	}
	public override bool Pulse()
	{
		Traveler.Instances.ToFirelands();
		Thread.Sleep(1 * 1000);
		return true;
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class Firelands : QuestClass
{
	static int _ShannoxId = 53691;
	static int _Rageface = 53695;
	static int _Riplimb = 53694;
	static robotManager.Helpful.Timer _Timer = new robotManager.Helpful.Timer(60 * 60 * 1000); //1 hour reset timer
	static int _ResetAmount = 0;
	static int _MaxResetAmount = 10;
	static List&lt;int&gt; _AvoidMobs = new List&lt;int&gt;()
	{
		_ShannoxId,
		_Rageface,
		_Riplimb,
	};
	bool _complete = false;

	public Firelands()
	{
		Name = "Firelands";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		ChangeSettings();
	}
	static void Log(string text)
	{
		Logging.Write("[Firelands] " + text);
	}
	public override bool Pulse()
	{
		_Timer.Reset();
		ResetAmount = 0;
		Avoiding.StartAvoid(_AvoidMobs, () =&gt; true);
		_complete = true;
		Log("ready");
		return true;
	}
	public static int ResetAmount
	{
		get
		{
			return _ResetAmount;
		}
		set
		{
			_ResetAmount = value;
		}
	}
	public static bool CanRun
	{
		get
		{
			wManager.Wow.Bot.States.AntiAfk.Pulse();
			if (_Timer.IsReady)
			{
				_Timer.Reset();
				ResetAmount = 0;
				Log("Timer reset. reset amount=0");
				return true;
			}
			if (ResetAmount &lt; _MaxResetAmount)
			{
				return true;
			}
			return false;
		}
	}

	public static bool ResetInstances()
	{
		Lua.LuaDoString("ResetInstances();");
		ResetAmount += 1;
		Log("reset instances. count=" + ResetAmount);
		return true;
	}
	public static bool Prepare()
	{
		if (!Traveler.Instances.InFirelands)
		{
			Lua.LuaDoString("SetLegacyRaidDifficultyID(6); SetRaidDifficultyID(6);");
			Log("Raid difficulty (25 Heroic)");
		}
		return true;
	}

	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return _complete;
	}
	static void ChangeSettings()
	{
		/*
		wManager.wManagerSetting.AddBlackListNpcEntry(_ShannoxId, true);
		wManager.wManagerSetting.AddBlackListNpcEntry(_Rageface, true);
		wManager.wManagerSetting.AddBlackListNpcEntry(_Riplimb, true);
		//*/
		wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 999;
		wManager.wManagerSetting.CurrentSetting.FoodPercent = 35;
		wManager.wManagerSetting.CurrentSetting.DrinkPercent = 35;
		wManager.wManagerSetting.CurrentSetting.SkinMobs = false;
		wManager.wManagerSetting.CurrentSetting.SkinNinja= false;
		wManager.wManagerSetting.CurrentSetting.LootChests = true;
		wManager.wManagerSetting.CurrentSetting.LootMobs = true;
		wManager.wManagerSetting.CurrentSetting.SearchRadius = 70f;
		wManager.wManagerSetting.CurrentSetting.MailGray = false;
		wManager.wManagerSetting.CurrentSetting.MailWhite = false;
		wManager.wManagerSetting.CurrentSetting.MailGreen = false;
		wManager.wManagerSetting.CurrentSetting.MailBlue = false;
		wManager.wManagerSetting.CurrentSetting.MailPurple = false;
		wManager.wManagerSetting.CurrentSetting.SellGray = true;
		wManager.wManagerSetting.CurrentSetting.SellWhite = true;
		wManager.wManagerSetting.CurrentSetting.SellGreen = true;
		wManager.wManagerSetting.CurrentSetting.SellBlue = true;
		wManager.wManagerSetting.CurrentSetting.SellPurple = true;
		wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 2;
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(6948)); //Hearthstone
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(110560)); //Garrison Hearthstone
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(110560)); //Garrison Hearthstone
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(140192)); //Dalaran Hearthstone
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(68729)); //Elementium Lockbox
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(58488)); //Potion of Treasure Finding
		wManager.wManagerSetting.CurrentSetting.DoNotSellList.Add(ItemsManager.GetNameById(109167)); //Findle's Loot-A-Rang

		Log("change settings");
	}
	static void ResetSettings()
	{
		Log("reset settings");
	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands (Die If Shannox)</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class FirelandsDieIfShannox : QuestClass
{
	static int _ShannoxId = 53691;
	static int _Rageface = 53695;
	static int _Riplimb = 53694;
	static List&lt;int&gt; _AvoidMobs = new List&lt;int&gt;()
	{
		_ShannoxId,
		_Rageface,
		_Riplimb,
	};
	static Vector3 _startPosition = new Vector3(-240.9938, -107.7684, 44.63403, "None");
	static Vector3 _diePosition = new Vector3(-245.4539, -142.4128, 33.16599, "Swimming");

	public FirelandsDieIfShannox()
	{
		Name = "Firelands (Die If Shannox)";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	public static void StartAvoidShannox()
	{
		StopAvoidShannox();
		wManager.Events.FightEvents.OnFightLoop += AvoidShannoxFightLoop;
	}

	public static void StopAvoidShannox()
	{
		wManager.Events.FightEvents.OnFightLoop -= AvoidShannoxFightLoop;
	}

	static void AvoidShannoxFightLoop(WoWUnit unit, System.ComponentModel.CancelEventArgs cancelable)
	{
		var mobs = ObjectManager.GetUnitAttackPlayer().Where(u =&gt; u != null &amp;&amp; u.IsValid &amp;&amp; u.IsAlive &amp;&amp; u.IsAttackable &amp;&amp; _AvoidMobs.Contains(u.Entry)).ToList();
		if (mobs.Count &lt; 0)
			return;

		cancelable.Cancel = true;
		GoAndDie();
	}

	static void GoAndDie()
	{
		if (ObjectManager.Me.Position.DistanceTo(_diePosition) &lt; 5)
			return;

		Fight.StopFight();
		Interact.InteractGameObject(ObjectManager.Me.GetBaseAddress);
		MovementManager.StopMove();
		if (GoToTask.ToPosition(_startPosition))
		{
			ClickToMove.CGPlayer_C__ClickToMove(_diePosition.X, _diePosition.Y, _diePosition.Z, MemoryRobot.Int128.Zero(), (int)wManager.Wow.Enums.ClickToMoveType.Move, 0.5f);
			Thread.Sleep(Others.Random(5000, 6000));
		}
	}

	public override bool Pulse()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return true;
	}
	public override bool HasQuest()
	{
		StartAvoidShannox();
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Vendor</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class FirelandsVendor : QuestClass
{

	List&lt;uint&gt; _destoyList = new List&lt;uint&gt;() {
		52371,52378,52385,52365,52374,52376,52383,52368,52388,52386,52375,52382,52364,52370,52367,52377,52372,52363,52366,52379,69820,52369,52373
	};
	bool _complete = false;

	public FirelandsVendor()
	{
		Name = "Firelands Vendor";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		if (_complete)
		{
			_complete = false;
			return true;
		}
		return false;
	}
	public static void RemoveItem(uint itemID)
	{
		var lua = @"
for i=0,4 do
	for j=1,36 do
		if GetContainerItemID(i,j) == {0} then
			PickupContainerItem(i,j)
			DeleteCursorItem();
			return
		end
	end
end
";
		var runCode = string.Format(lua, itemID);
		Lua.LuaDoString(runCode);
	}
	public override bool Pulse()
	{
		//if we resurrect outside instance
		if (!Traveler.Instances.InFirelands)
		{
			Traveler.Instances.ToFirelands();
			return true;
		}

		foreach (var itemID in _destoyList)
		{
			while (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause &amp;&amp; ItemsManager.HasItemById(itemID))
			{
				RemoveItem(itemID);
				Thread.Sleep(Others.Random(300, 600));
			}
		}
		if (Bag.GetContainerNumFreeSlots &lt;= 32)
		{
			wManager.Wow.Bot.States.ToTown.ForceToTown = true;
			return true;
		}
		_complete = true;
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Pull1</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsPull1 : QuestClass
{
	protected List&lt;Vector3&gt; _path;
	protected uint _spellPotionofTreasureFinding = 80263;
	protected uint _itemPotionofTreasureFinding = 58488;
	protected int _waypoint = 0;
	protected string _varName = "Camelot10FirelandsEasyPull";
	protected List&lt;Vector3&gt; _path1 = new List&lt;Vector3&gt;()
	{
		new Vector3(-493.2202, 302.3456, 105.338, "None"), //important point near entrance. avoid fall
		new Vector3(-336.799, 161.749, 47.80421),
		new Vector3(-301.8751, 121.1135, 45.02083),
		new Vector3(-354.6057, 29.67383, 48.60788),
		new Vector3(-404.3139, 29.42205, 45.78165),
		new Vector3(-383.7891, 71.76392, 45.83294),
		new Vector3(-389.9401, 74.78466, 45.83452),
		new Vector3(-370.5906, 129.7106, 47.3502),
		new Vector3(-331.3271, 73.77871, 46.15749),
	};
	protected List&lt;Vector3&gt; _path2 = new List&lt;Vector3&gt;()
	{
		new Vector3(-493.2202, 302.3456, 105.338, "None"), //important point near entrance. avoid fall
		new Vector3(-405.882, 228.1667, 56.48915, "None"),
		new Vector3(-377.6621, 178.9082, 52.65881, "None"),
		new Vector3(-369.6185, 129.2119, 47.27593, "None"),
		new Vector3(-335.9153, 80.73583, 46.15788, "None"),
		new Vector3(-356.2693, 29.26686, 48.47112, "None"),
		new Vector3(-404.0132, 33.34129, 45.47613, "None"),
		new Vector3(-386.1392, 78.20288, 45.8329, "None"),
	};
	public FirelandsPull1()
	{
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		Name = "Firelands Pull1";
	}
	void EnableHardPullSnippet()
	{
		/* DISABLE THIS STEP FOR COUNTER-CLOCKWISE PULLS */
		robotManager.Helpful.Var.SetVar("Camelot10FirelandsEasyPull", true);
	}
	protected void Log(string text)
	{
		//Logging.Write("[" + Name + "] " + text);
	}
	public override bool Pulse()
	{
		//if we resurrect outside instance
		if (!Traveler.Instances.InFirelands)
		{
			Traveler.Instances.ToFirelands();
			return true;
		}

		Conditions.ForceIgnoreIsAttacked = true;
		MountTask.Mount(true, MountTask.MountCapacity.Ground);
		for (var i = _waypoint; i &lt; _path.Count; i++)
		{
			var p = _path[i];
			Log("go ["+i+"] =&gt;" + p);
			if (GoToTask.ToPosition(p, 3.5f, false, (c) =&gt; {
				if (ObjectManager.Me.HealthPercent &lt; 35 || !ObjectManager.Me.IsMounted)
				{
					Conditions.ForceIgnoreIsAttacked = false;
					return false;
				}
				return true;
			}))
			{
				_waypoint += 1;
				continue;
			}
		}
		if (ItemsManager.HasItemById(_itemPotionofTreasureFinding) &amp;&amp; !ObjectManager.Me.HaveBuff(_spellPotionofTreasureFinding))
		{
			ItemsManager.UseItem(_itemPotionofTreasureFinding);
			Thread.Sleep(Others.Random(300, 600));
		}
		MountTask.DismountMount();
		Conditions.ForceIgnoreIsAttacked = false;
		wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
		var lootables = ObjectManager.GetObjectWoWUnit().Where(u =&gt; u != null &amp;&amp; u.IsValid &amp;&amp; u.IsLootable).ToList();
		if (lootables != null &amp;&amp; lootables.Count &gt; 0)
		{
			LootingTask.Pulse(lootables);
		}
		return true;
	}
	public override bool IsComplete()
	{
		if (_waypoint &gt;= _path.Count)
		{
			_waypoint = 0;
			return true;
		}
		return false;
	}
	public override bool HasQuest()
	{
		_path = Var.Exist(_varName) ? _path2 : _path1;
		return true;
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Pull2</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsPull2 : FirelandsPull1
{
	public FirelandsPull2()
	{
		Name = "Firelands Pull2";
		_path1 = new List&lt;Vector3&gt;()
		{
			new Vector3(-320.2284, 54.81645, 46.15767),
			new Vector3(-305.2339, -7.118773, 46.15768),
			new Vector3(-319.3459, -54.72369, 46.15768),
			new Vector3(-292.2993, -109.8216, 45.90536),
		};
		_path2 = new List&lt;Vector3&gt;()
		{
			new Vector3(-336.1854, 169.0866, 51.64236, "None"),
			new Vector3(-340.414, 152.476, 45.46074, "None"),
			new Vector3(-302.7691, 109.186, 45.00424, "None"),
			new Vector3(-285.3403, 162.4333, 47.94497, "None"),
			new Vector3(-293.1626, 202.8223, 49.84139, "None"),
			new Vector3(-274.3999, 257.5998, 45.47581, "None"),
			new Vector3(-159.8459, 222.4504, 45.30936, "None"),
		};
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Pull3</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsPull3 : FirelandsPull1
{

	public FirelandsPull3()
	{
		Name = "Firelands Pull3";
		_path1 = new List&lt;Vector3&gt;()
		{
			new Vector3(-320.7712, -146.4267, 44.63953),
			new Vector3(-283.1603, -128.1539, 45.40973),
			new Vector3(-250.8044, -167.0706, 54.43877),
			new Vector3(-228.0105, -209.8891, 53.30191),
			new Vector3(-224.2337, -247.4816, 53.25644),
			new Vector3(-221.2656, -280.8629, 53.30132),
			new Vector3(-170.4689, -257.2387, 55.59405),
			new Vector3(-142.5069, -201.5208, 53.30188),
			new Vector3(-195.676, -188.1827, 53.3019),
		};
		_path2 = new List&lt;Vector3&gt;()
		{
			new Vector3(-127.8154, 158.1351, 45.76446),
			new Vector3(-72.16676, 144.2178, 44.10285),
			new Vector3(-127.4155, 140.4366, 45.33023),
			new Vector3(-136.5171, 141.2231, 46.08343),
			new Vector3(-155.4337, 122.823, 44.72004),
			new Vector3(-162.7051, 99.33076, 44.41487),
			new Vector3(-199.8436, 62.61348, 45.34483),
			new Vector3(-157.9633, 27.43606, 47.25634),
			new Vector3(-218.3392, 54.7916, 44.76261, "None"),
		};
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Pull4</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsPull4 : FirelandsPull1
{

	public FirelandsPull4()
	{
		Name = "Firelands Pull4";
		_path1 = new List&lt;Vector3&gt;()
		{
			new Vector3(-244.4138, -175.8412, 53.99564),
			new Vector3(-262.5533, -154.8705, 52.21867),
			new Vector3(-271.6872, -131.3496, 46.24468),
			new Vector3(-245.8345, -104.2701, 44.5586),
			new Vector3(-224.5899, -112.3178, 45.38229),
			new Vector3(-162.0293, -94.79612, 45.38711),
			new Vector3(-259.397, -39.57774, 45.0899),
			new Vector3(-288.6647, 44.2026, 45.08817),
			new Vector3(-235.8468, 19.56069, 47.49309),
		};
		_path2 = new List&lt;Vector3&gt;()
		{
			new Vector3(-235.8468, 19.56069, 47.49309),
			new Vector3(-288.6647, 44.2026, 45.08817),
			new Vector3(-259.397, -39.57774, 45.0899),
			new Vector3(-162.0293, -94.79612, 45.38711),
			new Vector3(-224.5899, -112.3178, 45.38229),
			new Vector3(-245.8345, -104.2701, 44.5586),
			//new Vector3(-271.6872, -131.3496, 46.24468),
			//new Vector3(-262.5533, -154.8705, 52.21867),
			//new Vector3(-244.4138, -175.8412, 53.99564),
			new Vector3(-320.7712, -146.4267, 44.63953),
		};
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands Pull5</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsPull5 : FirelandsPull1
{
	public FirelandsPull5()
	{
		Name = "Firelands Pull5";
		_path1 = new List&lt;Vector3&gt;()
		{
			new Vector3(-157.9633, 27.43606, 47.25634),
			new Vector3(-199.8436, 62.61348, 45.34483),
			new Vector3(-162.7051, 99.33076, 44.41487),
			new Vector3(-155.4337, 122.823, 44.72004),
			new Vector3(-136.5171, 141.2231, 46.08343),
			new Vector3(-127.4155, 140.4366, 45.33023),
			new Vector3(-72.16676, 144.2178, 44.10285),
			new Vector3(-127.8154, 158.1351, 45.76446),
			new Vector3(-128.483, 144.5744, 44.90186),
		};
		_path2 = new List&lt;Vector3&gt;()
		{
			new Vector3(-195.676, -188.1827, 53.3019),
			new Vector3(-142.5069, -201.5208, 53.30188),
			new Vector3(-170.4689, -257.2387, 55.59405),
			new Vector3(-221.2656, -280.8629, 53.30132),
			new Vector3(-224.2337, -247.4816, 53.25644),
			//new Vector3(-228.0105, -209.8891, 53.30191),
			//new Vector3(-250.8044, -167.0706, 54.43877),
			//new Vector3(-283.1603, -128.1539, 45.40973),
		};
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands (Out And Reset)</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class FirelandsOutAndReset : QuestClass
{
	protected Spell _druidTeleportMoonglade = new Spell("Teleport: Moonglade");
	protected Spell _druidDreamwalk = new Spell("Dreamwalk");
	protected Spell _deathKnightDeathGate = new Spell("Death Gate");

	public FirelandsOutAndReset()
	{
		Name = "Firelands (Out And Reset)";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool Pulse()
	{
		var me = ObjectManager.Me;
		if (me.WowClass == WoWClass.Druid &amp;&amp; _druidTeleportMoonglade.KnownSpell)// &amp;&amp; _druidTeleportMoonglade.IsSpellUsable)
		{
			SpellManager.CastSpellByNameLUA(_druidTeleportMoonglade.NameInGame);
			Usefuls.WaitIsCasting();
			Thread.Sleep(Others.Random(1000, 2000));
		}
		/*
		else if (me.WowClass == WoWClass.Druid &amp;&amp; _druidDreamwalk.KnownSpell)// &amp;&amp; _druidDreamwalk.IsSpellUsable)
		{
			SpellManager.CastSpellByNameLUA(_druidDreamwalk.NameInGame);
			Usefuls.WaitIsCasting();
			Thread.Sleep(Others.Random(1000, 2000));
		}
		//*/
		else if (me.WowClass == WoWClass.DeathKnight &amp;&amp; _deathKnightDeathGate.KnownSpell)// &amp;&amp; _deathKnightDeathGate.IsSpellUsable)
		{
			SpellManager.CastSpellByNameLUA(_deathKnightDeathGate.NameInGame);
			Usefuls.WaitIsCasting();
			Thread.Sleep(Others.Random(1000, 2000));
			var gate = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(190942));
			if (gate != null &amp;&amp; gate.IsValid &amp;&amp; gate.CreatedBy == ObjectManager.Me.Guid)
			{
				GoToTask.ToPositionAndIntecractWithGameObject(gate.Position, gate.Entry); //Death Gate
			}
		}
		else
		{
			Move();
		}
		return true;
	}

	public virtual void Move()
	{
		Traveler.Instances.ToFirelandsNear();
	}

	public override bool IsComplete()
	{
		var result = !Traveler.Instances.InFirelands;
		if (result)
		{
			Firelands.ResetInstances();
		}
		return result;
	}
	public override bool HasQuest()
	{
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firelands (Move Back)</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class FirelandsMoveBack : FirelandsOutAndReset
{
	public FirelandsMoveBack()
	{
		Name = "Firelands (Move Back)";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	public override bool Pulse()
	{
		if (Traveler.Instances.InFirelandsFlyingDistance)
		{
			Move();
			return true;
		}
		return base.Pulse();
	}

	public override void Move()
	{
		Traveler.Instances.ToFirelands();
	}

	public override bool IsComplete()
	{
		return Traveler.Instances.InFirelands;
	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script />
  <OffMeshConnections />
</EasyQuestProfile>