<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="WriteLog" NameClass="--- Pandaria world bosses start ---" />
    <QuestsSorted Action="Pulse" NameClass="PandariaRequirements" />
    <QuestsSorted Action="Pulse" NameClass="ToPandariaWorldBosses" />
    <QuestsSorted Action="Pulse" NameClass="Galeon" />
    <QuestsSorted Action="RunCode" NameClass="PandariaRequirements.RollBonusLoot();" />
    <QuestsSorted Action="Pulse" NameClass="ShaofAnger" />
    <QuestsSorted Action="RunCode" NameClass="PandariaRequirements.RollBonusLoot();" />
    <QuestsSorted Action="Pulse" NameClass="Oondasta" />
    <QuestsSorted Action="RunCode" NameClass="PandariaRequirements.RollBonusLoot();" />
    <QuestsSorted Action="Pulse" NameClass="PrimalEggRaptors" />
    <QuestsSorted Action="Pulse" NameClass="GofromIsleofGiants" />
    <QuestsSorted Action="TurnIn" NameClass="RemnantsofAnger" />
    <QuestsSorted Action="Pulse" NameClass="TheStormGathersMove" />
    <QuestsSorted Action="PickUp" NameClass="TheStormGathersA" />
    <QuestsSorted Action="PickUp" NameClass="TheStormGathersH" />
    <QuestsSorted Action="Pulse" NameClass="TheStormGathersA" />
    <QuestsSorted Action="Pulse" NameClass="TheStormGathersH" />
    <QuestsSorted Action="Pulse" NameClass="TheStormGathersFlying" />
    <QuestsSorted Action="TurnIn" NameClass="TheStormGathersA" />
    <QuestsSorted Action="TurnIn" NameClass="TheStormGathersH" />
    <QuestsSorted Action="Pulse" NameClass="Nalak" />
    <QuestsSorted Action="RunCode" NameClass="PandariaRequirements.RollBonusLoot();" />
    <QuestsSorted Action="WriteLog" NameClass="--- Pandaria world bosses complete ---" />
    <QuestsSorted Action="Pulse" NameClass="ToDalaran" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Filler.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="70358" Name="Scout Captain Elsia (H)" GameObject="false">
      <PickUpQuests>
        <int>32680</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="1748.189" Y="4161.706" Z="159.5054" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="67990" Name="Lor'themar Theron (H)" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>32680</int>
      </TurnInQuests>
      <Position X="6703.23" Y="6481.269" Z="4.652417" />
    </NPCQuest>
    <NPCQuest Id="70360" Name="Vereesa Windrunner (A)" GameObject="false">
      <PickUpQuests>
        <int>32681</int>
      </PickUpQuests>
      <TurnInQuests />
      <Position X="1914.521" Y="4211.191" Z="132.4867" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="67992" Name="Lady Jaina Proudmoore (A)" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>32681</int>
      </TurnInQuests>
      <Position X="5682.545" Y="6223.137" Z="13.2045" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="62304" Name="Ban Bearheart" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>31809</int>
      </TurnInQuests>
      <Position X="1860.689" Y="4263.849" Z="148.8681" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc />
  <Blackspots>
    <Blackspot X="7008.11035" Y="6103.20361" Z="4.42179632" Radius="10" />
    <Blackspot X="6826.8457" Y="5843.695" Z="9.21941948" Radius="20" />
    <Blackspot X="-846.589539" Y="4469.50342" Z="735.8799" Radius="8" />
    <Blackspot X="-751.446045" Y="4403.121" Z="727.840942" Radius="6" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>*Pandaria Requirements</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class PandariaRequirements : QuestClass
{
	uint _dalaranHeathstone = 140192; // http://www.wowhead.com/item=140192/dalaran-hearthstone
	bool _halt = false;
	bool _complete = false;

	public PandariaRequirements()
	{
		Name = "Pandaria Requirements";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		ResetSettings();
	}
	public override bool CanConditions()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return _complete;
	}

	public override bool Pulse()
	{
		if (_halt)
			return true;

		if (string.IsNullOrEmpty(wManager.wManagerSetting.CurrentSetting.FlyingMountName))
		{
			_halt = true;
			Logging.Write("WARRNING! Setup 'Flying mount name' in wrobot settings. Profile halt");
			return true;
		}
		if (string.IsNullOrEmpty(wManager.wManagerSetting.CurrentSetting.GroundMountName))
		{
			_halt = true;
			Logging.Write("WARRNING! Setup 'Ground mount name' in wrobot settings. Profile halt");
			return true;
		}
		if (!ItemsManager.HasItemById(_dalaranHeathstone))
		{
			_halt = true;
			Logging.Write("WARRNING! You need item 'Dalaran Hearthstone'. Profile halt");
			return true;
		}
		if (ObjectManager.Me.Level &lt; 90)
		{
			_halt = true;
			Logging.Write("WARRNING! You need 90 level to fly in Pandaria. Profile halt");
			return true;
		}


		_complete = true;
		return true;
	}

	static void ResetSettings()
	{
		wManager.wManagerSetting.CurrentSetting.AquaticMountName = "";
		wManager.wManagerSetting.CurrentSetting.LootMobs = true;
		wManager.wManagerSetting.CurrentSetting.SkinNinja = false;
		wManager.wManagerSetting.CurrentSetting.SkinMobs = false;
		wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
		wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;
		wManager.wManagerSetting.CurrentSetting.HarvestTimber = false;
		wManager.wManagerSetting.CurrentSetting.CanAttackUnitsAlreadyInFight = true;
		wManager.wManagerSetting.CurrentSetting.AttackElite = true;
	}

	public static void RollBonusLoot()
	{
		Thread.Sleep(Usefuls.Latency * 4);
		var lua = @"
if BonusRollFrame.PromptFrame.RollButton and BonusRollFrame.PromptFrame.RollButton:IsVisible() then
	BonusRollFrame.PromptFrame.RollButton:Click()
end
";
		Lua.LuaDoString(lua);
		Logging.WriteDebug("Bonus Roll Button click");
	}

	public static uint primalEggID = 94295;
	public static uint crackedPrimalEggID = 94296;
	public static List&lt;uint&gt; _primalRaptosItemsID = new List&lt;uint&gt;()
	{
		94292, //reins-of-the-black-primal-raptor
		94293, //reins-of-the-green-primal-raptor
		94291, //reins-of-the-red-primal-raptor
	};
	public static List&lt;uint&gt; _primalRaptosSpellsID = new List&lt;uint&gt;()
	{
		138642,//black-primal-raptorr
		138643,//green-primal-raptor
		138641,//red-primal-raptor
	};
	public static bool CompletePrimalEgg
	{
		get
		{
			//6661 - isle of giants
			if (Usefuls.AreaId != 6661)
			{
				Log("egg complete. not in isle of giants");
				return true;
			}

			if (ItemsManager.HasItemById(crackedPrimalEggID))
			{
				ItemsManager.UseItem(crackedPrimalEggID);
				Thread.Sleep(Usefuls.Latency * 2);
				Usefuls.WaitIsCasting();
			}
			if (ItemsManager.HasItemById(primalEggID))
			{
				Log("egg complete. have primal egg: " + ItemsManager.GetItemCountById(primalEggID));
				return true;
			}

			for (int i = 0; i &lt; _primalRaptosSpellsID.Count; i++)
			{
				var itemID = _primalRaptosItemsID[i];
				var spellID = _primalRaptosSpellsID[i];
				if (!ItemsManager.HasItemById(itemID) &amp;&amp; !SpellManager.KnowSpell(spellID))
				{
					if (!_isEggCompleteFalseShowed)
					{
						Log("egg NOT complete. need=["
							+ " mount = " + ItemsManager.GetNameById(itemID)
							+ " count=" + ItemsManager.GetItemCountById(itemID)
							+ " spell=" + SpellManager.KnowSpell(spellID)
							+ " spell_name=" + SpellListManager.SpellNameInGameById(spellID)
						+ "]");
						_isEggCompleteFalseShowed = true;
					}
					return false;
				}
			}
			Log("egg complete. everything collected");
			return true;
		}
	}
	static bool _isEggCompleteFalseShowed = false;
	static void Log(string text)
	{
		Logging.WriteDebug("[Pandaria World Bosses] " + text);
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>*Traveler</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Linq;
using System.Collections.Generic;
using wManager.Wow.Class;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.Threading;
using wManager.Wow.Bot.Tasks;
#endif

public class Traveler : QuestClass
{
	static Traveler()
	{
		ResetSettings();
		Var.SetVar("Cameleto10Tester", true);
	}
	static void Log(string message)
	{
		Logging.Write("[Traveler] " + message);
	}
	public static void ResetSettings()
	{
		var config = wManager.wManagerSetting.CurrentSetting;
		config.CloseIfPlayerTeleported = false;
		config.UseFlyingMount = true;
		config.UseGroundMount = true;
		config.UseMount = true;
		config.IgnoreFightGoundMount = true;
		CVar.SetCVar("autoDismount", "1");
		CVar.SetCVar("autoDismountFlying", "1");
		Conditions.ForceIgnoreIsAttacked = false;
		Log("reset settings");
	}

	public static void UseHeathstone()
	{
		var name = SpellListManager.SpellNameInGameById(94719);
		Lua.RunMacroText("/cast " + name);
		Thread.Sleep(Usefuls.Latency * 2);
		if (ObjectManager.Me.IsCast)
		{
			Log("Heathstoning(" + name + ")");
			Usefuls.WaitIsCasting();
		}
		else if (ItemsManager.HasItemById(6948))
		{
			Log("Heathstoning");
			ItemsManager.UseItem(6948);
			Usefuls.WaitIsCasting();
		}
		else
		{
			Log("WARNING! Dont have Heathstone or The Innkeeper's Daughter");
		}
	}

	public static void UseHeathstoneDalaran()
	{
		if (ItemsManager.HasItemById(140192))
		{
			ItemsManager.UseItem(140192);
			Usefuls.WaitIsCasting();
		}
	}

	//OUTLANDS
	public static bool InOutlands
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.Expansion01;
		}
	}

	public static bool InShattrath
	{
		get
		{
			if (!InOutlands)
				return false;
			return Usefuls.AreaId == (int)AreaId.Shattrath;
		}
	}

	public static void ToShattrath()
	{
		if (InShattrath)
		{
			Log("im in shattrath");
		}
		else if (InPandariaShrine)
		{
			Log("im in pandaria. going to shattrath portal");
			if (ObjectManager.Me.IsHorde)
				Portals.PANDARIA_SHATTRATH_HORDE.Use();
			else
				Portals.PANDARIA_SHATTRATH_ALLIANCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToPandariaShrine();
		}
	}

	public static bool InQuelDanas
	{
		get
		{
			if (!InOutlands)
				return false;

			return Usefuls.AreaId == (int)AreaId.QuelDanas;
		}
	}

	public static void ToQuelDanas()
	{
		if (InQuelDanas)
		{
			Log("im in Quel Danas");
		}
		else if (InShattrath)
		{
			Log("im in Shattrath. going to Quel Danas portal");
			Portals.SHATTRATH_QUELDANAS.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToShattrath();
		}
	}


	// NORTHREND
	public static bool InNorthrend
	{
		get
		{
			return (Usefuls.ContinentId == (int)ContinentId.Northrend);
		}
	}

	public static bool InNorthrendDalaran
	{
		get
		{
			if (!InNorthrend)
				return false;

			return (Usefuls.AreaId == (int)AreaId.DalaranNorthrend);
		}
	}

	public static void ToNorthrendDalaran()
	{
		if (InNorthrendDalaran)
		{
			Log("im in northrend dalaran");
		}
		else if (InPandariaShrine)
		{
			Log("im in pandaria. going to northrend dalaran portal");
			if (ObjectManager.Me.IsHorde)
				Portals.PANDARIA_DALARAN_NORTHREND_HORDE.Use();
			else
				Portals.PANDARIA_DALARAN_NORTHREND_ALLIANCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in pandaria shrine");
			ToPandariaShrine();
		}
	}

	// PANDARIA
	public static bool InPandaria
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.HawaiiMainLand;
		}
	}

	public static bool InPandariaShrine
	{
		get
		{
			if (!InPandaria)
				return false;

			if (ObjectManager.Me.IsHorde)
				return Usefuls.AreaId == (int)AreaId.PandariaShrineHorde || Usefuls.AreaId == (int)AreaId.PandariaShrineHordeNear;
			else
				return Usefuls.AreaId == (int)AreaId.PandariaShrineAlliance || Usefuls.AreaId == (int)AreaId.PandariaShrineAllianceNear;
		}
	}

	public static void ToPandariaShrine()
	{
		if (InPandariaShrine)
		{
			Log("im in pandaria shrine");
		}
		else if (InBrokenIslesDalaran)
		{
			Log("im in dalaran. going to pandaria portal");
			if (ObjectManager.Me.IsHorde)
				Portals.BROKENISLES_PANDARIA_HORDE.Use();
			else
				Portals.BROKENISLES_PANDARIA_ALLAINCE.Use();
		}
		else
		{
			Log("im somewhere else. need to get in dalaran");
			ToBrokenIslesDalaran();
		}
	}

	public static void ToPandaria()
	{
		if (!InPandaria)
			ToPandariaShrine();
	}


	// LEGION
	public static bool IsInBrokenIsles
	{
		get
		{
			return Usefuls.ContinentId == (int)ContinentId.Troll_Raid;
		}
	}

	public static bool InBrokenIslesDalaran
	{
		get
		{
			if (!IsInBrokenIsles)
				return false;
			return (Usefuls.AreaId == (int)AreaId.DalaranBrokenIsles);
		}
	}

	public static void ToBrokenIsles()
	{
		if (!IsInBrokenIsles)
			ToBrokenIslesDalaran();
	}

	public static void ToBrokenIslesDalaran()
	{
		if (!InBrokenIslesDalaran)
		{
			Log("im not in broken isles dalaran. using dalaran heathstone");
			UseHeathstoneDalaran();
		}
	}

	public static class Portals
	{
		//neutral
		public static PortalInfo NORTHREND_CAVERNSOFTIME = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 193604);
		public static PortalInfo SHATTRATH_QUELDANAS = new PortalInfo(Coords.SHATTRATH, 187056);

		//horde
		public static PortalInfo ORGRIMMAR_OUTLANDS = new PortalInfo(new Vector3(1795.887, -4282.674, 7.395189, "None"), 195142);
		public static PortalInfo ORGRIMMAR_BLASTEDLANDS = new PortalInfo(new Vector3(1777.066, -4328.517, -7.984149, "None"), 235877);
		public static PortalInfo ORGRIMMAR_HYJAL = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207688);
		public static PortalInfo ORGRIMMAR_VASHJIR = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207690);
		public static PortalInfo ORGRIMMAR_DEEPHOLM = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207689);
		public static PortalInfo ORGRIMMAR_ULDUM = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207687);
		public static PortalInfo ORGRIMMAR_TWILIGHTHIGHLANDS = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 207686);
		public static PortalInfo ORGRIMMAR_TOLBARAD = new PortalInfo(Coords.CATACLYSM_PORTALS_HORDE, 206595);

		public static PortalInfo PANDARIA_ORGRIMMAR = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215127);
		public static PortalInfo PANDARIA_UNDERCITY = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215124);
		public static PortalInfo PANDARIA_THUNDERBLUFF = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215125);
		public static PortalInfo PANDARIA_SILVERMOON = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215126);
		public static PortalInfo PANDARIA_SHATTRATH_HORDE = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215113);
		public static PortalInfo PANDARIA_DALARAN_NORTHREND_HORDE = new PortalInfo(Coords.PANDARIA_PORTALS_HORDE, 215112);

		public static PortalInfo BROKENISLES_ORGRIMMAR = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246001);
		public static PortalInfo BROKENISLES_UNDERCITY = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246000);
		public static PortalInfo BROKENISLES_THUNDERBLUFF = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 245999);
		public static PortalInfo BROKENISLES_SILVERMOON = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246004);
		public static PortalInfo BROKENISLES_PANDARIA_HORDE = new PortalInfo(Coords.BROKENISLES_PORTALS_HORDE, 246007);

		//alliance
		public static PortalInfo STORMWIND_OUTLANDS = new PortalInfo(new Vector3(-8996.93, 860.6223, 29.6206, "None"), 195141);
		public static PortalInfo STORMWIND_BLASTEDLANDS = new PortalInfo(new Vector3(-9002.964, 868.8864, 129.6928, "None"), 235882);
		public static PortalInfo STORMWIND_HYJAL = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207692);
		public static PortalInfo STORMWIND_VASHJIR = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207691);
		public static PortalInfo STORMWIND_DEEPHOLM = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207693);
		public static PortalInfo STORMWIND_ULDUM = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207695);
		public static PortalInfo STORMWIND_TWILIGHTHIGHLANDS = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 207694);
		public static PortalInfo STORMWIND_TOLBARAD = new PortalInfo(Coords.CATACLYSM_PORTALS_ALLIANCE, 206594);

		public static PortalInfo PANDARIA_STORMWIND = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215119);
		public static PortalInfo PANDARIA_IRONFORGE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215118);
		public static PortalInfo PANDARIA_DARNASSUS = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215116);
		public static PortalInfo PANDARIA_EXODAR = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215117);
		public static PortalInfo PANDARIA_SHATTRATH_ALLIANCE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215120);
		public static PortalInfo PANDARIA_DALARAN_NORTHREND_ALLIANCE = new PortalInfo(Coords.PANDARIA_PORTALS_ALLIANCE, 215121);

		public static PortalInfo BROKENISLES_STORMWIND = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246002);
		public static PortalInfo BROKENISLES_IRONFORGE = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 245998);
		public static PortalInfo BROKENISLES_DARNASSUS = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 245997);
		public static PortalInfo BROKENISLES_EXODAR = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246003);
		public static PortalInfo BROKENISLES_PANDARIA_ALLAINCE = new PortalInfo(Coords.BROKENISLES_PORTALS_ALLIANCE, 246006);
	}

	public static class Coords
	{
		public static Vector3 SHATTRATH = new Vector3(-1863.39, 5430.373, -5.049042, "Flying");

		public static Vector3 CATACLYSM_PORTALS_HORDE = new Vector3(2048.193, -4377.466, 102.8623, "Flying");
		public static Vector3 CATACLYSM_PORTALS_ALLIANCE = new Vector3(-8206.709, 427.2209, 125.7481, "Flying");

		public static Vector3 PANDARIA_PORTALS_HORDE = new Vector3(1729.32, 888.9265, 487.119, "None");
		public static Vector3 PANDARIA_PORTALS_ALLIANCE = new Vector3(815.691, 182.3423, 519.6915, "None");

		public static Vector3 BROKENISLES_PORTALS_HORDE = new Vector3(-714.7886, 4406.515, 727.0811, "None");
		public static Vector3 BROKENISLES_PORTALS_ALLIANCE = new Vector3(-927.9012, 4565.281, 729.2716, "None");

		// instances
		public static Vector3 BLACKTEMPLE_NEAR = new Vector3(-3632.671, 317.9774, 45.54625, "Flying");
		public static Vector3 BLACKTEMPLE_MOVEIN = new Vector3(-3665.674, 319.7783, 34.85582, "None");

		public static Vector3 FIRELANDS_NEAR = new Vector3(4053.186, -2945.826, 1081.849, "Flying");

		public static Vector3 SUNWELLPLATEAU_NEAR = new Vector3(12561.39, -6774.708, 15.09085, "None");
		public static Vector3 SUNWELLPLATEAU_MOVEIN = new Vector3(12542.34, -6777.375, 14.99986, "None");
	}

	public static class Instances
	{
		public static bool InBlackTemple
		{
			get
			{
				return Usefuls.ContinentId == (int)ContinentId.BlackTemple;
			}
		}

		public static void ToBlackTemple()
		{
			if (InBlackTemple)
			{
				Log("Im in Black Temple");
			}
			else if (NearBlackTemple)
			{
				Log("Im near Black Temple, going inside");
				GoToTask.ToPosition(Coords.BLACKTEMPLE_MOVEIN);
			}
			else
			{
				ToBlackTempleNear();
			}
		}

		public static bool NearBlackTemple
		{
			get
			{
				if (InBlackTemple)
					return true;
				if (!InOutlands)
					return false;

				return ObjectManager.Me.Position.DistanceTo2D(Coords.BLACKTEMPLE_NEAR) &lt; 500;
			}
		}

		public static void ToBlackTempleNear()
		{
			uint teleportMedalion = 32757;  //http://www.wowhead.com/item=32757/blessed-medallion-of-karabor
			if (InBlackTemple || NearBlackTemple)
			{
				Log("Im in Black Temple or near");
			}
			else if (ItemsManager.HasItemById(teleportMedalion))
			{
				Log("Equipping teleport item");
				ItemsManager.EquipItemByName(ItemsManager.GetNameById(teleportMedalion));
				Thread.Sleep(35 * 1000);
				Log("Teleporting to Black Temple");
				ItemsManager.UseItem(teleportMedalion);
				Usefuls.WaitIsCasting();
			}
			else if (InOutlands)
			{
				Log("Im in Outlands. Moving near Black Temple");
				GoToTask.ToPosition(Coords.BLACKTEMPLE_NEAR);
			}
			else
			{
				Log("Im in somewhere else. Go to Shattrath");
				ToShattrath();
				Thread.Sleep(10 * 1000);
				ToBlackTempleNear();
			}
		}

		// sunwell
		public static bool InSunwell
		{
			get
			{
				return Usefuls.ContinentId == (int)ContinentId.SunwellPlateau;
			}
		}

		public static void ToSunwell()
		{
			if (InSunwell)
			{
				Log("Im in Sunwell");
			}
			else if (InQuelDanas)
			{
				Log("Im in Quel Danas, goin to sunwell");
				GoToTask.ToPosition(Coords.SUNWELLPLATEAU_MOVEIN);
			}
			else
			{
				ToQuelDanas();
			}
		}

	}

	public enum AreaId
	{
		QuelDanas = 4080,
		Shattrath = 3703,
		DalaranNorthrend = 4395,
		DalaranBrokenIsles = 7502,
		PandariaShrineAlliance = 6553, //alliance PandariaShrineOfSevenStars
		PandariaShrineAllianceNear = 6142,
		PandariaShrineHorde = 6141, //horde PandariaShrineOfTwoMoons
		PandariaShrineHordeNear = 6554,
	}

	public class PortalInfo
	{
		public Vector3 position;
		public int objectId;
		public PortalInfo(Vector3 pos, int id)
		{
			position = pos;
			objectId = id;
		}

		public void Use()
		{
			GoToTask.ToPosition(position);
			MountTask.DismountMount();
			GoToTask.ToPositionAndIntecractWithGameObject(position, objectId);
		}
	}


}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>*To Pandaria (World Bosses)</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class ToPandariaWorldBosses : QuestClass
{
	public ToPandariaWorldBosses()
	{
		Name = "To Pandaria (World Bosses)";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return true;
	}
	public override bool IsComplete()
	{
		//galeon
		if (!Quest.GetQuestCompleted(32098))
		{
			return Traveler.InPandaria;
		}
		//sha
		if (!Quest.GetQuestCompleted(32099))
		{
			return Traveler.InPandaria;
		}
		//oondasta
		if (!Quest.GetQuestCompleted(32519))
		{
			return Traveler.InPandaria;
		}
		//nalak
		//ContinentNameMpq = MoguIslandDailyArea // ContinentId = 1064 // AreaId = 6507
		if (!Quest.GetQuestCompleted(32518) &amp;&amp; Usefuls.ContinentId == (int)ContinentId.MoguIslandDailyArea)
		{
			return true;
		}
		return Traveler.InPandaria || (Quest.GetQuestCompleted(32098) &amp;&amp; Quest.GetQuestCompleted(32099) &amp;&amp; Quest.GetQuestCompleted(32519) &amp;&amp; Quest.GetQuestCompleted(32518));
	}

	public override bool Pulse()
	{
		Traveler.ToPandariaShrine();
		return true;
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Galeon</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class Galeon : QuestGrinderClass
{
	protected uint mountItem;
	protected uint mountSpell;

	protected List&lt;Vector3&gt; farmSpots = new List&lt;Vector3&gt;();
	protected robotManager.Helpful.Timer farmSpotTimer = new robotManager.Helpful.Timer(5 * 1000);
	protected bool farmSpotReached = false;
	protected float farmSpotRandomRadius = 10f;

	public Galeon()
	{
		Name = "Galeon";
		QuestId.Clear();
		QuestId.Add(32098); // http://www.wowhead.com/quest=32098/short-supply-reward (Galeon kill)
		Step.AddRange(new[] { 1 });
		HotSpots.Clear();
		farmSpots.Clear();
		farmSpots.AddRange(new List&lt;Vector3&gt;() {
			new Vector3(-603.3254, -29.79898, 156.0095, "None"),
			new Vector3(-621.0158, -49.2834, 156.0406, "None"),
			new Vector3(-621.1418, -86.96407, 159.5441, "None"),
			new Vector3(-618.1021, -131.0076, 157.4975, "None"),
			new Vector3(-561.9765, -77.63636, 156.1771, "None"),
		});
		EntryTarget.Clear();
		EntryTarget.Add(62346); // http://www.wowhead.com/npc=62346/galleon
		mountItem = 89783; // http://www.wowhead.com/item=89783/son-of-galleons-saddle
		mountSpell = 130965; // http://www.wowhead.com/spell=130965/son-of-galleon
		farmSpotTimer.ForceReady();
		TryChangeFarmSpot();
	}

	protected void Log(string text)
	{
		Logging.WriteDebug("[" + Name + "] " + text);
	}

	protected bool TryChangeFarmSpot()
	{
		if (!farmSpotTimer.IsReady)
			return false;

		farmSpotTimer.Reset(Others.Random(20, 40) * 1000);
		var farmSpot = GetFarmSpot();
		Log("Change farmspot to :" + farmSpot);
		HotSpots.Clear();
		HotSpots.Add(farmSpot);
		farmSpotReached = false;
		return true;
	}

	protected virtual Vector3 GetFarmSpot()
	{
		var p = farmSpots[Others.Random(0, farmSpots.Count - 1)];
		p = robotManager.Helpful.Math.GetRandomPointInCircle(p, farmSpotRandomRadius - 1f);
		return p;
	}

	protected bool TryReachFarmSpot()
	{
		var hotspot = HotSpots[0];
		var dist = ObjectManager.Me.Position.DistanceTo(hotspot);
		if (dist &gt; 100 &amp;&amp; Lua.LuaDoString&lt;bool&gt;("return IsFlyableArea()"))
		{
			Log("im too far from hotspot. longmove");
			if (!MountTask.OnFlyMount())
			{
				MountTask.Mount(true, MountTask.MountCapacity.Fly);
				Thread.Sleep(1 * 1000);
			}
			if (!LongMove.IsLongMove)
			{
				LongMove.LongMoveGo(hotspot);
				Thread.Sleep(1 * 1000);
			}
			return true;
		}
		else if (dist &gt; farmSpotRandomRadius)
		{
			Log("im too far from hotspot. goto");
			GoToTask.ToPosition(hotspot);
			return true;
		}
		if (!farmSpotReached)
		{
			Log("im at hotspot. reset timer");
			farmSpotReached = true;
			farmSpotTimer.Reset();
			MovementManager.StopMove();
			LongMove.StopLongMove();
			return true;
		}
		return false;
	}

	protected bool TryKill()
	{
		var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(EntryTarget));
		if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive &amp;&amp; mob.IsAttackable)
		{
			Log("kill " + mob.Name);
			Interact.InteractGameObject(mob.GetBaseAddress);
			Fight.StartFight(mob.Guid);
			return true;
		}
		return false;
	}

	public override bool Pulse()
	{
		if (TryKill())
		{
			return true;
		}

		if (TryReachFarmSpot())
		{
			return true;
		}

		if (TryChangeFarmSpot())
		{
			return true;
		}
		return true;
	}

	public override bool CanConditions()
	{
		return true;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		//if (Quest.GetQuestCompleted(QuestId))
		foreach (var questID in QuestId)
		{
			var questCompleted = Lua.LuaDoString&lt;bool&gt;("return IsQuestFlaggedCompleted(" + questID + ")");
			if (questCompleted)
				return true;
		}

		if (ItemsManager.HasItemById(mountItem))
			return true;

		if (SpellManager.KnowSpell(mountSpell))
			return true;

		return false;
	}


}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Sha of Anger</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif
public class ShaofAnger : Galeon
{
	int farmSpotIndex = 0;
	static int _questID = 32099;
	static Thread _searchThread = null;
	static int _shaOfAngerID = 60491;
	public ShaofAnger()
	{
		Name = "Sha of Anger";
		QuestId.Clear();
		QuestId.Add(_questID); // http://www.wowhead.com/quest=32099/short-supply-reward (Sha of Anger kill)
		HotSpots.Clear();
		farmSpots.Clear();
		farmSpots.AddRange(new List&lt;Vector3&gt;() {
			new Vector3(2868.409, 1467.948, 646.7186, "None"),
			new Vector3(2896.791, 1528.801, 645.7202, "None"),
			new Vector3(2969.468, 1483.066, 652.497, "None"),
			new Vector3(2924.855, 1415.683, 644.9147, "None"),
			/* OLD
			new Vector3(2949.512, 436.6867, 508.4738, "None"), // /way 70.8 63.6
			new Vector3(2405.787, 626.355, 499.1225, "None"), // /way 67.2 78.0
			new Vector3(1991.846, 1608.134, 479.3647, "None"), // /way 51.2 87.8
			new Vector3(2725.135, 1702.081, 646.2499, "None"), // /way 50.0 68.8
			new Vector3(2882.067, 1465.825, 645.7562, "None"), // /way 53.8 64.4
			//*/
		});
		EntryTarget.Clear();
		EntryTarget.Add(_shaOfAngerID); // http://www.wowhead.com/npc=60491/sha-of-anger
		mountItem = 87771; // http://www.wowhead.com/item=87771/reins-of-the-heavenly-onyx-cloud-serpent
		mountSpell = 127158; // http://www.wowhead.com/spell=127158/heavenly-onyx-cloud-serpent
		farmSpotTimer.ForceReady();
		TryChangeFarmSpot();
	}
	protected override Vector3 GetFarmSpot()
	{
		farmSpotIndex++;
		if (farmSpotIndex &gt;= farmSpots.Count)
			farmSpotIndex = 0;

		return farmSpots[farmSpotIndex];
	}
	public static void FindAndKill()
	{
		Logging.WriteDebug("[Sha of Anger] start find and kill thread");
		Thread t = new Thread(() =&gt;
		{
			while (robotManager.Products.Products.IsStarted)
			{
				if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)
				{
					//if (Quest.GetQuestCompleted(_questID))
					if (Lua.LuaDoString&lt;bool&gt;("return IsQuestFlaggedCompleted("+ _questID + ")"))
					{
						Logging.WriteDebug("[Sha of Anger] complete. stop find and kill thread");
						break;
					}

					if (LongMove.IsLongMove)
					{
						var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(_shaOfAngerID));
						if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive &amp;&amp; mob.IsAttackable)
						{
							Logging.WriteDebug("[Sha of Anger] found mob. stop long move and attack");
							LongMove.StopLongMove();
							Interact.InteractGameObject(mob.GetBaseAddress);
							Fight.StartFight(mob.Guid);
						}
					}
				}
				Thread.Sleep(1000);
			}
		});
		t.Start();
	}
}


</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Oondasta</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class Oondasta : Galeon
{
	public Oondasta()
	{
		Name = "Oondasta";
		QuestId.Clear();
		QuestId.Add(32519); // http://www.wowhead.com/quest=32519/short-supply-reward (Oondasta kill)
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		HotSpots.Clear();
		farmSpots.Clear();
		farmSpots.AddRange(new List&lt;Vector3&gt;() {
			new Vector3(5984.128, 1090.897, 56.23785, "None"),
			new Vector3(5989.82, 1109.512, 55.49199, "None"),
			new Vector3(6010.158, 1071.395, 55.82612, "None"),
			new Vector3(5997.563, 1081.248, 55.91742, "None"),
			new Vector3(5995.331, 1107.816, 55.55857, "None"),
		});
		EntryTarget.Clear();
		EntryTarget.Add(69161); // http://www.wowhead.com/npc=69161/oondasta
		mountItem = 94228; // http://www.wowhead.com/item=94228/reins-of-the-cobalt-primordial-direhorn
		mountSpell = 138423; // http://www.wowhead.com/spell=138423/cobalt-primordial-direhorn
		farmSpotTimer.ForceReady();
		TryChangeFarmSpot();
	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Nalak</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class Nalak : Galeon
{
	static List&lt;int&gt; hordePortals = new List&lt;int&gt;() {
		218946, //done first quest, to ship
		218462, //done scenario, to camp
	};
	static Vector3 hordePortalPosition = new Vector3(1751.43, 4167.102, 159.5051, "None");
	static Vector3 hordeShipPosition = new Vector3(6690.009, 6479.896, 4.630038, "None");
	static int hordePortalShipId = 218839;

	static List&lt;int&gt; alliancePortals = new List&lt;int&gt;() {
		218947, //done first quest, to ship
		218463, //done scenario, to camp
	};
	static Vector3 alliancePortalPosition = new Vector3(1926.549, 4222.257, 132.485, "None");
	static Vector3 allianceShipPosition = new Vector3(5671.43, 6212.48, 12.9852, "None");
	static int alliancePortalShipId = 218837;


	public Nalak()
	{
		Name = "Nalak";
		QuestId.Clear();
		QuestId.Add(32518); // http://www.wowhead.com/quest=32518/short-supply-reward (Nalak kill)
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		HotSpots.Clear();
		farmSpots.Clear();
		farmSpots.AddRange(new List&lt;Vector3&gt;() {
			new Vector3(7075.132, 5201.128, 66.03884, "None"),
			new Vector3(7059.939, 5184.332, 66.0382, "None"),
			new Vector3(7092.93, 5213.493, 66.0382, "None"),
			new Vector3(7112.196, 5204.126, 66.0382, "None"),
			new Vector3(7073.956, 5181.639, 66.0382, "None"),
		});
		EntryTarget.Clear();
		EntryTarget.Add(69099); // http://www.wowhead.com/npc=69099/nalak
		mountItem = 95057; // http://www.wowhead.com/item=95057/reins-of-the-thundering-cobalt-cloud-serpent
		mountSpell = 139442; // http://www.wowhead.com/spell=139442/thundering-cobalt-cloud-serpent
		farmSpotTimer.ForceReady();
		TryChangeFarmSpot();
	}

	public override bool Pulse()
	{
		Vector3 portPos = hordePortalPosition;
		List&lt;int&gt; portIds = hordePortals;
		Vector3 shipPos = hordeShipPosition;
		int shipPortId = hordePortalShipId;
		if (ObjectManager.Me.IsAlliance)
		{
			portPos = alliancePortalPosition;
			portIds = alliancePortals;
			shipPos = allianceShipPosition;
			shipPortId = alliancePortalShipId;
		}

		var myPos = ObjectManager.Me.Position;
		if (Usefuls.ContinentId != (int)ContinentId.MoguIslandDailyArea)
		{
			if (NearIsleOfThunderPortal)
			{
				var port = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(portIds));
				if (port != null &amp;&amp; port.IsValid)
				{
					Log("use port");
					GoToTask.ToPositionAndIntecractWithGameObject(port.Position, port.Entry);
				}
				else
				{
					Log("no port");
				}
			}
			else
			{
				Log("fly to port");
				ToIsleOfThunderPortal();
			}
			return true;
		}
		if (myPos.DistanceTo(shipPos) &lt; 50 &amp;&amp; myPos.Z &gt; shipPos.Z - 5)
		{
			Log("use teleport");
			GoToTask.ToPositionAndIntecractWithGameObject(shipPos, shipPortId);
			return true;
		}
		return base.Pulse();
	}

	public static void ToIsleOfThunderPortal()
	{
		Vector3 portPos = hordePortalPosition;
		if (ObjectManager.Me.IsAlliance)
		{
			portPos = alliancePortalPosition;
		}
		if (!NearIsleOfThunderPortal)
		{
			MountTask.Mount(true, MountTask.MountCapacity.Fly);
			Thread.Sleep(1 * 1000);
			LongMove.LongMoveGo(portPos);
			Thread.Sleep(1 * 1000);
		}
	}

	public static bool NearIsleOfThunderPortal
	{
		get
		{
			Vector3 portPos = hordePortalPosition;
			if (ObjectManager.Me.IsAlliance)
			{
				portPos = alliancePortalPosition;
			}
			return ObjectManager.Me.Position.DistanceTo(portPos) &lt; 100;
		}
	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Go from Isle of Giants</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class GofromIsleofGiants : QuestClass
{
	//AreaId = 5841 - flyable
	//AreaId = 6661 - isle of giants
	Vector3 _nearFlyMasterPosition = new Vector3(4369.885, 925.8644, 108.7413, "None");
	Vector3 _oceanCoastPosition = new Vector3(4737.834, 1037.659, 0.5866903, "None");
	Vector3 _oceanPosition = new Vector3(5263.489, 1060.683, 0.001537029, "None");

	public GofromIsleofGiants()
	{
		Name = "Go from Isle of Giants";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool IsComplete()
	{
		return Usefuls.AreaId != 6661;
	}
	public override bool Pulse()
	{
		GoToTask.ToPosition(_oceanPosition);
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool CanConditions()
	{
		return true;
	}


}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Storm Gathers (Move)</Name>
      <QuestId>
        <int>32681</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO2015
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class TheStormGathersMove : QuestClass
{
	public TheStormGathersMove()
	{
		Name = "The Storm Gathers (Move)";
		QuestId.Add(32681);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	public override bool IsComplete()
	{
		return Nalak.NearIsleOfThunderPortal;
	}

	public override bool Pulse()
	{
		if (!Nalak.NearIsleOfThunderPortal)
			Nalak.ToIsleOfThunderPortal();

		return true;
	}
}

</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Storm Gathers (A)</Name>
      <QuestId>
        <int>32681</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="1914.521" Y="4211.191" Z="132.4866" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>70360</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return ObjectManager.Me.IsAlliance;</CanCondition>
      <IsCompleteCondition>return Quest.IsObjectiveComplete(1, 32681);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Storm Gathers (H)</Name>
      <QuestId>
        <int>32680</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="1748.189" Y="4161.706" Z="159.5054" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>70358</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return ObjectManager.Me.IsHorde;</CanCondition>
      <IsCompleteCondition>return Quest.IsObjectiveComplete(1, 32680);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Storm Gathers (Flying)</Name>
      <QuestId>
        <int>32680</int>
        <int>32681</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return !ObjectManager.Me.InTransport &amp;&amp; Usefuls.ContinentId == (int)ContinentId.MoguIslandDailyArea;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>To Dalaran</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class ToDalaran : QuestClass
{
	public ToDalaran()
	{
		Name = "To Dalaran";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	public override bool CanConditions()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsComplete()
	{
		return Traveler.InBrokenIslesDalaran;
	}
	public override bool Pulse()
	{
        Traveler.ToBrokenIslesDalaran();
		return true;
	}
}

</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Remnants of Anger</Name>
      <QuestId>
        <int>31809</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Primal Egg Raptors</Name>
      <QuestId />
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="6116.935" Y="1201.762" Z="60.51093" />
          <Vector3 X="5972.892" Y="1330.49" Z="84.74285" />
          <Vector3 X="5890.358" Y="1368.503" Z="28.12538" />
          <Vector3 X="5792.591" Y="1374.078" Z="28.77243" />
          <Vector3 X="5831.796" Y="1202.431" Z="8.37821" />
          <Vector3 X="5840.404" Y="1156.736" Z="9.83077" />
          <Vector3 X="5849.076" Y="986.0729" Z="21.40402" />
          <Vector3 X="5840.523" Y="926.5475" Z="19.28347" />
          <Vector3 X="5820.846" Y="859.4016" Z="11.1101" />
          <Vector3 X="5923.605" Y="690.4324" Z="24.04232" />
          <Vector3 X="5941.075" Y="892.5833" Z="40.21309" Type="Swimming" />
          <Vector3 X="6027.053" Y="818.9728" Z="51.75876" />
          <Vector3 X="6069.429" Y="744.3768" Z="51.1105" />
          <Vector3 X="6164.571" Y="771.9497" Z="74.63831" />
          <Vector3 X="6186.779" Y="929.532" Z="104.4086" />
          <Vector3 X="6137.729" Y="1030.209" Z="60.4351" />
          <Vector3 X="6019.067" Y="1011.841" Z="60.57774" />
        </HotSpots>
        <EntryTarget>
          <int>69991</int>
          <int>70018</int>
          <int>70008</int>
          <int>70017</int>
          <int>70019</int>
          <int>70009</int>
          <int>70011</int>
          <int>70020</int>
          <int>69983</int>
          <int>70016</int>
          <int>70010</int>
          <int>70004</int>
          <int>70007</int>
          <int>69993</int>
          <int>70006</int>
          <int>70005</int>
          <int>70014</int>
          <int>69992</int>
          <int>70015</int>
          <int>70012</int>
          <int>70013</int>
          <int>69925</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return PandariaRequirements.CompletePrimalEgg;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script />
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="5988.891" Y="1092.182" Z="56.38322" />
        <Vector3 X="5965.861" Y="1088.99" Z="55.78196" />
        <Vector3 X="5947.16" Y="1089.452" Z="54.13161" />
        <Vector3 X="5932.452" Y="1084.941" Z="49.39562" />
        <Vector3 X="5919.055" Y="1089.231" Z="37.004" />
        <Vector3 X="5903.86" Y="1091.786" Z="19.63775" />
        <Vector3 X="5893.188" Y="1093.879" Z="15.5712" />
        <Vector3 X="5887.463" Y="1094.75" Z="16.29386" />
      </Path>
      <ContinentId>870</ContinentId>
      <Name>Isle of Giants (to bottom)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="5887.463" Y="1094.75" Z="16.29386" />
        <Vector3 X="5903.629" Y="1088.53" Z="20.9353" />
        <Vector3 X="5911.39" Y="1086.732" Z="29.3816" />
        <Vector3 X="5916.371" Y="1088.511" Z="34.03281" />
        <Vector3 X="5921.708" Y="1089.736" Z="39.758" />
        <Vector3 X="5927.766" Y="1085.449" Z="46.0421" />
        <Vector3 X="5935.621" Y="1085.85" Z="51.22451" />
        <Vector3 X="5950.048" Y="1088.76" Z="54.561" />
        <Vector3 X="5964.105" Y="1086.291" Z="55.51103" />
        <Vector3 X="5976.418" Y="1087.406" Z="55.89224" />
        <Vector3 X="5983.973" Y="1091.362" Z="56.24016" />
      </Path>
      <ContinentId>870</ContinentId>
      <Name>Isle of Giants (to up)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="7071.287" Y="5205.807" Z="66.03905" />
        <Vector3 X="7003.947" Y="5274.675" Z="84.44761" />
        <Vector3 X="6953.603" Y="5222.888" Z="75.49843" />
      </Path>
      <ContinentId>1064</ContinentId>
      <Name>The Foot of Lei Shen</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="6953.603" Y="5222.888" Z="75.49843" />
        <Vector3 X="7004.001" Y="5273.199" Z="84.44643" />
        <Vector3 X="7071.814" Y="5203.753" Z="66.03793" />
      </Path>
      <ContinentId>1064</ContinentId>
      <Name>Stormsea Landing</Name>
    </OffMeshConnection>
  </OffMeshConnections>
</EasyQuestProfile>