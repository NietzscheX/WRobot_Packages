<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="WriteLog" NameClass=" --- Legion Auto Loader start --- " />
    <QuestsSorted Action="Pulse" NameClass="ForcedSpecialization" />
    <QuestsSorted Action="RunCode" NameClass="/* Pressing the Assault */ Questing.CompleteAutoCompletableQuest(44545);" />
    <QuestsSorted Action="If" NameClass="LegionQuests.InDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnMinigDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnHerbalismDalaran" />
    <QuestsSorted Action="TurnIn" NameClass="BloodOnYourHands" />
    <QuestsSorted Action="PulseAllInOne" NameClass="FiringUptheForge" />
    <QuestsSorted Action="Pulse" NameClass="LearnArchaeologyDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnSkinningDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnFirstAidDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnFishingDalaran" />
    <QuestsSorted Action="Pulse" NameClass="LearnCookingDalaran" />
    <QuestsSorted Action="TurnIn" NameClass="StarlightRosedustHerbalism" />
    <QuestsSorted Action="TurnIn" NameClass="TheGentlestTouchHerbalism" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="None" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.NeedDemonHunterIntro" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\Demon Hunter\[N] Demon Hunter. 0 - Mardum.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.NeedIntro" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Legion Intro.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoAzsuna" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Azsuna.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoValsharah" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Val'sharah.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoHighmountain" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Hightmountain.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoStormheim" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Stormheim.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoSuramar" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Suramar.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="LegionQuests.DoBrokenShore" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\[N] Broken Shore.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="None" NameClass="--- END ZONES ---" />
    <QuestsSorted Action="If" NameClass="WoWClass.DeathKnight == ObjectManager.Me.WowClass" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\Class Hall\[N] Death Knight.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="WoWClass.DemonHunter == ObjectManager.Me.WowClass" />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion\Class Hall\[N] Demon Hunter.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="WriteLog" NameClass="WARNING! Seems like autoloader can't find profile for this character. Try something manualy" />
    <QuestsSorted Action="None" NameClass="" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="115264" Name="Illnea Bloodthorn" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>44760</int>
      </TurnInQuests>
      <Position X="-758.3594" Y="4504.909" Z="731.0217" Type="Flying" />
    </NPCQuest>
    <NPCQuest Id="92464" Name="Kuhuine Tenderstride" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>40034</int>
        <int>40035</int>
      </TurnInQuests>
      <Position X="-766.2726" Y="4519.236" Z="732.2164" />
    </NPCQuest>
    <NPCQuest Id="90463" Name="Archmage Karlain" GameObject="false">
      <PickUpQuests>
        <int>41778</int>
      </PickUpQuests>
      <TurnInQuests>
        <int>41778</int>
      </TurnInQuests>
      <Position X="-739.0781" Y="4521.911" Z="729.7089" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc />
  <Blackspots />
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>* Forced Specialization</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO2015
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
#endif

public sealed class ForcedSpecialization : QuestClass
{
	bool _complete = false;

	static void Snipers()
	{
		/* Set Blood Death Knight */
		if (ObjectManager.Me.WowClass == wManager.Wow.Enums.WoWClass.DeathKnight)
		{
			int forcedSpec = 1; //1 blood, 2 frost, 3 unholy
			robotManager.Helpful.Var.SetVar("ForcedSpecialization", new int[8] { forcedSpec, 2, 1, 1, 2, 3, 1, 3 }); //based on zygor
			var specName = Lua.LuaDoString&lt;string&gt;(string.Format("return select(2, GetSpecializationInfo({0})) or 'None'", forcedSpec));
			Logging.Write("Forced specialization set to " + specName);
		}
		/* Set Unholy Death Knight */
		if (ObjectManager.Me.WowClass == wManager.Wow.Enums.WoWClass.DeathKnight)
		{
			int forcedSpec = 3; //1 blood, 2 frost, 3 unholy
			robotManager.Helpful.Var.SetVar("ForcedSpecialization", new int[8] { forcedSpec, 2, 2, 2, 1, 1, 3, 3 }); //based on zygor
			var specName = Lua.LuaDoString&lt;string&gt;(string.Format("return select(2, GetSpecializationInfo({0})) or 'None'", forcedSpec));
			Logging.Write("Forced specialization set to " + specName);
		}
	}


	public ForcedSpecialization()
	{
		Name = "* Forced Specialization";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}
	static string lua = @"
TalentMicroButton:Click()
if PlayerTalentFrame then
	PlayerTalentFrameTab{0}:Click()
	PlayerTalentFrameTalentsTalentRow1Talent{1}:Click()
	PlayerTalentFrameTalentsTalentRow2Talent{2}:Click()
	PlayerTalentFrameTalentsTalentRow3Talent{3}:Click()
	PlayerTalentFrameTalentsTalentRow4Talent{4}:Click()
	PlayerTalentFrameTalentsTalentRow5Talent{5}:Click()
	PlayerTalentFrameTalentsTalentRow6Talent{6}:Click()
	PlayerTalentFrameTalentsTalentRow7Talent{7}:Click()
	PlayerTalentFrameCloseButton:Click()
end
";
	public static void Log(string text)
	{
		Logging.Write("[Forced Specialization] " + text);
	}

	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}

	public bool SetTalents(params int[] t)
	{
		/* no need to check rest state. maybe character not rested but talents not spent
		if (Lua.LuaDoString&lt;int&gt;("return GetRestState()") != 1)
		{
			Log("failed set talend. not in rest area");
			return false;
		}
		//*/
		if (t.Length != 8)
		{
			Log("failed set talents: bad data l=" + t.Length);
			return false;
		}
		var toRun = string.Format(lua, t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7]);
		Lua.LuaDoString(toRun);
		Log("changed talents " + string.Join(",", t));
		return true;
	}

	public override bool IsComplete()
	{
		if (_complete)
		{
			_complete = false;
			return true;
		}
		return false;
	}


	public override bool Pulse()
	{
		if (ObjectManager.Me.InCombat)
			return true;

		var forcedSpec = 0;
		var varName = "ForcedSpecialization";
		var talents = new int[8] { 1, 1, 1, 1, 1, 1, 1, 1 };
		if (robotManager.Helpful.Var.Exist(varName))
		{
			if (robotManager.Helpful.Var.IsType(varName, typeof(int)))
			{
				forcedSpec = robotManager.Helpful.Var.GetVar&lt;int&gt;(varName);
			}
			else if (robotManager.Helpful.Var.IsType(varName, typeof(int[])))
			{
				talents = robotManager.Helpful.Var.GetVar&lt;int[]&gt;(varName);
				forcedSpec = talents[0];
			}
		}
		if (forcedSpec &gt; 0)
		{
			var currentSpec = Lua.LuaDoString&lt;int&gt;("return GetSpecialization();");
			if (currentSpec != forcedSpec)
			{
				var specName = Lua.LuaDoString&lt;string&gt;(string.Format("return select(2, GetSpecializationInfo({0})) or 'None'", forcedSpec));
				Log("change specialization to " + specName);

				Lua.LuaDoString(string.Format("SetSpecialization({0});", forcedSpec));
				Usefuls.WaitIsCasting();
				Thread.Sleep(1 * 1000);
				currentSpec = Lua.LuaDoString&lt;int&gt;("return GetSpecialization();");

			}
			if (forcedSpec == currentSpec)
			{
				if (SetTalents(talents))
				{
					robotManager.Helpful.Var.SetVar(varName, 0);
				}
			}
		}
		_complete = true;
		return true;
	}


}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>var r = RequiredQuest == -1; if (r) RequiredQuest = 0; return r;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Pressing the Assault</Name>
      <QuestId>
        <int>44545</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Blood On Your Hands</Name>
      <QuestId>
        <int>44760</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Archaeology (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-718.3075, 4538.062, 730.0163, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 93538))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Archaeology;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;
</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn First Aid (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-789.132, 4576.892, 728.0712, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 93529))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.FirstAid;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Fishing (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-943.2778, 4438.424, 734.1773, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 95844))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Fishing;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Cooking (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-948.1719, 4546.551, 729.9723, "None");
		var npc = 93534;
		if (ObjectManager.Me.IsHorde)
		{
			p = new Vector3(-797.1893, 4297.172, 727.2802, "None");
			npc = 93536;
		}
		if (GoToTask.ToPositionAndIntecractWithNpc(p, npc))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Cooking;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Minig (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-729.5382, 4493.964, 738.8925, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 93189))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Mining;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		var prof1 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof1;");
		var prof2 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof2;");
		if (prof1 != 0 &amp;&amp; prof2 != 0 &amp;&amp; c == 0)
			return true;

		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;
</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Herbalism (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-766.2726, 4519.236, 732.2168, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 92464))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Herbalism;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		var prof1 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof1;");
		var prof2 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof2;");
		if (prof1 != 0 &amp;&amp; prof2 != 0 &amp;&amp; c == 0)
			return true;

		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;
</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Learn Skinning (Dalaran)</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-736.5972, 4576.476, 728.5839, "None");
		if (GoToTask.ToPositionAndIntecractWithNpc(p, 93541))
		{
			Usefuls.SelectGossipOption(GossipOptionsType.trainer);
			Trainer.TrainingSpell();
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		var s = SkillLine.Skinning;
		var c = Skill.GetValue(s);
		var m = Skill.GetMaxValue(s);
		var prof1 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof1;");
		var prof2 = Lua.LuaDoString&lt;int&gt;("local prof1, prof2 = GetProfessions(); return prof2;");
		if (prof1 != 0 &amp;&amp; prof2 != 0 &amp;&amp; c == 0)
			return true;

		return c &gt; 0 &amp;&amp; c &lt; m || m &gt;= 800;</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Starlight Rosedust (Herbalism)</Name>
      <QuestId>
        <int>40034</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return ItemsManager.HasItemById(129121);</IsCompleteCondition>
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Gentlest Touch (Herbalism)</Name>
      <QuestId>
        <int>40035</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Firing Up the Forge</Name>
      <QuestId>
        <int>41778</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(-730.7379, 4520.999, 730.4622, "None");
		Questing.Gather(p, 246944);
		Thread.Sleep(Usefuls.Latency * 2);
		var ui = "ObliterumForgeFrame";
		if (Questing.IsVisible(ui))
		{
			Questing.UseItem(136352);
			Thread.Sleep(Usefuls.Latency * 2);
			Lua.LuaDoString(ui + ".ObliterateButton:Click()");
			Thread.Sleep(Usefuls.Latency * 2);
			Usefuls.WaitIsCasting();
		}
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>camelot10\Libs\Questing.cs
camelot10\Libs\LegionQuests.cs</Script>
  <OffMeshConnections />
</EasyQuestProfile>