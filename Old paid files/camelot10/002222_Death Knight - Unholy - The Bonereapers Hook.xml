<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="WriteLog" NameClass="The Bonereaper's Hook farm started" />
    <QuestsSorted Action="Pulse" NameClass="SpecialArmyoftheDeadSummoned" />
    <QuestsSorted Action="WriteLog" NameClass="The Bonereaper's Hook farm complete" />
  </QuestsSorted>
  <NpcQuest />
  <Npc />
  <Blackspots />
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>Special Army of the Dead Summoned</Name>
      <QuestId>
        <int>44188</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public class SpecialArmyoftheDeadSummoned : QuestClass
{
	public SpecialArmyoftheDeadSummoned()
	{
		Name = "Special Army of the Dead Summoned";
		QuestId.Add(44188);
		Step.AddRange(new[] { 0 });
	}
	void Log(string text)
	{
		//Logging.Write("[Hook Farm] " + text);
	}
	public override bool Pulse()
	{
		if (ObjectManager.Me.IsStunned)
			return true;

		if (Usefuls.ContinentId != (int)ContinentId.ProvingGrounds || ObjectManager.Me.GetSpecialization != WowSpecializations.DeathKnight_Unholy)
		{
			Logging.Write("ATTENTION! Start this script inside Proving Grounds in Unholy spec");
			Thread.Sleep(30 * 1000);
			return true;
		}
		//settings
		var p = new Vector3(3755.914, 526.9749, 639.6912, "None");
		Conditions.ForceIgnoreIsAttacked = true;
		uint spellArmyOfTheDead = 42650;
		uint spellApocalypse = 220143;
		//confirm popup
		var buttonName = "StaticPopup1Button1";
		if (Lua.LuaDoString&lt;bool&gt;("return " + buttonName + " and " + buttonName + ":IsVisible()"))
		{
			Log("confirm");
			Lua.LuaDoString(buttonName + ":Click();");
			Thread.Sleep(Others.Random(5000, 6000));
		}
		if (ObjectManager.Me.Position.DistanceTo(p) &gt; 2f)
		{
			Log("to start");
			ClickToMove.CGPlayer_C__ClickToMove(p.X, p.Y, p.Z, MemoryRobot.Int128.Zero(), (int)wManager.Wow.Enums.ClickToMoveType.Move, 1.5f);
			return true;
		}
		ObjectManager.Me.Rotation = 1.087239f;

		var lua = @"local stageName, stageDescription, numCriteria, _, _, _, numSpells, spellInfo, weightedProgress = C_Scenario.GetStepInfo(); return numCriteria";
		var criteria = Lua.LuaDoString&lt;int&gt;(lua);

		var npc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(61636));

		// started
		var armyCD = SpellManager.GetSpellCooldownTimeLeft(spellArmyOfTheDead);
		var apocCD = SpellManager.GetSpellCooldownTimeLeft(spellApocalypse);
		if (criteria == 1)
		{
			if (apocCD &gt; 2000 &amp;&amp; armyCD &gt; 2000 &amp;&amp; npc.IsValid)
			{
				Log("abort");
				Interact.InteractGameObject(npc.GetBaseAddress, true, false, false);
				Thread.Sleep(Others.Random(1000, 2000));
				Quest.SelectGossipOption(1);
				return true;
			}
			if (armyCD &lt; 1)
			{
				Log("cast army");
				SpellManager.CastSpellByIdLUA(spellArmyOfTheDead);
				Usefuls.WaitIsCasting();
				return true;
			}
			var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(71829));
			if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive)
			{
				MovementManager.Face(mob);
				Interact.InteractGameObject(mob.GetBaseAddress, true, false, true);
				if (mob.GetDistance &gt; 10)
				{
					Log("cast grapple");
					SpellManager.CastSpellByIdLUA(49576);
					Usefuls.WaitIsCasting();
					return true;
				}
				if (!mob.IsTargetingMe)
				{
					Log("cast taunt");
					SpellManager.CastSpellByIdLUA(56222);
					Usefuls.WaitIsCasting();
					return true;
				}
				if (mob.BuffStack(194310) &lt; 6)  //festering wound
				{
					Log("cast festering strike");
					SpellManager.CastSpellByIdLUA(85948); // festering strike
					Usefuls.WaitIsCasting();
					return true;
				}
				Log("apoc CD =" + apocCD);
				if (apocCD &lt; 1)
				{
					Log("cast apoc");
					SpellManager.CastSpellByIdLUA(spellApocalypse);
					Usefuls.WaitIsCasting();
					return true;
				}
			}
			Log("wait mob");
		}
		// need start
		else if (npc.IsValid)
		{
			Log("start");
			Interact.InteractGameObject(npc.GetBaseAddress, true, false, false);
			Thread.Sleep(Others.Random(1000, 2000));
			Quest.SelectGossipOption(4);
			Thread.Sleep(Others.Random(1000, 2000));
		}
		return true;
	}
	public override bool IsComplete()
	{
		return Quest.GetQuestCompleted(44188);
	}
	public override bool HasQuest()
	{
		return !IsComplete();
	}
}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script />
  <OffMeshConnections />
</EasyQuestProfile>