<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="// Map ID = Stormheim  //  &#xD;&#xA;robotManager.Helpful.Var.SetVar(&quot;WorldQuestCurrentMapId&quot;, 1017);" />
    <QuestsSorted Action="WriteLog" NameClass="Stormheim W-NW-N-NE-C-E-SE-(S)-SW profile start" />
    <QuestsSorted Action="Pulse" NameClass="TravelToStormheim" />
    <QuestsSorted Action="None" NameClass=" === S === " />
    <QuestsSorted Action="Pulse" NameClass="CryMoreThunder" />
    <QuestsSorted Action="RunCode" NameClass="WorldQuest.SetDefaultSettings();" />
    <QuestsSorted Action="Pulse" NameClass="GotoHrydshal" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDGlimarIronfist" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDThaneIrglov" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDThaneIrglov2" />
    <QuestsSorted Action="Pulse" NameClass="AssaultonHrydshal1" />
    <QuestsSorted Action="Pulse" NameClass="AssaultonHrydshal2" />
    <QuestsSorted Action="Pulse" NameClass="AnOverdueDebt" />
    <QuestsSorted Action="Pulse" NameClass="GofromHrydshal" />
    <QuestsSorted Action="Pulse" NameClass="GotoGalebrokenPath" />
    <QuestsSorted Action="Pulse" NameClass="TheDrekirjarReturn" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDFathnyr" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDFathnyr2" />
    <QuestsSorted Action="Pulse" NameClass="GoFromGalebrokenPath" />
    <QuestsSorted Action="Pulse" NameClass="FlightMastersWhistle" />
    <QuestsSorted Action="None" NameClass=" === SW === " />
    <QuestsSorted Action="WriteLog" NameClass="Stormheim W-NW-N-NE-C-E-SE-(S)-SW profile complete. Loading next profile." />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion world quests\Stormheim\[110] Stormheim SW.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="106904" Name="Вальдемар Искатель Бурь" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>42234</int>
        <int>41344</int>
      </TurnInQuests>
      <Position X="3189.058" Y="1536.941" Z="182.54" Type="Flying" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="3216.971" Y="1518.129" Z="181.0684" />
      <Entry>266466</Entry>
      <Name>Mailbox</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>None</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
    <Npc>
      <Position X="3220.345" Y="1528.601" Z="180.8534" />
      <Entry>103797</Entry>
      <Name>Brulf the Heavy</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
    <Npc>
      <Position X="3220.345" Y="1528.601" Z="180.8534" />
      <Entry>103797</Entry>
      <Name>Brulf the Heavy</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
  </Npc>
  <Blackspots>
    <Blackspot X="2704.30273" Y="2504.59668" Z="207.4832" Radius="25" />
    <Blackspot X="2694.31885" Y="2499.59766" Z="218.321411" Radius="15" />
    <Blackspot X="3352.49438" Y="3179.28857" Z="531.659546" Radius="25" />
    <Blackspot X="3334.417" Y="3156.15576" Z="531.9532" Radius="25" />
    <Blackspot X="2694.0752" Y="2525.20532" Z="219.919571" Radius="30" />
    <Blackspot X="2720.08618" Y="2473.40234" Z="217.852249" Radius="22" />
    <Blackspot X="2834.21338" Y="454.2541" Z="23.1511517" Radius="15" />
    <Blackspot X="2962.244" Y="1314.07446" Z="180.003189" Radius="17" />
    <Blackspot X="3194.7666" Y="1520.59363" Z="181.773941" Radius="6" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>+FlightMastersWhistle</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>//FLIGHT MASTERS WHISTLE START
public sealed class FlightMastersWhistle : wManager.Wow.Class.QuestClass
{
	uint whistleId = 141605;

	public FlightMastersWhistle()
	{
		Name = "+FlightMastersWhistle";
		QuestId.AddRange(new[] { 0 });
		Step = new System.Collections.Generic.List&lt;int&gt; { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		StepAutoDetect = new[] { false, false, false, false, false, false, false, false, false, false };
		PickUpQuestOnItem = false;
		PickUpQuestOnItemID = 0;
		GossipOptionItem = 1;
		WoWClass = wManager.Wow.Enums.WoWClass.None;
		MinLevel = 0;
		MaxLevel = 999;
		RequiredQuest = 0;
	}

	public override bool CanConditions()
	{
		return WorldQuest.Whistle.Can();
	}

	public override bool IsComplete()
	{
		return !WorldQuest.Whistle.Can();
	}

	public override bool IsCompleted()
	{
		return IsComplete();
	}

	public override bool HasQuest()
	{
		return CanConditions();
	}

	public override bool Pulse()
	{
		WorldQuest.Whistle.Use();
		return true;
	}

}
//FLIGHT MASTERS WHISTLE END</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>		var timeLeft = wManager.Wow.Helpers.Lua.LuaDoString&lt;double&gt;("local startTime, duration, enable = GetItemCooldown(" + 141605 + "); return startTime + duration - GetTime();");
		return !ObjectManager.Me.IsIndoors &amp;&amp; timeLeft &lt;= 0;</CanCondition>
      <IsCompleteCondition>		var timeLeft = wManager.Wow.Helpers.Lua.LuaDoString&lt;double&gt;("local startTime, duration, enable = GetItemCooldown(" + 141605 + "); return startTime + duration - GetTime();");
		return ObjectManager.Me.IsIndoors || timeLeft &gt; 0;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>+Stormheim Helper</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>//STORMHEIM HELPER START
public sealed class StormheimHelper : wManager.Wow.Class.QuestClass
{
	public class GalebrokenPath
	{
		static robotManager.Helpful.Vector3 centerPositon = new robotManager.Helpful.Vector3(2037.128, 2403.265, 481.1568, "None");
		static robotManager.Helpful.Vector3 hookPositionStart = new robotManager.Helpful.Vector3(2160.899, 2427.52, 481.8189, "None");
		static robotManager.Helpful.Vector3 hookPositionEnd = new robotManager.Helpful.Vector3(2127.559, 2410.447, 479.3398, "None");

		static int hordeNpcId = 108685;
		static robotManager.Helpful.Vector3 hordeNpcPosition = new robotManager.Helpful.Vector3(2874.881, 2441.083, 241.8241, "None");

		static int allianceNpcId = 105490;
		static robotManager.Helpful.Vector3 allianceNpcPosition = new robotManager.Helpful.Vector3(2700.873, 2864.009, 309.7664, "None");

		static int requiredQuestId = 38624; //http://www.wowhead.com/quest=38624/cry-thunder

		public static float InnerRadius = 240f;

		public static bool Go()
		{
			if (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; 10)
			{
				return true;
			}

			if (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; StormheimHelper.GalebrokenPath.InnerRadius)
			{
				if (wManager.Wow.Bot.Tasks.GoToTask.ToPosition(hookPositionStart))
				{
					return true;
				}
			}

			//Vethir can taxi us there
			if (wManager.Wow.Helpers.Quest.GetQuestCompleted(requiredQuestId))
			{
				int npc;
				robotManager.Helpful.Vector3 pos;
				if (wManager.Wow.ObjectManager.ObjectManager.Me.IsHorde)
				{
					npc = hordeNpcId;
					pos = hordeNpcPosition;
				}
				else
				{
					npc = allianceNpcId;
					pos = allianceNpcPosition;
				}
				if (wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(pos, npc, 1))
				{
					System.Threading.Thread.Sleep(70 * 1000);
					return true;
				}
			}
			//need to move with harpoon
			else
			{
				var startPos = new robotManager.Helpful.Vector3(2204.92, 2243.411, 364.963, "None");
				var hookPos = new robotManager.Helpful.Vector3(2213.38, 2290.102, 373.8101, "None");
				if (wManager.Wow.Bot.Tasks.GoToTask.ToPosition(startPos))
				{
					if (Harpoon.UseNear(hookPos, 5))
					{
						if (wManager.Wow.Bot.Tasks.GoToTask.ToPosition(hookPositionStart))
							return true;
					}
				}
				/*
				//var startInHrydshal = new Vector3(2329.413, 2358.473, 273.595, "None");
				var startInHrydshal = new robotManager.Helpful.Vector3(2343.085, 2367.05, 316.582, "None");
				var hookPos = new robotManager.Helpful.Vector3(2299.911, 2343.661, 311.7311, "None");
				var pathEnd = new robotManager.Helpful.Vector3(2240.73, 2344.808, 378.2418, "None");

				if (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(startInHrydshal) &gt; 100 &amp;&amp; !Hrydshal.IsIn())
				{
					Hrydshal.Go();
				}

				if (wManager.Wow.Bot.Tasks.GoToTask.ToPosition(startInHrydshal))
				{
					if (Harpoon.UseNear(hookPos, 5))
					{
						if (wManager.Wow.Bot.Tasks.GoToTask.ToPosition(hookPositionStart))
							return true;
					}
				}
				//*/
			}
			return false;
		}
	}

	public class Hrydshal
	{
		public static robotManager.Helpful.Vector3 Center = new robotManager.Helpful.Vector3(2540.157, 2513.805, 246.5028, "None");
		public static robotManager.Helpful.Vector3 Start = new robotManager.Helpful.Vector3(2673.813, 2408.071, 222.0235, "None");
		public static float InnerRadius = 170f;
		public static float OuterRaidus = 300f;

		public static bool IsIn()
		{
			return (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(Center) &lt; InnerRadius);
		}

		public static bool IsNear()
		{
			return (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(Center) &lt; OuterRaidus);
		}

		public static bool Go()
		{
			if (IsIn())
				return true;

			if (IsNear() &amp;&amp; Harpoon.GetNear(5) != null)
			{
				wManager.Wow.Bot.Tasks.GoToTask.ToPosition(Center);
			}

			if (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(Start) &gt; Harpoon.HookMaxDist)
			{
				wManager.Wow.Bot.Tasks.GoToTask.ToPosition(Start);
			}

			if (IsNear() &amp;&amp; Harpoon.GetNear() != null)
			{
				if (Harpoon.UseNear())
					wManager.Wow.Bot.Tasks.GoToTask.ToPosition(Center);
			}
			return false;
		}
	}

	#region HARPOON
	public class Harpoon
	{
		const uint harpoonId = 138111;
		const int harpoonQuestId = 39775;
		public const float HookMaxDist = 55;//40;
		const float hookMinDist = 5;
		static readonly System.Collections.Generic.List&lt;int&gt; hooksPointsId = new System.Collections.Generic.List&lt;int&gt;() {
			91975,
			91983,
			92072,
			92017,
		};

		public static void Get()
		{
			//do quest to get harpoon
		}

		public static bool Can()
		{
			return wManager.Wow.Helpers.Quest.GetQuestCompleted(harpoonQuestId) || wManager.Wow.Helpers.ItemsManager.HasItemById(harpoonId);
		}

		public static bool UseNear(float radius = HookMaxDist)
		{
			if (!Can())
				return false;

			return UseNear(wManager.Wow.ObjectManager.ObjectManager.Me.Position, radius);
		}

		public static bool UseNear(robotManager.Helpful.Vector3 position, float radius = hookMinDist)
		{
			if (!Can())
				return false;

			var hookPoint = GetNear(position, radius);
			if (hookPoint != null)
				robotManager.Helpful.Logging.Write("HOOK @&gt; " + hookPoint + " result=" + (wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(hookPoint.Position) &lt; HookMaxDist) + " dist="+ wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(hookPoint.Position) + " ");

			if (hookPoint != null &amp;&amp; wManager.Wow.ObjectManager.ObjectManager.Me.Position.DistanceTo(hookPoint.Position) &lt; HookMaxDist)
			{
				wManager.Wow.Helpers.Interact.InteractGameObject(hookPoint.GetBaseAddress);
				System.Threading.Thread.Sleep(10 * 1000);
				return true;
			}
			return false;
		}

		public static wManager.Wow.ObjectManager.WoWUnit GetNear(float radius = HookMaxDist)
		{
			return GetNear(wManager.Wow.ObjectManager.ObjectManager.Me.Position, radius);
		}

		public static wManager.Wow.ObjectManager.WoWUnit GetNear(robotManager.Helpful.Vector3 position, float radius = hookMinDist)
		{
			var hookPoints = wManager.Wow.ObjectManager.ObjectManager.GetWoWUnitByEntry(hooksPointsId);
			hookPoints.Sort((a, b) =&gt; {
				if (a.Position.DistanceTo(position) &gt; b.Position.DistanceTo(position))
					return 1;
				else
					return -1;
			});
			foreach (var hookPoint in hookPoints)
			{
				if (hookPoint != null &amp;&amp; hookPoint.IsValid &amp;&amp; position.DistanceTo(hookPoint.Position) &lt; radius)
				{
					return hookPoint;
				}
			}
			return null;
		}

	}
	#endregion HARPOON

}
//STORMHEIM HELPER END</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>+Travel To Stormheim</Name>
      <QuestId />
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Travel.ToZone(WorldQuest.MapId.Stormheim);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>An Overdue Debt</Name>
      <QuestId>
        <int>43951</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="2659.119" Y="2429.172" Z="218.662" />
          <Vector3 X="2659.119" Y="2429.172" Z="218.662" />
          <Vector3 X="2618.419" Y="2395.681" Z="233.0338" />
          <Vector3 X="2562.131" Y="2612.686" Z="236.6776" />
          <Vector3 X="2565.223" Y="2565.009" Z="242.0379" />
          <Vector3 X="2504.321" Y="2453.375" Z="253.2723" />
          <Vector3 X="2401.526" Y="2385.266" Z="258.3066" />
          <Vector3 X="2455.19" Y="2422.343" Z="256.4903" />
          <Vector3 X="2607.087" Y="2430.067" Z="233.5652" />
        </HotSpots>
        <EntryIdObjects>
          <int>247985</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>6</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(43951);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(43951);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Assault on Hrydshal 1</Name>
      <QuestId>
        <int>41451</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="2636.597" Y="2419.987" Z="224.2792" />
          <Vector3 X="2599.135" Y="2439.288" Z="233.5536" />
          <Vector3 X="2616.386" Y="2401.082" Z="232.8374" />
          <Vector3 X="2627.798" Y="2474.378" Z="222.2068" />
          <Vector3 X="2661.899" Y="2502.026" Z="221.9614" />
          <Vector3 X="2678.503" Y="2464.328" Z="218.8094" />
          <Vector3 X="2613.346" Y="2490.542" Z="221.9614" />
        </HotSpots>
        <EntryTarget>
          <int>91205</int>
          <int>91417</int>
          <int>108526</int>
          <int>91204</int>
          <int>91240</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(41451);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(41451, 1);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Assault on Hrydshal 2</Name>
      <QuestId>
        <int>41451</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var startPosition = new Vector3(2533.431, 2519.561, 244.6896, "None");
		var campPosition = new Vector3(2528.116, 2530.061, 262.9604, "None");
		int ravenNestId = 252690;
		var maxDist = 7;
		var hookPointsId = new List&lt;int&gt;() {
			91983,
			92072,
			92017,
			91975,
			92022,
		};
		var harpoonLauncherId = 258970;

		if (ObjectManager.Me.Position.DistanceTo(campPosition) &lt; maxDist)
		{
			var harpoonEntry = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(harpoonLauncherId));
			if (harpoonEntry != null &amp;&amp; harpoonEntry.IsValid &amp;&amp; harpoonEntry.Position.DistanceTo(campPosition) &lt; maxDist)
			{
				//Logging.Write("break harpoon");
				GoToTask.ToPositionAndIntecractWithGameObject(harpoonEntry.Position, harpoonEntry.Entry);
			}
			//Logging.Write("no harpoon. camping");
			return true;
		}
		if (ObjectManager.Me.Position.DistanceTo(startPosition) &lt; maxDist)
		{
			var hookPoint = ObjectManager.GetWoWUnitByEntry(hookPointsId).Where(u =&gt; u != null &amp;&amp; u.IsValid).OrderBy(u =&gt; u.Position.DistanceTo(campPosition)).FirstOrDefault();
			if (hookPoint != null &amp;&amp; hookPoint.IsValid &amp;&amp; hookPoint.Position.DistanceTo(campPosition) &lt; maxDist)
			{
				//Logging.Write("use hook");
				Interact.InteractGameObject(hookPoint.GetBaseAddress);
				Thread.Sleep(10 * 1000);
			}
			//Logging.Write("no hook " + hookPoint + " dist=" + hookPoint.Position.DistanceTo(campPosition) +"  ");
			return true;
		}

		//Logging.Write("to start");
		GoToTask.ToPosition(startPosition);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(41451);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(41451, 2);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Cry More Thunder!</Name>
      <QuestId>
        <int>41950</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var questId = 41950;
		wManager.wManagerSetting.ClearBlacklistOfCurrentProductSession();
		wManager.wManagerSetting.CurrentSetting.UseFlyingMount = true;
		wManager.wManagerSetting.CurrentSetting.UseGroundMount = true;
		wManager.wManagerSetting.CurrentSetting.UseMount = true;
		wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = false;

		int requiredQuestId = 38624; //http://www.wowhead.com/quest=38624/cry-thunder

		int hordeNpcId = 108685;
		Vector3 hordeNpcPosition = new Vector3(2874.881, 2441.083, 241.8241, "None");

		int allianceNpcId = 105490;
		Vector3 allianceNpcPosition = new Vector3(2700.873, 2864.009, 309.7664, "None");

		int neutralNpcId = 105490;
		Vector3 neutralNpcPosition = new Vector3(2843.452, 2495.378, 236.1803, "None");

		var dragonPos = hordeNpcPosition;
		var dragonId = hordeNpcId;
		if (ObjectManager.Me.IsAlliance)
		{
			dragonPos = allianceNpcPosition;
			dragonId = allianceNpcId;
		}

		if (!Quest.GetQuestCompleted(requiredQuestId))
		{
			dragonPos = neutralNpcPosition;
			dragonId = neutralNpcId;
		}

		var victims = new List&lt;int&gt;() {
			92312, //Drekirjar Galeborn
			92359, //Drekirjar Felblade
			92361, //Felscale Dominator
			92362, //Felscale Subduer
			92367, //Tideskorn Longaxe
			92374, //Drekirjar Galeborn
			92381, //Drekirjar Shieldbearer
			92384, //Tideskorn Worker
		};
		var riderId = 92312;

		if (!ObjectManager.Me.PlayerUsingVehicle)
		{
			if (ObjectManager.Me.Position.DistanceTo(dragonPos) &gt; 5)
			{
				wManager.Wow.Bot.Tasks.GoToTask.ToPosition(dragonPos);
				return true;
			}
			if (Quest.HasQuest(questId))
			{
				//Logging.Write("mount dragon");
				if (wManager.Wow.Bot.Tasks.GoToTask.ToPositionAndIntecractWithNpc(dragonPos, dragonId, 4))
				{
					WorldQuest.ResetUpdateTimer(4);
				}
			}
			return true;
		}

		//im mounted, set settings
		wManager.wManagerSetting.CurrentSetting.UseFlyingMount = false;
		wManager.wManagerSetting.CurrentSetting.UseGroundMount = false;
		wManager.wManagerSetting.CurrentSetting.UseMount = false;
		wManager.Wow.Helpers.Conditions.ForceIgnoreIsAttacked = true;

		var mobEntry = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(riderId));
		if (mobEntry != null &amp;&amp; mobEntry.IsAlive &amp;&amp; mobEntry.IsAttackable &amp;&amp; mobEntry.IsValid)
		{
			if (mobEntry.Position.DistanceTo(ObjectManager.Me.Position) &lt; 20)
			{
				//Logging.Write("rider near, killing it");
				//wManager.Wow.Helpers.Lua.LuaDoString("OverrideActionBarButton2:Click()");
				wManager.Wow.Helpers.Lua.RunMacroText("/click OverrideActionBarButton2");
				Thread.Sleep(2 * 1000);
				return true;
			}
		}

		mobEntry = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(victims));
		if (mobEntry != null &amp;&amp; mobEntry.IsAlive &amp;&amp; mobEntry.IsAttackable &amp;&amp; mobEntry.IsValid)
		{
			if (mobEntry.Position.DistanceTo(ObjectManager.Me.Position) &lt; 200)
			{
				//wManager.Wow.Helpers.Lua.LuaDoString("OverrideActionBarButton1:Click()");
				wManager.Wow.Helpers.Lua.RunMacroText("/click OverrideActionBarButton1");
				Thread.Sleep(Usefuls.Latency);
				wManager.Wow.Helpers.ClickOnTerrain.Pulse(mobEntry.Position);
				wManager.Wow.Helpers.Usefuls.WaitIsCasting();
				//Logging.Write("dragon attack");
				return true;
			}
		}
		//Logging.Write("pulse end");
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(41950);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(41950);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Go From Galebroken Path</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		uint whistleId = 141605;
		var centerPosition = new Vector3(2058.582, 2377.454, 478.6567, "None");
		if (!ItemsManager.HasItemById(whistleId))
		{
			Logging.WriteError("Don't have [Flight Master's Whistle]. Can't get out from here");
			return true;
		}
		if (ObjectManager.Me.IsIndoors)
		{
			//Logging.Write("im in doors. go to mid");
			var path = new List&lt;Vector3&gt;() {
				new Vector3(1948.688f, 2327.074f, 507.2358f, "None"),
				new Vector3(1952.198f, 2330.971f, 507.0871f, "None"),
				new Vector3(1957.227f, 2335.8f, 507.7179f, "None"),
				new Vector3(1959.922f, 2338.098f, 507.8922f, "None"),
				new Vector3(1962.62f, 2340.327f, 508.033f, "None"),
				new Vector3(1967.957f, 2344.898f, 508.6237f, "None"),
				new Vector3(1970.556f, 2347.211f, 509.3777f, "None"),
				new Vector3(1975.757f, 2351.902f, 509.8437f, "None"),
				new Vector3(1980.961f, 2356.595f, 508.3219f, "None"),
				new Vector3(1983.909f, 2358.53f, 507.2984f, "None"),
				new Vector3(1987.061f, 2360.096f, 506.1867f, "None"),
				new Vector3(1990.227f, 2361.538f, 503.9944f, "None"),
				new Vector3(1993.336f, 2362.954f, 498.2613f, "None"),
				new Vector3(1996.623f, 2364.452f, 487.2021f, "None"),
				new Vector3(1999.83f, 2365.832f, 484.5205f, "None"),
			};
			MovementManager.GoLoop(path);
			return true;
		}

		//Logging.Write("use whistle");
		ItemsManager.UseItem(whistleId);
		Usefuls.WaitIsCasting();
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return ObjectManager.Me.Position.DistanceTo(new Vector3(2058.582, 2377.454, 478.6567, "None")) &lt; 300;</CanCondition>
      <IsCompleteCondition>return ObjectManager.Me.Position.DistanceTo(new Vector3(2058.582, 2377.454, 478.6567, "None")) &gt; 300;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Go from Hrydshal</Name>
      <QuestId />
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		if (ObjectManager.Me.IsIndoors)
		{
			GoToTask.ToPosition(StormheimHelper.Hrydshal.Center);
			return true;
		}

		if (ObjectManager.Me.IsMounted)
		{
			MountTask.DismountMount();
			return true;
		}

		WorldQuest.Whistle.Use();
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return StormheimHelper.Hrydshal.IsIn();</CanCondition>
      <IsCompleteCondition>return !StormheimHelper.Hrydshal.IsIn();</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Go to Galebroken Path</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>public sealed class GotoGalebrokenPath : QuestClass
{
	Vector3 centerPositon = new Vector3(2037.128, 2403.265, 481.1568, "None");
	Vector3 hookPositionStart = new Vector3(2160.899, 2427.52, 481.8189, "None");
	Vector3 hookPositionEnd = new Vector3(2127.559, 2410.447, 479.3398, "None");

	int hordeNpcId = 108685;
	Vector3 hordeNpcPosition = new Vector3(2874.881, 2441.083, 241.8241, "None");

	int allianceNpcId = 105490;
	Vector3 allianceNpcPosition = new Vector3(2700.873, 2864.009, 309.7664, "None");

	int requiredQuestId = 38624; //http://www.wowhead.com/quest=38624/cry-thunder

	public GotoGalebrokenPath()
	{
		Name = "Go to Galebroken Path";
		QuestId.Add(41949); //The Drekirjar Return
		QuestId.Add(43621); //WANTED: Fathnyr
		QuestId.Add(43434); //WANTED: Fathnyr
		Step.AddRange(new[] { 1, 0, 0, 0, 0 }); // Objective required count
	}

	private bool IsOnQuest()
	{
		foreach (var questId in QuestId)
		{
			if (WorldQuest.Can(questId))
			{
				return true;
			}
		}
		return false;
	}

	public override bool CanConditions()
	{
		return StormheimHelper.Harpoon.Can() &amp;&amp; IsOnQuest();
	}

	public override bool HasQuest()
	{
		return CanConditions() &amp;&amp; !IsCompleted();
	}

	public override bool IsComplete()
	{
		var maxDist = centerPositon.DistanceTo(hookPositionStart) + 10;

		if (ObjectManager.Me.Position.DistanceTo(centerPositon) &lt; maxDist)
		{
			return true;
		}

		if (!IsOnQuest())
		{
			return true;
		}

		return false;
	}

	public override bool IsCompleted()
	{
		return IsComplete();
	}

	public override bool Pulse()
	{
		StormheimHelper.GalebrokenPath.Go();
		return true;
		if (!StormheimHelper.Harpoon.Can())
		{
			Logging.WriteError("Need Stormforged Grapple Launcher");
			return true;
		}

		if (ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; 10)
		{
			return true;
		}

		if (ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; StormheimHelper.GalebrokenPath.InnerRadius)
		{
			if (GoToTask.ToPosition(hookPositionStart))
			{
				return true;
			}
		}

		//Vethir can taxi us there
		if (Quest.GetQuestCompleted(requiredQuestId))
		{
			FlyToGalebrokenPath();
		}
		//need to move with harpoon
		else
		{
			GoToGalebrokenPath();
		}
		return true;
	}

	void GoToGalebrokenPath()
	{
		//var startInHrydshal = new Vector3(2329.413, 2358.473, 273.595, "None");
		var startInHrydshal = new Vector3(2343.085, 2367.05, 316.582, "None");
		var hookPos = new Vector3(2299.911, 2343.661, 311.7311, "None");
		var pathEnd = new Vector3(2240.73, 2344.808, 378.2418, "None");

		if (ObjectManager.Me.Position.DistanceTo(startInHrydshal) &gt; 100 &amp;&amp; !StormheimHelper.Hrydshal.IsIn())
		{
			Logging.Write("@hrydshal");
			StormheimHelper.Hrydshal.Go();
			return;
		}

		Logging.Write("@start");
		if (GoToTask.ToPosition(startInHrydshal))
		{
			Logging.Write("#harpoon");
			if (StormheimHelper.Harpoon.UseNear(hookPos, 5))
			{
				Logging.Write("@end");
				GoToTask.ToPosition(pathEnd);
			}
		}
	}

	void FlyToGalebrokenPath()
	{
		int npc;
		Vector3 pos;
		if (ObjectManager.Me.IsHorde)
		{
			npc = hordeNpcId;
			pos = hordeNpcPosition;
		}
		else
		{
			npc = allianceNpcId;
			pos = allianceNpcPosition;
		}
		if (GoToTask.ToPositionAndIntecractWithNpc(pos, npc, 1))
		{
			Thread.Sleep(70 * 1000);
		}
	}

}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Go to Hrydshal</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif
public class GotoHrydshal : QuestClass
{
	Vector3 startPosition = new Vector3(2673.813, 2408.071, 222.0235, "None");
	public GotoHrydshal()
	{
		Name = "Go to Hrydshal";
		QuestId.Add(43626); //WANTED: Thane Irglov
		QuestId.Add(43437); //WANTED: Thane Irglov
		QuestId.Add(43951); //An Overdue Debt
		QuestId.Add(41451); //Assault on Hrydshal
		QuestId.Add(43622); // http://www.wowhead.com/quest=43622/wanted-glimar-ironfist
		QuestId.Add(43436); // http://www.wowhead.com/quest=43436/wanted-glimar-ironfist
		Step.AddRange(new[] { 1, 0, 0, 0, 0 }); // Objective required count
	}
	bool IsOnQuest()
	{
		foreach (var questId in QuestId)
		{
			if (WorldQuest.Can(questId))
			{
				return true;
			}
		}
		return false;
	}
	public override bool CanConditions()
	{
		return StormheimHelper.Harpoon.Can() &amp;&amp; IsOnQuest();
	}
	public override bool HasQuest()
	{
		return CanConditions() &amp;&amp; !IsCompleted();
	}
	public override bool IsComplete()
	{
		if (StormheimHelper.Hrydshal.IsIn())
			return true;

		var hookPoint = StormheimHelper.Harpoon.GetNear(5);
		if (hookPoint != null)
			return true;

		if (!IsOnQuest())
			return true;

		return false;
	}
	public override bool IsCompleted()
	{
		return IsComplete();
	}
	public override bool Pulse()
	{
		StormheimHelper.Hrydshal.Go();
		return true;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Drekirjar Return</Name>
      <QuestId>
        <int>41949</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var questId = 41949;
		uint harpoonId = 138111;
		int harpoonQuestId = 39775;
		var hooksPointsid = new List&lt;int&gt;() {
			91983,
			92072,
			92017,
			91975,
			92022,
		};
		var centerPositon = new Vector3(2037.128, 2403.265, 481.1568, "None");
		var hookPositionStart = new Vector3(2160.899, 2427.52, 481.8189, "None");
		var hookPositionEnd = new Vector3(2127.559, 2410.447, 479.3398, "None");
		var maxDist = centerPositon.DistanceTo(hookPositionEnd) + 10;

		if (!(Quest.GetQuestCompleted(harpoonQuestId) || ItemsManager.HasItemById(harpoonId)))
		{
			Logging.WriteError("Need Stormforged Grapple Launcher");
			return true;
		}
		if (ObjectManager.Me.Position.DistanceTo(centerPositon) &lt; maxDist)
		{
			//Logging.Write("do quest");
			var mobs1 = new List&lt;int&gt;() {
				91244, //Felskorn Trapper
				91566, //Felskorn Executioner
			};
			var mobs2 = new List&lt;int&gt;() {
				92128, //Felskorn Pilferer
				92206, //Felscale Pilferer
			};
			List&lt;int&gt; mobs;
			if (WorldQuest.Complete(questId, 1))
			{
				//Logging.Write("mobs#2");
				mobs = mobs2;
			}
			else
			{
				//Logging.Write("mobs#1");
				mobs = mobs1;
			}
			var mobEntry = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(mobs));
			if (mobEntry != null &amp;&amp; mobEntry.IsAlive &amp;&amp; mobEntry.IsAttackable &amp;&amp; mobEntry.IsValid &amp;&amp; centerPositon.DistanceTo(mobEntry.Position) &lt; maxDist)
			{
				if (mobEntry.Position.DistanceTo(ObjectManager.Me.Position) &lt; maxDist)
				{
					//Logging.Write("attack victim");
					Fight.StartFight(mobEntry.Guid);
					return true;
				}
			}
			//Logging.Write("no victims.go to center");
			GoToTask.ToPosition(centerPositon);
			return true;
		}
		if (ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; 10)
		{
			//Logging.Write("at hook position");
			var hookPoints = ObjectManager.GetWoWUnitByEntry(hooksPointsid);
			foreach (var hookPoint in hookPoints)
			{
				if (hookPoint.Position.DistanceTo(hookPositionEnd) &lt; 10)
				{
					//Logging.Write("found hook at place. using it");
					Interact.InteractGameObject(hookPoint.GetBaseAddress);
					Thread.Sleep(10 * 1000);
					return true;
				}
			}
			//Logging.Write("dont see harpoon points");
			return true;
		}
		if (GoToTask.ToPosition(hookPositionStart))
		{
			//Logging.Write("done to hook start");
			return true;
		}
		//Logging.Write("pulse end");
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(41949);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(41949);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Fathnyr</Name>
      <QuestId>
        <int>43621</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		uint harpoonId = 138111;
		int harpoonQuestId = 39775;
		var hooksPointsid = new List&lt;int&gt;() {
			91983,
			92072,
			92017,
			91975,
			92022,
		};
		var campPosition = new Vector3(1955.724, 2335.235, 507.5276, "None");
		var centerPositon = new Vector3(2037.128, 2403.265, 481.1568, "None");
		var hookPositionStart = new Vector3(2160.899, 2427.52, 481.8189, "None");
		var hookPositionEnd = new Vector3(2127.559, 2410.447, 479.3398, "None");

		var hookPositionStart2 = new Vector3(1995.742, 2373.515, 482.8171, "None");
		var hookPositionEnd2 = new Vector3(1983.813, 2368.278, 506.8061, "None");
		var maxDist = centerPositon.DistanceTo(hookPositionEnd) + 10;
		var maxDist2 = campPosition.DistanceTo(hookPositionEnd2) + 10;

		if (!(Quest.GetQuestCompleted(harpoonQuestId) || ItemsManager.HasItemById(harpoonId)))
		{
			Logging.WriteError("Need Stormforged Grapple Launcher");
			return true;
		}
		if (ObjectManager.Me.Position.DistanceTo(hookPositionEnd2) &lt; 10 || ObjectManager.Me.Position.DistanceTo(campPosition) &lt; maxDist2)
		{
			var mobs = new List&lt;int&gt;() { 91803 }; //Fathnyr
			WorldQuest.TryKillElite(campPosition, mobs);
			return true;
		}
		//hook 1
		if (ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; 10)
		{
			//Logging.Write("at hook position");
			var hookPoints = ObjectManager.GetWoWUnitByEntry(hooksPointsid);
			foreach (var hookPoint in hookPoints)
			{
				if (hookPoint.Position.DistanceTo(hookPositionEnd) &lt; 10)
				{
					//Logging.Write("found hook at place. using it");
					Interact.InteractGameObject(hookPoint.GetBaseAddress);
					Thread.Sleep(10 * 1000);
					//hook 2
					if (GoToTask.ToPosition(hookPositionStart2))
					{
						//Logging.Write("at hook position2");
						var hookPoints2 = ObjectManager.GetWoWUnitByEntry(hooksPointsid);
						foreach (var hookPoint2 in hookPoints2)
						{
							if (hookPoint2.Position.DistanceTo(hookPositionEnd2) &lt; 10)
							{
								//Logging.Write("found hook2 at place. using it");
								Interact.InteractGameObject(hookPoint2.GetBaseAddress);
								Thread.Sleep(10 * 1000);
								return true;
							}
						}
						//Logging.Write("dont see harpoon points");
					}
					return true;
				}
			}
			//Logging.Write("dont see harpoon points");
			return true;
		}
		if (GoToTask.ToPosition(hookPositionStart))
		{
			//Logging.Write("done to hook start");
			return true;
		}
		//Logging.Write("pulse end");
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.CanGroup(43621);</CanCondition>
      <IsCompleteCondition>return WorldQuest.CompleteGroup(43621);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Fathnyr 2</Name>
      <QuestId>
        <int>43434</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		uint harpoonId = 138111;
		int harpoonQuestId = 39775;
		var hooksPointsid = new List&lt;int&gt;() {
			91983,
			92072,
			92017,
			91975,
			92022,
		};
		var campPosition = new Vector3(1955.724, 2335.235, 507.5276, "None");
		var centerPositon = new Vector3(2037.128, 2403.265, 481.1568, "None");
		var hookPositionStart = new Vector3(2160.899, 2427.52, 481.8189, "None");
		var hookPositionEnd = new Vector3(2127.559, 2410.447, 479.3398, "None");

		var hookPositionStart2 = new Vector3(1995.742, 2373.515, 482.8171, "None");
		var hookPositionEnd2 = new Vector3(1983.813, 2368.278, 506.8061, "None");
		var maxDist = centerPositon.DistanceTo(hookPositionEnd) + 10;
		var maxDist2 = campPosition.DistanceTo(hookPositionEnd2) + 10;

		if (!(Quest.GetQuestCompleted(harpoonQuestId) || ItemsManager.HasItemById(harpoonId)))
		{
			Logging.WriteError("Need Stormforged Grapple Launcher");
			return true;
		}
		if (ObjectManager.Me.Position.DistanceTo(hookPositionEnd2) &lt; 10 || ObjectManager.Me.Position.DistanceTo(campPosition) &lt; maxDist2)
		{
			var mobs = new List&lt;int&gt;() { 91803 }; //Fathnyr
			WorldQuest.TryKillElite(campPosition, mobs);
			return true;
		}
		//hook 1
		if (ObjectManager.Me.Position.DistanceTo(hookPositionStart) &lt; 10)
		{
			//Logging.Write("at hook position");
			var hookPoints = ObjectManager.GetWoWUnitByEntry(hooksPointsid);
			foreach (var hookPoint in hookPoints)
			{
				if (hookPoint.Position.DistanceTo(hookPositionEnd) &lt; 10)
				{
					//Logging.Write("found hook at place. using it");
					Interact.InteractGameObject(hookPoint.GetBaseAddress);
					Thread.Sleep(10 * 1000);
					//hook 2
					if (GoToTask.ToPosition(hookPositionStart2))
					{
						//Logging.Write("at hook position2");
						var hookPoints2 = ObjectManager.GetWoWUnitByEntry(hooksPointsid);
						foreach (var hookPoint2 in hookPoints2)
						{
							if (hookPoint2.Position.DistanceTo(hookPositionEnd2) &lt; 10)
							{
								//Logging.Write("found hook2 at place. using it");
								Interact.InteractGameObject(hookPoint2.GetBaseAddress);
								Thread.Sleep(10 * 1000);
								return true;
							}
						}
						//Logging.Write("dont see harpoon points");
					}
					return true;
				}
			}
			//Logging.Write("dont see harpoon points");
			return true;
		}
		if (GoToTask.ToPosition(hookPositionStart))
		{
			//Logging.Write("done to hook start");
			return true;
		}
		//Logging.Write("pulse end");
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.CanGroup(43434);</CanCondition>
      <IsCompleteCondition>return WorldQuest.CompleteGroup(43434);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Thane Irglov</Name>
      <QuestId>
        <int>43626</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(2401.441, 2629.866, 298.1591, "None");
		var mobs = new List&lt;int&gt;() { 91892 };
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.CanGroup(43626);</CanCondition>
      <IsCompleteCondition>return WorldQuest.CompleteGroup(43626);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Thane Irglov 2</Name>
      <QuestId>
        <int>43437</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(2401.441, 2629.866, 298.1591, "None");
		var mobs = new List&lt;int&gt;() { 91892 };
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.CanGroup(43437);</CanCondition>
      <IsCompleteCondition>return WorldQuest.CompleteGroup(43437);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Glimar Ironfist</Name>
      <QuestId>
        <int>43622</int>
        <int>43436</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(2589.118, 2590.442, 229.2603, "None");
		var mobs = new List&lt;int&gt;() {
			91529, // http://www.wowhead.com/npc=91529/glimar-ironfist
		};
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>camelot10\Libs\WorldQuest.cs</Script>
  <OffMeshConnections />
</EasyQuestProfile>