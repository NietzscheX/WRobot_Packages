<?xml version="1.0" encoding="utf-16"?>
<EasyQuestProfile xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="// Map ID = Suramar  //  &#xD;&#xA;robotManager.Helpful.Var.SetVar(&quot;WorldQuestCurrentMapId&quot;, 1033);" />
    <QuestsSorted Action="WriteLog" NameClass="Suramar NE-SE-E-N-NW-C-(S)-SW-W profile start" />
    <QuestsSorted Action="Pulse" NameClass="TravelToSuramar" />
    <QuestsSorted Action="None" NameClass="=== S === " />
    <QuestsSorted Action="RunCode" NameClass="SuramarQuests.Masquerade.Start();" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDLieutenantStrathmar" />
    <QuestsSorted Action="Pulse" NameClass="DANGERVolshaxBreakerofWill" />
    <QuestsSorted Action="Pulse" NameClass="FreeingtheTaken" />
    <QuestsSorted Action="Pulse" NameClass="RunningonEmpty1" />
    <QuestsSorted Action="Pulse" NameClass="RunningonEmpty2" />
    <QuestsSorted Action="Pulse" NameClass="PestManagement" />
    <QuestsSorted Action="Pulse" NameClass="PestManagement2" />
    <QuestsSorted Action="Pulse" NameClass="LifeFindsaWay" />
    <QuestsSorted Action="RunCode" NameClass="WorldQuest.SetDefaultSettings();" />
    <QuestsSorted Action="Pulse" NameClass="ADraughtofHope" />
    <QuestsSorted Action="Pulse" NameClass="MeetingtheirQuota" />
    <QuestsSorted Action="Pulse" NameClass="SharingtheWealth" />
    <QuestsSorted Action="Pulse" NameClass="ArmingthePopulace" />
    <QuestsSorted Action="Pulse" NameClass="ASpyinOurMidst" />
    <QuestsSorted Action="Pulse" NameClass="SafeKeeping" />
    <QuestsSorted Action="Pulse" NameClass="ForcesofOppression" />
    <QuestsSorted Action="Pulse" NameClass="HelpontheWay" />
    <QuestsSorted Action="Pulse" NameClass="Lifelines" />
    <QuestsSorted Action="Pulse" NameClass="SecretCorrespondence" />
    <QuestsSorted Action="Pulse" NameClass="WANTEDMagisterPhaedris" />
    <QuestsSorted Action="Pulse" NameClass="DANGERMagistrixVilessa" />
    <QuestsSorted Action="Pulse" NameClass="SickoftheSycophantsGroup" />
    <QuestsSorted Action="Pulse" NameClass="StellerisShakedownGroup" />
    <QuestsSorted Action="Pulse" NameClass="DANGERAuditorEsiel" />
    <QuestsSorted Action="Pulse" NameClass="FlightMastersWhistle" />
    <QuestsSorted Action="RunCode" NameClass="SuramarQuests.Masquerade.Stop();" />
    <QuestsSorted Action="None" NameClass="=== SW === " />
    <QuestsSorted Action="WriteLog" NameClass="Suramar NE-SE-E-N-NW-C-(S)-SW-W profile complete. Loading next profile." />
    <QuestsSorted Action="LoadProfile" NameClass="camelot10\Legion world quests\Suramar\[110] Suramar SW.xml" />
  </QuestsSorted>
  <NpcQuest>
    <NPCQuest Id="97140" Name="Первая чародейка Талисра" GameObject="false">
      <PickUpQuests />
      <TurnInQuests>
        <int>42421</int>
      </TurnInQuests>
      <Position X="1734.486" Y="4599.241" Z="96.28265" />
    </NPCQuest>
  </NpcQuest>
  <Npc>
    <Npc>
      <Position X="1761.358" Y="4640.597" Z="123.8659" />
      <Entry>257977</Entry>
      <Name>Mailbox</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Mailbox</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
    <Npc>
      <Position X="794.6371" Y="5185.601" Z="37.39329" />
      <Entry>98969</Entry>
      <Name>Stalriss Dawnrunner</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Vendor</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
    <Npc>
      <Position X="794.6371" Y="5185.601" Z="37.39329" />
      <Entry>98969</Entry>
      <Name>Stalriss Dawnrunner</Name>
      <GossipOption>-1</GossipOption>
      <Active>true</Active>
      <Faction>Neutral</Faction>
      <Type>Repair</Type>
      <ContinentId>Troll_Raid</ContinentId>
    </Npc>
  </Npc>
  <Blackspots>
    <Blackspot X="2094.86841" Y="4027.04565" Z="219.471191" Radius="30" />
    <Blackspot X="1487.42529" Y="4546.066" Z="123.546295" Radius="21" />
    <Blackspot X="2247.62378" Y="4221.041" Z="274.195862" Radius="22" />
    <Blackspot X="2367.89087" Y="4493.347" Z="261.013336" Radius="4.6" />
    <Blackspot X="2368.62231" Y="4496.402" Z="260.508179" Radius="4.6" />
    <Blackspot X="2368.80176" Y="4499.93945" Z="260.2146" Radius="4.6" />
    <Blackspot X="2368.91919" Y="4502.60352" Z="260.2185" Radius="4.6" />
    <Blackspot X="2368.62842" Y="4505.898" Z="260.085571" Radius="4.6" />
    <Blackspot X="2366.98022" Y="4508.839" Z="259.4887" Radius="4.6" />
    <Blackspot X="2364.26074" Y="4510.96973" Z="259.1518" Radius="4.6" />
    <Blackspot X="2360.426" Y="4513.10547" Z="257.197876" Radius="4.6" />
    <Blackspot X="2359.27783" Y="4515.341" Z="256.8019" Radius="4.6" />
    <Blackspot X="2356.66187" Y="4517.496" Z="256.402557" Radius="4.6" />
    <Blackspot X="2355.6543" Y="4518.08447" Z="256.251343" Radius="4.6" />
    <Blackspot X="2352.68359" Y="4517.76074" Z="259.414246" Radius="4.6" />
    <Blackspot X="2351.39258" Y="4517.088" Z="259.9789" Radius="4.6" />
    <Blackspot X="2349.03638" Y="4515.486" Z="256.009125" Radius="4.6" />
    <Blackspot X="2344.653" Y="4517.745" Z="256.380981" Radius="4.6" />
    <Blackspot X="2342.30249" Y="4517.477" Z="256.582916" Radius="4.6" />
    <Blackspot X="2340.84888" Y="4516.335" Z="256.103363" Radius="4.6" />
    <Blackspot X="2340.5022" Y="4516.001" Z="256.1711" Radius="4.6" />
    <Blackspot X="2339.33179" Y="4514.89746" Z="256.550079" Radius="4.6" />
    <Blackspot X="2338.095" Y="4513.797" Z="256.961975" Radius="4.6" />
    <Blackspot X="2336.94" Y="4512.79248" Z="257.350525" Radius="4.6" />
    <Blackspot X="2335.626" Y="4511.5083" Z="257.769958" Radius="4.6" />
    <Blackspot X="2334.19629" Y="4510.015" Z="258.2107" Radius="4.6" />
    <Blackspot X="2333.29761" Y="4508.942" Z="258.6263" Radius="4.6" />
    <Blackspot X="2333.258" Y="4508.32129" Z="258.79007" Radius="4.6" />
    <Blackspot X="2333.10522" Y="4506.615" Z="259.261261" Radius="4.6" />
    <Blackspot X="2333.0376" Y="4504.545" Z="259.778168" Radius="4.6" />
    <Blackspot X="2332.79785" Y="4501.687" Z="260.560669" Radius="4.6" />
    <Blackspot X="2332.79443" Y="4499.784" Z="260.904541" Radius="4.6" />
    <Blackspot X="2333.21436" Y="4498.69434" Z="260.932129" Radius="4.6" />
    <Blackspot X="2334.12769" Y="4496.40869" Z="260.963379" Radius="4.6" />
    <Blackspot X="2334.70435" Y="4494.63574" Z="261.0628" Radius="4.6" />
    <Blackspot X="2338.21362" Y="4496.459" Z="258.643677" Radius="4.6" />
    <Blackspot X="2340.31836" Y="4495.09668" Z="258.642944" Radius="4.6" />
    <Blackspot X="2340.88477" Y="4494.23975" Z="258.66745" Radius="4.6" />
    <Blackspot X="2344.00537" Y="4488.448" Z="259.610382" Radius="4.6" />
  </Blackspots>
  <BlackGuids />
  <EasyQuests>
    <EasyQuest>
      <Name>+FlightMastersWhistle</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>//FLIGHT MASTERS WHISTLE START
public sealed class FlightMastersWhistle : wManager.Wow.Class.QuestClass
{
	uint whistleId = 141605;

	public FlightMastersWhistle()
	{
		Name = "+FlightMastersWhistle";
		QuestId.AddRange(new[] { 0 });
		Step = new System.Collections.Generic.List&lt;int&gt; { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		StepAutoDetect = new[] { false, false, false, false, false, false, false, false, false, false };
		PickUpQuestOnItem = false;
		PickUpQuestOnItemID = 0;
		GossipOptionItem = 1;
		WoWClass = wManager.Wow.Enums.WoWClass.None;
		MinLevel = 0;
		MaxLevel = 999;
		RequiredQuest = 0;
	}

	public override bool CanConditions()
	{
		return WorldQuest.Whistle.Can();
	}

	public override bool IsComplete()
	{
		return !WorldQuest.Whistle.Can();
	}

	public override bool IsCompleted()
	{
		return IsComplete();
	}

	public override bool HasQuest()
	{
		return CanConditions();
	}

	public override bool Pulse()
	{
		WorldQuest.Whistle.Use();
		return true;
	}

}
//FLIGHT MASTERS WHISTLE END</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>		var timeLeft = wManager.Wow.Helpers.Lua.LuaDoString&lt;double&gt;("local startTime, duration, enable = GetItemCooldown(" + 141605 + "); return startTime + duration - GetTime();");
		return !ObjectManager.Me.IsIndoors &amp;&amp; timeLeft &lt;= 0;</CanCondition>
      <IsCompleteCondition>		var timeLeft = wManager.Wow.Helpers.Lua.LuaDoString&lt;double&gt;("local startTime, duration, enable = GetItemCooldown(" + 141605 + "); return startTime + duration - GetTime();");
		return ObjectManager.Me.IsIndoors || timeLeft &gt; 0;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>+SuramarHelper</Name>
      <QuestId />
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif
/*
//*/
public sealed class SuramarHelper : QuestClass
{
	bool Usage()
	{
		if (SuramarHelper.TryMasquerade())
			return true;

		return true;
	}
	public SuramarHelper()
	{
		Name = "+SuramarHelper";
		QuestId.Add(0);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
	}

	public static bool TryMasquerade()
	{
		uint spellId = 202477;
		if (ObjectManager.Me.HaveBuff(202477))
			return false;

		var lua = @"
local extraPage = GetExtraBarIndex()
local slot = extraPage * 12 - 11
if HasExtraActionBar() then
	local action, id, subType, spellID = GetActionInfo(slot)
	if id then
		return id
	end
end
return 0";

		var extraSpellId = Lua.LuaDoString&lt;int&gt;(lua);
		if (extraSpellId == spellId)
		{
			MovementManager.StopMove();
			wManager.Wow.Helpers.Lua.LuaDoString("ExtraActionButton1:Click()");
			Thread.Sleep(2 * 1000);
			return true;
		}
		return false;
	}


}
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>+Travel To Suramar</Name>
      <QuestId />
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Travel.ToZone(WorldQuest.MapId.Suramar);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Arming the Populace</Name>
      <QuestId>
        <int>44769</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var center = new Vector3(730.5894, 3939.962, 5.685725, "None");
		var armsCacheId = 266032;
		uint armsItemId = 142216;
		var rebelsId = new List&lt;int&gt;() {
			115338,
		};

		if (ObjectManager.Me.Position.DistanceTo(center) &gt; 200)
		{
			//Logging.Write("to quest area");
			GoToTask.ToPosition(center);
			return true;
		}

		if (ItemsManager.HasItemById(armsItemId))
		{
			var mobEntry = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(rebelsId));
			if (mobEntry != null &amp;&amp; mobEntry.IsValid &amp;&amp; mobEntry.IsAlive)
			{
				if (ObjectManager.Me.Position.DistanceTo(mobEntry.Position) &gt; 5)
				{
					//Logging.Write("have arms, found rebel, but too far, getting closer");
					GoToTask.ToPosition(mobEntry.Position);
					return true;
				}
				//Logging.Write("have arms, found rebel, ARMS DROP");
				ItemsManager.UseItem(armsItemId);
				Thread.Sleep(Usefuls.Latency * 2);
				ClickOnTerrain.Pulse(mobEntry.Position);
				Usefuls.WaitIsCasting();
				return true;
			}
			//Logging.Write("no rebels around. waiting");
			return true;
		}
		var armsCache = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(armsCacheId));
		if (armsCache != null &amp;&amp; armsCache.IsValid)
		{
			bool canGetCache = false;
			var path = PathFinder.FindPath(armsCache.Position, out canGetCache);
			if (canGetCache)
			{
				//Logging.Write("found arms cache, taking");
				GoToTask.ToPositionAndIntecractWithGameObject(armsCache.Position, armsCacheId);
				return true;
			}
			else
			{
				//Logging.Write("found arms cache, can't take it, ignore");
				wManager.wManagerSetting.AddBlackList(armsCache.Guid, 1000 * 10 * 60);
				return true;
			}
		}

		//Logging.Write("no arms cache around, waiting");
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(44769);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(44769);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>DANGER: Magistrix Vilessa</Name>
      <QuestId>
        <int>44114</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(534.3696, 3948.675, 38.82995, "None");
		var mobs = new List&lt;int&gt;() { 112757 }; //Magistrix Vilessa
		WorldQuest.TryKillRaid(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>DANGER: Volshax, Breaker of Will</Name>
      <QuestId>
        <int>44119</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		if (SuramarHelper.TryMasquerade())
			return true;

		var campPosition = new Vector3(1271.754, 3949.297, 33.86985, "None");
		var mobs = new List&lt;int&gt;() {
			112760, // http://www.wowhead.com/npc=112760/volshax-breaker-of-will
		};
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Freeing the Taken</Name>
      <QuestId>
        <int>42209</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

public sealed class FreeingtheTaken : QuestGathererClass
{
	public FreeingtheTaken()
	{
		Name = "Freeing the Taken";
		QuestId.Add(42209);
		Step.AddRange(new[] { 0, 0, 0, 0, 0 });
		EntryIdObjects.Add(251190); // http://www.wowhead.com/object=251190/containment-field
		HotSpots.AddRange(new List&lt;Vector3&gt;() {
			new Vector3(1028.183, 4039.236, 1.422485, "None"),
			new Vector3(956.591, 4147.711, 1.422389, "None"),
			new Vector3(986.007, 4184.023, 1.422389, "None"),
			new Vector3(1000.817, 4083.123, 16.70764, "None"),
			new Vector3(1016.061, 3972.271, 16.70821, "None"),
		});
	}
	void Log(string text)
	{
		Logging.Write("[" + Name + "] " + text);
	}

	bool TryKill()
	{
		var mobs = new List&lt;int&gt;()
		{
			108096, // http://www.wowhead.com/npc=108096/duskwatch-scion
		};
		uint orbId = 138301; // http://www.wowhead.com/item=138301/control-orb
		if (ItemsManager.HasItemById(orbId))
			return false;

		var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(mobs));
		if (mob != null &amp;&amp; mob.IsAlive &amp;&amp; mob.IsAttackable &amp;&amp; mob.IsValid)
		{
			Log("target boss " + mob.Name);
			Interact.InteractGameObject(mob.GetBaseAddress);
			Fight.StartFight(mob.Guid);
			return true;
		}
		return false;
	}


	public override bool Pulse()
	{
		if (SuramarHelper.TryMasquerade())
			return true;

		if (TryKill())
			return true;

		return base.Pulse();
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
	public override bool CanConditions()
	{
		return WorldQuest.Can(this);
	}
	public override bool IsComplete()
	{
		return WorldQuest.Complete(this);
	}

}
</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Meeting their Quota</Name>
      <QuestId>
        <int>42880</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var npcId = 109202;
		var npcGameId = 109212;
		var npcPosition = new Vector3(1350.965, 3290.406, 132.8775, "None");

		var stompPosition = new Vector3(1358.698, 3294.259, 133.5806, "None");

		uint miniGameBuffId = 224237; //http://www.wowhead.com/spell=224237/vineyard-minigame-tracking-aura
		uint stompGrapesBuffId = 217202;

		uint addShadefruitBuffId = 217203;
		var shadefruitObjectId = 251493;

		uint addNightLilyBuffId = 217205;
		var silverJasminObjectId = 251494;

		uint addPurifiedWaterBuffId = 217204;
		var purifiedWaterObjectId = 251492;


		var npc = ObjectManager.GetObjectWoWUnit().Where(u =&gt; u.IsValid &amp;&amp; (u.Entry == npcId || u.Entry == npcGameId)).FirstOrDefault();
		if (npc == null || !npc.HaveBuff(miniGameBuffId))
		{
			GoToTask.ToPositionAndIntecractWithNpc(npcPosition, npcId, 1);
			return true;
		}
		MountTask.DismountMount();
		//stomp
		if (npc.HaveBuff(stompGrapesBuffId))
		{
			//Logging.Write("go to jump");
			if (GoToTask.ToPosition(stompPosition))
			{
				//Logging.Write("jump");
				Move.JumpOrAscend();
				Thread.Sleep(Others.Random(1000, 1500));
			}
		}
		else if (npc.HaveBuff(addShadefruitBuffId))
		{
			//Logging.Write("shadefruid");
			GoToTask.ToPositionAndIntecractWithGameObject(stompPosition, shadefruitObjectId);
		}
		else if (npc.HaveBuff(addNightLilyBuffId))
		{
			//Logging.Write("nightlily");
			GoToTask.ToPositionAndIntecractWithGameObject(stompPosition, silverJasminObjectId);
		}
		else if (npc.HaveBuff(addPurifiedWaterBuffId))
		{
			//Logging.Write("pure water");
			GoToTask.ToPositionAndIntecractWithGameObject(stompPosition, purifiedWaterObjectId);
		}

		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition>return WorldQuest.Can(this);</CanCondition>
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Safe Keeping</Name>
      <QuestId>
        <int>44799</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(467.31, 4141.727, 1.46252, "None");
		var p2 = new Vector3(491.4389, 4105.44, 8.204191, "None");
		var npcIDs = new List&lt;int&gt;() { 115630, 115702, 115705, 115696, };
		var npc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(npcIDs));
		if (npc != null &amp;&amp; npc.IsValid &amp;&amp; npc.Position.DistanceTo(p) &lt; 30)
		{
			GoToTask.ToPositionAndIntecractWithNpc(npc.Position, npc.Entry);
			return true;
		}
		if (ObjectManager.Me.HaveBuff(229839))
		{
			GoToTask.ToPosition(p2);
			return true;
		}
		GoToTask.ToPosition(p);
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>8</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>The Nighthold: Supply Routes (Dungeon)</Name>
      <QuestId>
        <int>44936</int>
      </QuestId>
      <QuestType>None</QuestType>
      <QuestClass />
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Lieutenant Strathmar</Name>
      <QuestId>
        <int>44028</int>
        <int>44019</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		if (SuramarHelper.TryMasquerade())
			return true;
		var campPosition = new Vector3(1376.832, 3982.873, 132.4692, "None");
		var mobs = new List&lt;int&gt;() { 102303 }; //Lieutenant Strathmar
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Running on Empty 1</Name>
      <QuestId>
        <int>44812</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="1427.568" Y="3466.892" Z="133.1433" />
          <Vector3 X="1502.234" Y="3540.077" Z="134.6944" />
          <Vector3 X="1441.561" Y="3357.765" Z="132.9219" />
          <Vector3 X="1337.315" Y="3298.098" Z="132.9829" />
          <Vector3 X="1268.836" Y="3187.334" Z="133.6512" />
        </HotSpots>
        <EntryIdObjects>
          <int>266301</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>3</ObjectiveCount1>
      <ObjectiveCount2>5</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this, 1);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Running on Empty 2</Name>
      <QuestId>
        <int>44812</int>
      </QuestId>
      <QuestType>Gatherer</QuestType>
      <QuestClass xsi:type="GathererEasyQuestClass">
        <HotSpots>
          <Vector3 X="1427.568" Y="3466.892" Z="133.1433" />
          <Vector3 X="1502.234" Y="3540.077" Z="134.6944" />
          <Vector3 X="1441.561" Y="3357.765" Z="132.9219" />
          <Vector3 X="1337.315" Y="3298.098" Z="132.9829" />
          <Vector3 X="1268.836" Y="3187.334" Z="133.6512" />
        </HotSpots>
        <EntryIdObjects>
          <int>266298</int>
        </EntryIdObjects>
      </QuestClass>
      <ObjectiveCount1>3</ObjectiveCount1>
      <ObjectiveCount2>5</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this, 2);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Lifelines</Name>
      <QuestId>
        <int>44744</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="742.838" Y="3911.197" Z="5.683307" />
          <Vector3 X="787.5393" Y="3921.751" Z="9.822489" />
          <Vector3 X="827.1953" Y="3915.385" Z="10.57106" />
          <Vector3 X="808.2906" Y="3935.617" Z="10.57028" />
          <Vector3 X="738.5184" Y="3907.49" Z="5.683356" />
        </HotSpots>
        <EntryTarget>
          <int>115216</int>
          <int>115249</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Sick of the Sycophants (Group)</Name>
      <QuestId>
        <int>44815</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var hotspot = new Vector3(1058.668, 3453.95, 21.77441, "None");
		var mobs = new List&lt;int&gt;() { 111489, 111490 };
		uint itemID = 142401;
		if (ObjectManager.Me.Position.DistanceTo(hotspot) &gt; 50)
		{
			GoToTask.ToPosition(hotspot);
			return true;
		}
		var mob = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(mobs));
		if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive &amp;&amp; mob.IsAlive &amp;&amp; mob.GetDistance &lt; 50) //&amp;&amp; mob.IsIndoors)
		{
			if (!TraceLine.TraceLineGo(mob.Position))
			{
				ItemsManager.UseItem(itemID);
				Thread.Sleep(Usefuls.Latency * 2);
				ClickOnTerrain.Pulse(mob.Position);
				Usefuls.WaitIsCasting();
			}
			Interact.InteractGameObject(mob.GetBaseAddress);
			Fight.StartFight(mob.Guid);
		}
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>WANTED: Magister Phaedris</Name>
      <QuestId>
        <int>44018</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(525.7079, 4349.11, 137.9271, "None");
		var mobs = new List&lt;int&gt;() 
		{
			109954,//magister-phaedris
		};
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>DANGER: Auditor Esiel</Name>
      <QuestId>
        <int>44118</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var campPosition = new Vector3(940.9937, 3492.819, -1.829768, "Swimming");
		var mobs = new List&lt;int&gt;() 
		{
			112758,//Auditor Esiel
		};
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>0</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Pest Management</Name>
      <QuestId>
        <int>42830</int>
      </QuestId>
      <QuestType>InteractWithNpc</QuestType>
      <QuestClass xsi:type="InteractWithNpcEasyQuestClass">
        <HotSpots>
          <Vector3 X="1300.912" Y="3110.325" Z="131.9451" />
          <Vector3 X="1260.736" Y="3116.778" Z="131.9451" />
          <Vector3 X="1240.658" Y="3175.986" Z="131.9451" />
          <Vector3 X="1270.357" Y="3225.321" Z="131.9195" />
          <Vector3 X="1305.722" Y="3269.515" Z="131.9451" />
          <Vector3 X="1367.664" Y="3228.255" Z="131.9451" />
          <Vector3 X="1369.984" Y="3184.167" Z="131.9451" />
        </HotSpots>
        <GossipOptionNpcInteractWith>1</GossipOptionNpcInteractWith>
        <Macro />
        <IgnoreIfDead>false</IgnoreIfDead>
        <EntryIdTarget>
          <int>109023</int>
        </EntryIdTarget>
        <Range>4.5</Range>
      </QuestClass>
      <ObjectiveCount1>8</ObjectiveCount1>
      <ObjectiveCount2>8</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this, 1);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Pest Management 2</Name>
      <QuestId>
        <int>42830</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="1371.607" Y="3181.552" Z="131.9451" />
          <Vector3 X="1324.871" Y="3124.422" Z="131.9451" />
          <Vector3 X="1268.001" Y="3120.197" Z="131.9451" />
          <Vector3 X="1240.177" Y="3173.933" Z="131.9451" />
          <Vector3 X="1273.676" Y="3221.652" Z="131.9195" />
          <Vector3 X="1288.8" Y="3243.584" Z="131.9091" />
          <Vector3 X="1333.162" Y="3255.625" Z="132.0753" />
          <Vector3 X="1383.253" Y="3208.108" Z="131.9451" />
        </HotSpots>
        <EntryTarget>
          <int>109180</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>8</ObjectiveCount1>
      <ObjectiveCount2>8</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this, 2);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Help on the Way</Name>
      <QuestId>
        <int>44811</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var minDist = 4f;
		var maxDist = 7.9f;
		var hotspots = new List&lt;Vector3&gt;()
		{
			new Vector3(638.8924, 3873.87, 5.704087),
			new Vector3(606.0243, 3977.057, 1.479222),
			new Vector3(627.6233, 3990.815, 1.493116),
			new Vector3(576.6996, 4140.164, 6.446392),
			new Vector3(498.8184, 4082.349, 1.641463),
			new Vector3(428.8905, 3868.308, 1.493321),
			new Vector3(458.507, 3796.811, 1.493484),
			new Vector3(478.5104, 3816.078, 1.493527),
		};
		var deltas = new List&lt;Vector3&gt;()
		{
			new Vector3(0, 0, 0) * minDist,
			new Vector3(1, 0, 0) * minDist,
			new Vector3(-1, 0, 0) * minDist,
			new Vector3(0, 1, 0) * minDist,
			new Vector3(0, -1, 0) * minDist,
			new Vector3(1, 1, 0) * minDist,
			new Vector3(-1, 1, 0) * minDist,
			new Vector3(1, -1, 0) * minDist,
			new Vector3(-1, -1, 0) * minDist,
		};
		var notice = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(266285));
		if (notice != null &amp;&amp; notice.IsValid)
		{
			if (notice.GetDistance &lt; maxDist)
			{
				Logging.WriteDebug("[Help on the Way] use notice " + notice.Name);
				MountTask.DismountMount();
				Thread.Sleep(Usefuls.Latency * 2);
				Interact.InteractGameObject(notice.GetBaseAddress, true, false);
				if (!wManager.wManagerSetting.IsBlackListed(notice.Guid))
					wManager.wManagerSetting.AddBlackList(notice.Guid, 5 * 60 * 1000, true);

				return true;
			}
			var result = false;
			foreach (var delta in deltas)
			{
				var p = notice.Position + delta;
				var path = PathFinder.FindPath(p, out result);
				if (result)
				{
					Logging.WriteDebug("[Help on the Way] found good notice landpoint " + notice.Position.ToStringNewVector()+" + "+ delta.ToStringNewVector() );
					GoToTask.ToPosition(p);
					return true;
				}
			}
			if (!wManager.wManagerSetting.IsBlackListed(notice.Guid))
			{
				Logging.WriteDebug("[Help on the Way] blacklist " + notice.Name + " at " +notice.Position.ToStringNewVector() );
				wManager.wManagerSetting.AddBlackList(notice.Guid, 5 * 60 * 1000, true);
			}
			return true;
		}
		var p0 = hotspots[Others.Random(0, hotspots.Count - 1)];
		Logging.WriteDebug("[Help on the Way] searching notices at " + p0.ToStringNewVector());
		GoToTask.ToPosition(p0);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>8</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>A Draught of Hope</Name>
      <QuestId>
        <int>42859</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(488.0417, 3778.263, 1.493567, "None");
		if (!WorldQuest.Complete(this, 1))
		{
			Logging.WriteDebug("[A Draught of Hope] take vine");
			GoToTask.ToPositionAndIntecractWithNpc(p, 109442, 1);
			return true;
		}
		var hotspots = new List&lt;Vector3&gt;()
		{
			new Vector3(481.7989, 3828.576, 1.493205, "None"),
			new Vector3(460.1818, 3904.605, 1.493911, "None"),
			new Vector3(543.431, 3977.763, 5.686279, "None"),
			new Vector3(612.7214, 3920.08, 5.685428, "None"),
			new Vector3(691.3199, 3961.47, 5.685488, "None"),
			new Vector3(647.5059, 4043.195, 1.823143, "None"),
			new Vector3(622.3457, 4129.489, 1.493084, "None"),
			new Vector3(518.8384, 4095.678, 6.603748, "None"),
		};
		var npcID = new List&lt;int&gt;()
		{
			109409,
			113457,
		};
		var npc = Questing.FindUnit(npcID);
		if (npc != null &amp;&amp; npc.IsValid)
		{
			if (!Questing.CheckGUID(npc.Guid, 1, 5))
			{
				Logging.WriteDebug("[A Draught of Hope] blacklist " + npc.Name);
				return true;
			}
			GoToTask.ToPositionAndIntecractWithNpc(npc.Position, npc.Entry, 1);
			return true;
		}
		var p2 = hotspots[Others.Random(0, hotspots.Count - 1)];
		GoToTask.ToPosition(p2, 3.5f, false, (c)=&gt;{
			var n = Questing.FindUnit(npcID);
			if (n != null &amp;&amp; n.IsValid)
				return false;

			return true;
		});
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>8</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Sharing the Wealth</Name>
      <QuestId>
        <int>42725</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var vine = Questing.FindObject(250240, 250239);
		if (vine != null &amp;&amp; vine.IsValid &amp;&amp; Questing.CheckGUID(vine.Guid, 1, 3))
		{
			var p = vine.Position;
			var dir = p - ObjectManager.Me.Position;
			dir /= dir.Magnitude();
			p -= (dir * 3);
			Questing.Gather(p, vine.Entry, 4f);
			return true;
		}
		GoToTask.ToPosition(new Vector3(573.0801, 3935.646, 5.68634, "None"));
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>20</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Forces of Oppression</Name>
      <QuestId>
        <int>43932</int>
      </QuestId>
      <QuestType>KillAndLoot</QuestType>
      <QuestClass xsi:type="KillAndLootEasyQuestClass">
        <HotSpots>
          <Vector3 X="865.6282" Y="4139.923" Z="1.493235" />
          <Vector3 X="851.524" Y="4162.63" Z="1.493821" />
          <Vector3 X="778.4547" Y="4136.452" Z="2.875594" />
          <Vector3 X="680.6476" Y="4165.841" Z="1.493116" />
          <Vector3 X="623.6024" Y="4157.58" Z="1.493353" />
          <Vector3 X="560.1016" Y="4172.504" Z="6.394556" />
          <Vector3 X="593.6816" Y="4127.048" Z="1.582096" />
          <Vector3 X="330.5796" Y="3859.413" Z="1.493209" />
          <Vector3 X="360.217" Y="3824.731" Z="1.493245" />
          <Vector3 X="401.25" Y="3801.61" Z="1.509904" />
        </HotSpots>
        <EntryTarget>
          <int>109199</int>
          <int>107449</int>
          <int>109473</int>
          <int>113679</int>
          <int>114474</int>
          <int>115241</int>
          <int>112821</int>
          <int>113462</int>
          <int>99755</int>
          <int>107450</int>
          <int>111446</int>
          <int>114468</int>
          <int>114480</int>
          <int>115249</int>
          <int>112822</int>
          <int>113463</int>
          <int>106032</int>
          <int>108930</int>
          <int>111612</int>
          <int>114470</int>
          <int>114868</int>
          <int>116013</int>
          <int>106654</int>
          <int>109048</int>
          <int>111619</int>
          <int>114472</int>
          <int>115216</int>
          <int>113452</int>
          <int>113465</int>
        </EntryTarget>
        <IsGrinderNotQuest>false</IsGrinderNotQuest>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>		if (WorldQuest.Has(this))
		{
			var hasQuest = false;
			foreach (var questID in QuestId)
			{
				if (hasQuest)
					break;
				hasQuest = Quest.HasQuest(questID);
			}
			if (!hasQuest)
			{
				Logging.WriteDebug("[" + Name + "] no quest. goto start");
				GoToTask.ToPosition(new Vector3(378.1605, 3930.87, 1.388305, "None"));
			}
			return false;
		}
		return true;</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Stelleris Shakedown (Group)</Name>
      <QuestId>
        <int>43959</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var mobID = 112005;
		var campPosition = new Vector3(1046.137, 3537.674, 2.446906, "None");
		if (!WorldQuest.Complete(this, 1))
		{
			if (RequiredQuest != -1)
			{
				RequiredQuest = -1;
				Thread t = new Thread(() =&gt;
				{
					while (robotManager.Products.Products.IsStarted)
					{
						if (Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)
						{
							if (WorldQuest.Complete(this, 1))
							{
								Logging.WriteDebug("[Stelleris Shakedown] fight fix stopped");
								break;
							}
							var targ = ObjectManager.Target;
							if (targ != null &amp;&amp; targ.IsValid &amp;&amp; targ.IsAlive &amp;&amp; targ.Entry == mobID &amp;&amp; !targ.IsAttackable)
							{
								Logging.WriteDebug("[Stelleris Shakedown] persuading " + targ.Name);
								Conditions.ForceIgnoreIsAttacked = true;
								Fight.StopFight();
								//Interact.InteractGameObject(targ.GetBaseAddress);
								GoToTask.ToPositionAndIntecractWithNpc(targ.Position, targ.Entry, 1);
								Usefuls.WaitIsCasting();
								Conditions.ForceIgnoreIsAttacked = false;
							}
						}
						Thread.Sleep(10000);
					}
				});
				t.Start();
				Logging.WriteDebug("[Stelleris Shakedown] fight fix started");
			}

			var mob = Questing.FindUnit(mobID);
			if (mob != null &amp;&amp; mob.IsValid &amp;&amp; mob.IsAlive)
			{
				if (!mob.IsAttackable)
				{
					Logging.WriteDebug("[Stelleris Shakedown] persuade " + mob.Name);
					GoToTask.ToPositionAndIntecractWithNpc(mob.Position, mob.Entry, 1);
				}
				else
				{
					Logging.WriteDebug("[Stelleris Shakedown] attack " + mob.Name);
					Questing.Attack(mobID);
				}
				return true;
			}
			GoToTask.ToPosition(campPosition);
			return true;
		}
		var mobs = new List&lt;int&gt;()
		{
			112016,//corvelyn
		};
		WorldQuest.TryKillElite(campPosition, mobs);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.CompleteGroup(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Life Finds a Way</Name>
      <QuestId>
        <int>43583</int>
      </QuestId>
      <QuestType>FullCSharpCode</QuestType>
      <QuestClass xsi:type="FullCSharpCodeEasyQuestClass">
        <Code>#if VISUAL_STUDIO
using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Class;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using wManager.Wow.Enums;
#endif

/// &lt;summary&gt;
/// copy of 'ShalassicPark' from Suramar
/// &lt;/summary&gt;
public class LifeFindsaWay : QuestClass
{
	static List&lt;Vector3&gt; pathOut = new List&lt;Vector3&gt;()
	{
		new Vector3(1482.211f, 4048.124f, 0.938818f, "None"),
		new Vector3(1487.662f, 4038.605f, 1.183161f, "None"),
		new Vector3(1491.547f, 4030.144f, 1.238685f, "None"),
		new Vector3(1496.461f, 4022.624f, 1.439511f, "None"),
		new Vector3(1501.551f, 4015.226f, 1.522209f, "None"),
		new Vector3(1505.899f, 4007.768f, 1.778251f, "None"),
		new Vector3(1509.899f, 4000.264f, 3.319249f, "None"),
		new Vector3(1514.501f, 3991.621f, 2.289793f, "None"),
		new Vector3(1516.745f, 3982.897f, 2.289793f, "None"),
		new Vector3(1517.255f, 3974.555f, 2.28981f, "None"),
		new Vector3(1516.714f, 3965.545f, 4.290835f, "None"),
		new Vector3(1515.632f, 3956.717f, 6.299695f, "None"),
		new Vector3(1514.224f, 3947.334f, 8.328133f, "None"),
		new Vector3(1511.652f, 3938.704f, 10.89111f, "None"),
		new Vector3(1508.367f, 3930.229f, 13.46378f, "None"),
		new Vector3(1506.587f, 3921.778f, 15.86017f, "None"),
		new Vector3(1505.358f, 3912.502f, 18.40324f, "None"),
		new Vector3(1504.66f, 3906.939f, 21.05679f, "None"),
		new Vector3(1508.256f, 3909.227f, 20.45055f, "None"),
		new Vector3(1515.577f, 3907.384f, 19.92945f, "None"),
		new Vector3(1514.281f, 3899.103f, 25.12514f, "None"),
		new Vector3(1508.755f, 3891.68f, 29.96643f, "None"),
		new Vector3(1510.044f, 3887.906f, 31.65438f, "None"),
		new Vector3(1506.383f, 3887.794f, 31.98691f, "None"),
		new Vector3(1500.776f, 3877.282f, 32.94233f, "None"),
		new Vector3(1497.486f, 3870.032f, 31.91043f, "None"),
		new Vector3(1492.554f, 3861.378f, 31.01885f, "None"),
		new Vector3(1489.738f, 3851.57f, 30.98215f, "None"),
		new Vector3(1487.435f, 3842.709f, 30.96418f, "None"),
		new Vector3(1485.632f, 3834.009f, 30.91722f, "None"),
		new Vector3(1482.509f, 3825.774f, 30.89235f, "None"),
		new Vector3(1477.302f, 3818.713f, 30.90675f, "None"),
		new Vector3(1469.917f, 3813.122f, 30.86519f, "None"),
		new Vector3(1461.897f, 3808.85f, 30.92572f, "None"),
		new Vector3(1453.457f, 3806.034f, 31.02853f, "None"),
		new Vector3(1445.605f, 3803.909f, 31.17451f, "None"),
		new Vector3(1436.931f, 3799.571f, 31.53322f, "None"),
		new Vector3(1429.72f, 3793.821f, 32.12002f, "None"),
		new Vector3(1421.916f, 3789.64f, 32.67555f, "None"),
		new Vector3(1414.135f, 3785.98f, 33.21156f, "None"),
		new Vector3(1406.384f, 3781.031f, 33.94297f, "None"),
		new Vector3(1398.881f, 3777.158f, 34.50632f, "None"),
		new Vector3(1388.944f, 3772.989f, 35.19498f, "None"),
		new Vector3(1382.129f, 3770.45f, 35.6647f, "None"),
		new Vector3(1373.274f, 3767.905f, 36.3325f, "None"),
		new Vector3(1364.576f, 3765.208f, 36.12129f, "None"),
		new Vector3(1356.226f, 3762.722f, 32.85983f, "None"),
		new Vector3(1347.004f, 3760.479f, 28.8908f, "None"),
		new Vector3(1338.976f, 3759.034f, 27.90615f, "None"),
		new Vector3(1308.357, 3720.928, 16.7302, "None"), //last outside
	};
	static List&lt;Vector3&gt; hotspots = new List&lt;Vector3&gt;()
	{
		new Vector3(1306.700, 3727.239, 16.72994),
		new Vector3(1309.095, 3663.132, 27.17959),
		new Vector3(1293.345, 3603.784, 35.45182),
		new Vector3(1288.865, 3633.881, 35.57856),
		new Vector3(1295.761, 3579.178, 35.45150),
		new Vector3(1348.853, 3543.749, 35.45167),
		new Vector3(1308.398, 3506.934, 35.51929),
		new Vector3(1348.853, 3543.749, 35.45167),
		new Vector3(1295.761, 3579.178, 35.45150),
		new Vector3(1288.865, 3633.881, 35.57856),
		new Vector3(1293.345, 3603.784, 35.45182),
		new Vector3(1309.095, 3663.132, 27.17959),
		new Vector3(1306.700, 3727.239, 16.72994),
	};
	static Vector3 _zooCenter = new Vector3(1500.969, 3885.862, 16.85728, "None");
	static float _zooRadius = 200;
	static float _zooHeight = 20;
	static float _minDist = 30;
	public LifeFindsaWay()
	{
		Name = "Life Finds a Way";
		QuestId.Add(43583);
		Step.AddRange(new[] { 0 });
	}
	static void Log(string text)
	{
		Logging.WriteDebug("[Life Finds a Way] " + text);
	}
	bool InZoo
	{
		get
		{
			var myPos = ObjectManager.Me.Position;
			return myPos.DistanceTo2D(_zooCenter) &lt; _zooRadius &amp;&amp; myPos.Z &lt; _zooCenter.Z + _zooHeight;
		}
	}
	public override bool Pulse()
	{
		if (!ObjectManager.Me.PlayerUsingVehicle)
		{
			RestoreSettings();
			Conditions.ForceIgnoreIsAttacked = false;
			GoToTask.ToPositionAndIntecractWithNpc(new Vector3(1481.71, 4049.166, -14.48639), 111062, 1);
			return true;
		}
		ChangeSettings();
		//if (!Questing.ObjectiveComplete(this, 2))
		if (InZoo)
		{
			Log("move out from zoo");
			Questing.GotoPathFromNear(pathOut, true, () =&gt; InZoo &amp;&amp; DinoControl());
			return true;
		}
		var p = hotspots[Others.Random(0, hotspots.Count - 1)];
		Log("random roaming to " + p.ToStringNewVector());
		GoToTask.ToPosition(p, _minDist, false, (c) =&gt; DinoControl());
		return true;
	}
	bool DinoControl()
	{
		if (ObjectManager.Pet.HealthPercent &lt; 75 &amp;&amp; Questing.NoCooldownSpell(220624))
		{
			Log("Devour Demon (heal 25%)");
			Questing.Vehicle.UseButton(3);
			return true;
		}
		if (Questing.NoCooldownSpell(220580))
		{
			Log("Display Dominance (aoe stun)");
			Questing.Vehicle.UseButton(2);
			return true;
		}
		if (Questing.NoCooldownSpell(220626))
		{
			Log("Crush (aoe)");
			MovementManager.StopMove();
			Questing.Vehicle.UseButton(1);
			return true;
		}
		if (Questing.NoCooldownSpell(220626))
		{
			Log("Run Riot (haste)");
			Questing.Vehicle.UseButton(4);
			return true;
		}
		return true;
	}
	public static void ChangeSettings()
	{
		if (Conditions.ForceIgnoreIsAttacked)
			return;

		Conditions.ForceIgnoreIsAttacked = true;
		wManager.wManagerSetting.CurrentSetting.UseMount = false;
		wManager.wManagerSetting.CurrentSetting.Repair = false;
		wManager.wManagerSetting.CurrentSetting.UseMail = false;
		wManager.wManagerSetting.CurrentSetting.Selling = false;
		wManager.wManagerSetting.CurrentSetting.LootMobs = false;
		wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = true;
		Log("settings changed. zoo radius=" + _zooRadius + " height=" + _zooHeight);
	}
	public static void RestoreSettings()
	{
		if (!Conditions.ForceIgnoreIsAttacked)
			return;

		WorldQuest.SetDefaultSettings();
		Log("settings changed");
	}
	public override bool IsComplete()
	{
		return WorldQuest.Complete(this);
	}
	public override bool HasQuest()
	{
		return true;
	}
	public override bool IsCompleted()
	{
		return false;
	}
}</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>1</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition />
      <RepeatableQuest>false</RepeatableQuest>
      <NotRequiredInQuestLog>false</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>A Spy in Our Midst</Name>
      <QuestId>
        <int>42969</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		//var start = new Vector3(667.3295, 4095.092, 10.70667, "None");
		var start = new Vector3(667.9703, 4094.817, 10.70686, "None");
		var startPath = new List&lt;Vector3&gt;()
		{
			new Vector3(651.4048, 4089.524, 1.775174, "None"),
			new Vector3(658.2443, 4091.538, 2.991523, "None"),
			new Vector3(659.5772, 4099.146, 2.991127, "None"),
			new Vector3(670.1819, 4102.019, 10.70663, "None"),
			start,
		};
		var pathFollow = new List&lt;Vector3&gt;()
		{
			new Vector3(668.2194f, 4096.034f, 11.05208f, "None"),
			new Vector3(670.3555f, 4101.568f, 10.70641f, "None"),
			new Vector3(665.3958f, 4100.992f, 7.530154f, "None"),
			new Vector3(662.2136f, 4099.916f, 4.81843f, "None"),
			new Vector3(660.0378f, 4096.442f, 2.992629f, "None"),
			new Vector3(658.2476f, 4092.133f, 2.991217f, "None"),
			new Vector3(654.306f, 4090.721f, 3.272425f, "None"),
			new Vector3(651.4319f, 4089.269f, 1.743199f, "None"),
			new Vector3(648.2954f, 4087.684f, 1.493482f, "None"),
			new Vector3(644.7156f, 4084.258f, 1.493482f, "None"),
			new Vector3(642.3261f, 4081.691f, 1.493482f, "None"),
			new Vector3(638.337f, 4076.022f, 1.870349f, "None"),
			new Vector3(637.7484f, 4072.6f, 2.540308f, "None"),
			new Vector3(638.2634f, 4069.125f, 4.368592f, "None"),
			new Vector3(639.2073f, 4065.761f, 6.207294f, "None"),
			new Vector3(640.1725f, 4062.542f, 7.524744f, "None"),
			new Vector3(641.239f, 4059.033f, 7.595327f, "None"),
			new Vector3(642.2585f, 4055.685f, 6.32236f, "None"),
			new Vector3(643.4396f, 4052.465f, 4.530714f, "None"),
			new Vector3(644.3978f, 4049.102f, 2.670158f, "None"),
			new Vector3(645.1494f, 4045.684f, 1.843373f, "None"),
			new Vector3(645.9011f, 4042.265f, 1.493051f, "None"),
			new Vector3(646.6827f, 4038.71f, 1.493051f, "None"),
			new Vector3(647.3668f, 4034.272f, 1.493051f, "None"),
			new Vector3(647.8933f, 4030.246f, 1.493051f, "None"),
			new Vector3(648.8493f, 4025.733f, 1.493051f, "None"),
			new Vector3(649.7213f, 4022.343f, 1.493051f, "None"),
			new Vector3(650.5397f, 4018.94f, 1.589576f, "None"),
			new Vector3(651.2802f, 4015.505f, 1.49359f, "None"),
			new Vector3(652.063f, 4011.807f, 1.49359f, "None"),
			new Vector3(653.0168f, 4007.301f, 1.49359f, "None"),
			new Vector3(654.7264f, 4002.284f, 1.49359f, "None"),
			new Vector3(657.4431f, 3998.926f, 1.49359f, "None"),
			new Vector3(660.6492f, 3996.473f, 1.49359f, "None"),
			new Vector3(665.5577f, 3993.777f, 1.49359f, "None"),
			new Vector3(669.6072f, 3991.553f, 1.49359f, "None"),
			new Vector3(673.5692f, 3987.401f, 1.49359f, "None"),
			new Vector3(676.3843f, 3984.288f, 1.49359f, "None"),
			new Vector3(678.3715f, 3980.59f, 1.635767f, "None"),
			new Vector3(680.4323f, 3976.429f, 2.790413f, "None"),
			new Vector3(682.1754f, 3972.91f, 4.080841f, "None"),
			new Vector3(683.7264f, 3969.773f, 5.313645f, "None"),
			new Vector3(685.7742f, 3965.022f, 5.89648f, "None"),
			new Vector3(687.2357f, 3961.385f, 5.89648f, "None"),
			new Vector3(689.3564f, 3956.355f, 5.685379f, "None"),
			new Vector3(690.9812f, 3952.155f, 5.685379f, "None"),
			new Vector3(692.4236f, 3945.314f, 5.685379f, "None"),
			new Vector3(692.0139f, 3938.674f, 5.685379f, "None"),
			new Vector3(689.543f, 3934.666f, 5.685379f, "None"),
			new Vector3(685.5653f, 3933.299f, 5.685379f, "None"),
			new Vector3(679.7069f, 3931.417f, 5.685379f, "None"),
			new Vector3(675.1748f, 3929.962f, 5.685379f, "None"),
			new Vector3(670.9094f, 3928.593f, 5.685379f, "None"),
			new Vector3(666.7371f, 3928.111f, 5.685379f, "None"),
			new Vector3(662.8358f, 3927.662f, 5.685379f, "None"),
			new Vector3(657.8356f, 3927.088f, 5.685379f, "None"),
			new Vector3(653.3849f, 3926.577f, 5.685379f, "None"),
			new Vector3(646.4306f, 3925.778f, 5.685379f, "None"),
			new Vector3(639.5728f, 3924.396f, 5.685379f, "None"),
			new Vector3(635.1862f, 3924.144f, 5.685379f, "None"),
			new Vector3(631.4972f, 3922.797f, 5.685379f, "None"),
			new Vector3(626.4997f, 3920.973f, 5.685379f, "None"),
			new Vector3(620.5816f, 3918.813f, 5.685379f, "None"),
			new Vector3(615.7222f, 3917.039f, 5.685379f, "None"),
			new Vector3(611.4521f, 3914.636f, 5.685379f, "None"),
			new Vector3(605.4319f, 3911.073f, 5.685379f, "None"),
			new Vector3(600.5919f, 3906.114f, 5.685379f, "None"),
			new Vector3(599.6817f, 3899.287f, 5.685379f, "None"),
			new Vector3(600.9789f, 3892.417f, 5.685379f, "None"),
			new Vector3(602.5251f, 3885.59f, 5.685379f, "None"),
			new Vector3(604.1033f, 3878.771f, 5.685379f, "None"),
			new Vector3(604.3659f, 3871.81f, 5.685379f, "None"),
			new Vector3(601.3287f, 3865.718f, 5.685379f, "None"),
		};
		var end = new Vector3(591.1605, 3856.403, 7.484153, "None");
		var minDist = 20f;
		var maxDist = 25;
		if (WorldQuest.Complete(this, 2))
		{
			Logging.WriteDebug("[A Spy in Our Midst] kill lieutenant");
			if (!Questing.Attack(109408)) //http://www.wowhead.com/npc=109408/lieutenant-piet
			{
				GoToTask.ToPosition(end);
			}
			return true;
		}
		if (!WorldQuest.Complete(this, 1))
		{
			Logging.WriteDebug("[A Spy in Our Midst] goto start");
			Questing.GotoPathFromNear(startPath);
			//GoToTask.ToPosition(start);
			return true;
		}
		var npc = Questing.FindUnit(109388); //http://www.wowhead.com/npc=109388/nightborne-spy
		if (npc != null &amp;&amp; npc.IsValid)
		{
			/*/
			Logging.WriteDebug("[A Spy in Our Midst] escort spy");
			var dir = npc.Position - ObjectManager.Me.Position;
			dir /= dir.Magnitude();
			dir *= minDist;
			GoToTask.ToPosition(npc.Position - dir);
			//*/
			for (int i = 0; i &lt; pathFollow.Count; i++)
			{
				var followP = pathFollow[i];
				var npcDist = followP.DistanceTo(npc.Position);
				if (npcDist &gt; maxDist)
					continue;

				if (npcDist &lt; minDist)
				{
					Logging.WriteDebug("[A Spy in Our Midst] wait spy #" + i + " p=" + followP + ". too close ");
					return true;
				}
				if (i &gt; 0)
				{
					Logging.WriteDebug("[A Spy in Our Midst] escort spy #" + i + " p=" + followP + " ");
					var escortPath = pathFollow.GetRange(0, i);
					Questing.GotoPathFromNear(escortPath);
				}
			}
			return true;
		}
		Logging.WriteDebug("[A Spy in Our Midst] wait at start");
		Questing.GotoPathFromNear(startPath);
		return true;</Code>
      </QuestClass>
      <ObjectiveCount1>1</ObjectiveCount1>
      <ObjectiveCount2>1</ObjectiveCount2>
      <ObjectiveCount3>1</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
    <EasyQuest>
      <Name>Secret Correspondence</Name>
      <QuestId>
        <int>42962</int>
      </QuestId>
      <QuestType>OverridePulseCSharpCode</QuestType>
      <QuestClass xsi:type="OverridePulseCSharpCodeEasyQuestClass">
        <Code>		var p = new Vector3(712.9019, 4005.85, 1.494282, "None");
		if (GoToTask.ToPosition(p))
		{
			var targ = Questing.FindUnit(106919);
			if (targ != null &amp;&amp; targ.IsValid)
			{
				if (ObjectManager.Target.Guid != targ.Guid)
					Interact.InteractGameObject(targ.GetBaseAddress, true, true, true);

				if (targ.GetDistance &lt; 5)
					ItemsManager.UseItem(137299);
			}
		}
		return true;
</Code>
      </QuestClass>
      <ObjectiveCount1>3</ObjectiveCount1>
      <ObjectiveCount2>0</ObjectiveCount2>
      <ObjectiveCount3>0</ObjectiveCount3>
      <ObjectiveCount4>0</ObjectiveCount4>
      <ObjectiveCount5>0</ObjectiveCount5>
      <ObjectiveCount6>0</ObjectiveCount6>
      <ObjectiveCount7>0</ObjectiveCount7>
      <ObjectiveCount8>0</ObjectiveCount8>
      <ObjectiveCount9>0</ObjectiveCount9>
      <ObjectiveCount10>0</ObjectiveCount10>
      <AutoDetectObjectiveCount1>false</AutoDetectObjectiveCount1>
      <AutoDetectObjectiveCount2>false</AutoDetectObjectiveCount2>
      <AutoDetectObjectiveCount3>false</AutoDetectObjectiveCount3>
      <AutoDetectObjectiveCount4>false</AutoDetectObjectiveCount4>
      <AutoDetectObjectiveCount5>false</AutoDetectObjectiveCount5>
      <AutoDetectObjectiveCount6>false</AutoDetectObjectiveCount6>
      <AutoDetectObjectiveCount7>false</AutoDetectObjectiveCount7>
      <AutoDetectObjectiveCount8>false</AutoDetectObjectiveCount8>
      <AutoDetectObjectiveCount9>false</AutoDetectObjectiveCount9>
      <AutoDetectObjectiveCount10>false</AutoDetectObjectiveCount10>
      <CanCondition />
      <IsCompleteCondition>return WorldQuest.Complete(this);</IsCompleteCondition>
      <RepeatableQuest>true</RepeatableQuest>
      <NotRequiredInQuestLog>true</NotRequiredInQuestLog>
      <PickUpQuestOnItem>false</PickUpQuestOnItem>
      <PickUpQuestOnItemID>0</PickUpQuestOnItemID>
      <Comment />
      <GossipOptionRewardItem>1</GossipOptionRewardItem>
      <RequiredQuest>0</RequiredQuest>
      <MaxLevel>999</MaxLevel>
      <MinLevel>0</MinLevel>
      <WoWClass>None</WoWClass>
    </EasyQuest>
  </EasyQuests>
  <Script>camelot10\Libs\WorldQuest.cs
camelot10\Libs\Questing.cs
camelot10\Libs\SuramarQuests.cs</Script>
  <OffMeshConnections>
    <OffMeshConnection>
      <Path>
        <Vector3 X="505.6385" Y="4115.939" Z="6.393972" />
        <Vector3 X="498.4701" Y="4110.459" Z="8.204448" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>safe keeping house (in)</Name>
    </OffMeshConnection>
    <OffMeshConnection>
      <Path>
        <Vector3 X="498.4701" Y="4110.459" Z="8.204448" />
        <Vector3 X="505.7731" Y="4115.854" Z="6.394297" />
      </Path>
      <ContinentId>1220</ContinentId>
      <Name>safe keeping house (out)</Name>
    </OffMeshConnection>
  </OffMeshConnections>
</EasyQuestProfile>